[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d ThanePark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image:https://travis-ci.org/CS2103-AY1819S1-W14-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103-AY1819S1-W14-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image:https://coveralls.io/repos/github/CS2103-AY1819S1-W14-2/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub][\"Coverage Status\", link\u003d\"https://coveralls.io/github/CS2103-AY1819S1-W14-2/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* ThanePark is a command-line application that streamlines theme park management in tracking queue status of rides."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* It takes away the pain from your management worries."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Target user profile"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Works at a attraction/theme park as an operator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Need to manage crowds and update status of park"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Highly proficient with keyboard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* This is a desktop theme park management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** A more sophisticated GUI that includes a list  panel and an in-built Browser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 14,
      "-": 29
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"keenlok\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"LAI K...N LOK\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"authorNames\": [\"keenlok\", \"Keen Lok\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"leongengsea\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"LEONG...G SEA\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"authorNames\": [\"leongengsea\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"jiajunteo\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"TEO J...A JUN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "      \"authorNames\": [\"jiajunteo\", \"NEW-DGU39GCO4DB\\teoji\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"YuPeiHenry\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"YU PE...HENRY\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"authorNames\": [\"YuPeiHenry\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 24,
      "jiajunteo": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    compile \u0027com.j2html:j2html:1.3.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    archiveName \u003d \u0027thanepark.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u0027site-name\u0027: \u0027ThanePark\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W14-2/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        include \u0027ShortHelpWindow.html\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 4,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark was developed by the https://github.com/CS2103-AY1819S1-W14-2[CS2103-AY1819S1-W14-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Yu Pei, Henry"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::yupeihenry.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{empty}[https://github.com/YuPeiHenry[github]] [\u003c\u003cYuPeiHenry#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Team Lead, Code Quality, Deliverables and Deadlines, Integration +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Teo Jia Jun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::jiajunteo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{empty}[https://github.com/jiajunteo[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Lai Keen Lok"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::keenlok.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{empty}[https://github.com/keenlok[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Leong Engsea"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::leongengsea.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{empty}[https://github.com/leongengsea[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 20,
      "-": 28
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d ThanePark - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W14-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "By: `Team CS2103-W14-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Welcome to the documentation for ThanePark. The purpose of this documentation is to assist you in their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "transition to begin developmental work on this application. If you are a developer looking to *adopt this application* for their"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "own uses, go to \u003c\u003cSetting up, *`Setting up`*\u003e\u003e. If you wish to *contribute to the current application*, go to \u003c\u003cDev Ops, *`Developing the application`*\u003e\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you wish to *update documentation* of this application, go to \u003c\u003cDocumentation,*`Documentation`*\u003e\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark is *a desktop application* for *theme park management*. The application is optimized for *keyboard-oriented*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "users and retains *user-friendly graphics* that informs users of their decisions *in a glance*."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Before you get started on development on the application, you will need to complete the following steps below."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Checking Software Prerequisites"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "To ensure a smooth transition into your development, check that the following software versions are installed:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *JDK `9`* or later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *IntelliJ* IDE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "After you have installed the correct software, follow the steps below to setup your development environment locally:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Verifying the Setup"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It is recommended that you verify the setup by trying the following actions:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Configuring your Integrated Development Environment"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Some configurations of your Integrated Development Environment need to be set:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[Tips]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "After you fork the repo, the documentation will still have the CS2103-W14-2 branding and refer to the `CS2103-W14-2/main` repo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-W14-2/main`), you should do the following:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "When you are ready to start coding:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This section will help you better understand the software architecture of ThanePark."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It shows the various interactions between \u003c\u003cDesign-Main,*`Main`*\u003e\u003e and 4 other components:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003cDesign-Model,*`Model`*\u003e\u003e and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Given below is a quick overview of each component:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[Design-Main]]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Main component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *`Commons`* represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `UI` component is responsible for any UI-related functionality of the App."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Logic` component is responsible for handling and executing command logic."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Model` component stores an internal representation of the state of the application in memory."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Storage` component is responsible for reading data from, and writing data to, the hard disk."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d Filter Feature"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".Activity Diagram for the Filter Feature"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image::FilterActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The filter function is being implemented with the help of `FilterCommand` and `AttributePredicate` class. When the"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`ThaneParkParser` parses the user input and finds the filter command word `filter` it calls a new `FilterCommandParser` to"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "keenlok"
        },
        "content": "parse the arguments from the user input."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "keenlok"
        },
        "content": "It checks if there are any of the maintenance or waiting time prefix in the arguments. If any of the prefixes are present,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "keenlok"
        },
        "content": "an `AttributePredicate` is created with the operator (‘\u003c’ or ‘\u003e’) and the attribute they are checking for (ie"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`Maintenance` or `WaitTime`). The AttributePredicates are added to a list. The user can add any amount of predicates that"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "keenlok"
        },
        "content": "they want, like 3 predicates e.g. `filter w/\u003c 50 w/ \u003e 5 m/\u003e10` and the list would contain 3 predicates and if the user"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "keenlok"
        },
        "content": "decides to input only one predicate, the list will only contain one."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "keenlok"
        },
        "content": "A new `RideContainsConditionPredicate` is instantiated with the list of AttributePredicates. The `FilterCommandParser` will"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "keenlok"
        },
        "content": "return a new `FilterCommand` with the `RideContainsConditionPredicate` in it."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The LogicManager execute the command, and the `RideContainsConditionPredicate` will be set as the predicate to filter"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "keenlok"
        },
        "content": "the list of rides and it will check if the ride fulfils the required predicate(s). After that a list of filtered rides"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "keenlok"
        },
        "content": "would be returned after each ride is tested with the predicate."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support filter commands"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* **Alternative 1:** Gives the entire string condition to the RideContainsConditionPredicate to test."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Pros: Easier to implement as classes no need to abstracted"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Cons: RideContainsConditionPredicate would carry out parsing functions which would make it less cohesive"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* **Alternative 2(Current Choice):** Abstracting attributes that contain numeric values into a separate class and creating a"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "AttributePredicate to test the attribute"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Pros: Easier to add more numeric attributes and minimal changes required to filter new attributes"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Cons: Need to implement more classes to handle"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::autocompletesuggest[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Autocomplete/Suggest feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *autocomplete/suggest* mechanism is facilitated by `SuggestCommand`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It extends `Command` and serves as a special kind of `Command` that cannot be directly invoked by the `LogicManager`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "A new instance of `SuggestCommand` is created whenever `ThaneParkParser` fails to find a matching CommandWord,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "or when kbd:[TAB] is pressed inside the *Command Box*. See the 2 figures below:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user executing command"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::AutocompleteSuggestActivityDiagram1.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user pressing tab"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::AutocompleteSuggestActivityDiagram2.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The application will then proceed with executing the `SuggestCommand`, which returns prefix-matched `Command` s."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "These matching `Command` s are reflected in both `CommandResult` and `ShowHelpRequestEvent`, which will in turn update"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "`ResultDisplay` and `CommandBox` text. See figure below:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user pressing tab"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::AutocompleteSuggestActivityDiagram3.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling kbd:[TAB] autocomplete"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Handle autocomplete through events and `SuggestCommand`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Flexible. Easy to modify event behaviors for `SuggestCommandEvent` and `NewResultAvailableEvent`. Modular design that"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "can be easily reused to create other autocomplete features."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Difficult to implement as it requires some understanding of the `EventsCenter` and handling of the various"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Event types in the application."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 2:** Handle everything in `CommandBox`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Difficult to extend. When modifying behavior of `CommandBox` text autocompletion, may have to modify behavior"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "for result listing of results in `ResultDisplay`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::autocompletesuggest[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[Documentation]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Asciidoc was used for writing documentation."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you need to edit the diagrams found in this document, the `.pptx` files used to create diagrams in this document can"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This section covers what you need to know about running and designing automated tests for further development on this application."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[Dev Ops]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Works at a attraction/theme park as manager, operator, customer relations… Mainly for operators."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Need to manage crowds and update status of park"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Highly proficient with keyboard"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Value proposition*: Manage attraction/theme parks more efficiently."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d User stories that will be implemented"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |identify popularity trends in attractions |better plan for future expansions"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |identify manpower and physical assets shortages |better manage the staff roster"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |find less popular rides |replace them with better ones, to keep the park fresh for visitors…"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |add/delete attractions |let operators know the changes in the park."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |find detailed information about an attraction |perform planning with better knowledge."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |view history |perform some amount of audit on the actions of employees."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |monitor status of attractions |appropriately handle crowds and technical faults."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |update the system on the queue status of the attraction I am stationed at |provide everyone access to live data."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |shutdown/reopen attraction |facilitate maintenance works."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |find detailed information about an attraction |perform my on-site duties without misinformation."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |view history |keep track what work I have already completed."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides have the longest/shortest queue |suggest to customers which rides to ride"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |find detailed information about an attraction |appropriately answer visitor queries on attractions."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |ask the system to complete/correct my sentences |reduce the need to remember all the commands."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |sort the entries according to a desired order |get a more comprehensive view."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |view summarized help |stay not overwhelmed."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |view detailed help about a certain command |have an idea on how to use the command on unique use cases."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |undo an action |revert the damage done by my own negligence."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |redo an action |perform an action that I undone at will."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |new user |find my basic commands |complete my basic tasks with ease."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |new user |get a quickhelp on startup |get productive within 30 seconds."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d User stories that are kept for consideration for v2.0"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |promote less frequented attractions |there is an increase in utilisation and growth"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |attraction operator |give suggestions |new/confused visitors have a destination"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |attraction operator |minimise waiting time for visitors |they can play more and wait less"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |know which souvenirs sells the most |increase revenue for the theme park"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |get a priority on offering visitors with the option of patronizing a less crowded"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "attraction and coming back later without having to queue |visitors do not feel mistreated."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |track visitors visiting an assigned attraction |visitors cannot cheat the queue system"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |track ongoing promotions |visitors will be offered reward points for visiting promoted attractions"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides the customers like most/least |upgrade rides to fit the customers’ needs"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides have the longest/shortest queue |suggest to customers which rides to ride"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |get recorded feedback from visitors |I will be able to have a better performance/ do my job better"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |better appease visitors |they are more inclined to return"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |give compensation to dissatisfied visitors |raise the approval rating of the park"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |give a suggested itinerary (randomized) |visitors can enjoy more rides with their money’s worth"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |make visitors feel welcomed in the park |they can enjoy themselves"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |give directions to a less crowded food joint |visitors can enjoy a meal with their friends/family"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |register visitors’ souvenir shopping list |visitors do not need to carry bulky souvenirs around"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |find a less crowded shop to buy souvenir |"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Add attraction"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User adds attraction."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows add success message."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User adds attraction that already exists."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows add error message. +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Delete attraction"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager +"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User deletes attraction."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark show delete success message."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User deletes attraction that does not exist."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows delete error message. +"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Exit"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User exits ThanePark application."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark completes closing process and shows relevant message."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Find attraction"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager/Operator/Customer relations +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User finds an attraction by name."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows detailed information of attraction."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. There is no exact match of given name"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows a list of names with substring match."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a2. User finds attraction using complete name as shown."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1aa. There is no substring match."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1aa1. ThanePark shows warning message to user."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Help"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for help."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows summarized information for help."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User requests for more help."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows normal detail of information for all commands."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1b. User requests for help on specific command."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1b1. ThanePark shows detailed help with more examples on specific command."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1c. User requests for help with extra invalid parameters."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: History"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager/Operator +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for history."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows history."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Redo"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to redo."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark redoes the next action in the redo queue."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. Redo queue is empty"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows redo error."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Undo"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to undo."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark undoes the most recent undoable action."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. There is no most recent undoable action as system just started up."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows undo error."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Update attraction"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to update information of an attraction."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows the updated state of the attraction."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows an error message for updating the attraction information"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Shutdown attraction"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User shuts down an attraction."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark sets the status of attraction to be shut down."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows an error message for shutting down the attraction."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1b. The attraction is already shut down."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1b1. ThanePark shows error."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: View attraction"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to view all attractions."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows a summarized view for the whole list of attractions in the park."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Quickview"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to view all attractions."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows a summarized view sorted by queue status."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Filter"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for a filter query."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows all attractions that matches the filter criteria."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Autocomplete"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User types a command halfway."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  System idles."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "3.  User presses tab."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "4.  System completes the command word for the user."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 3a. There is more than 1 prefix match for the half-typed command."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 3a1. ThanePark shows a list of command words that start with the same prefix."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 3b. There is no match for the half-typed command."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 3b1. ThanePark idles."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  Should be able to hold up to 100 attractions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  System startup should not take more than 10 seconds."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  User should become productive within first 30 seconds."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[attraction-ride]] Attraction/ride:"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "An attraction/ride that is meant for visitors to patronize."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[themepark]] Theme/ Amusement park:"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "A place with rides for visitors to patronise."
      }
    ],
    "authorContributionMap": {
      "keenlok": 32,
      "YuPeiHenry": 392,
      "-": 651
    }
  },
  {
    "path": "docs/ShortHelp.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `add \u003cattraction\u003e`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `delete \u003cattraction\u003e`"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `exit`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `find \u003cattraction\u003e`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `help [option]`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `history |find| [findargs...]`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `undo`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `redo`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `update \u003cattraction\u003e \u003ctag\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `shutdown \u003cattraction\u003e`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `view \u003cname\u003e`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `quickview`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `filter \u003ctag\u003e \u003ccondition\u003e`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `{tab}`"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 16
    }
  },
  {
    "path": "docs/ShortHelpWindow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::ShortHelp.adoc[]"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d Thane Park - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "By: `CS2103-AY1819S1-W14-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "ThanePark is for those who *prefer to use a desktop app for managing the rides in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "your theme park!*. More importantly, ThanePark is *optimized for those who prefer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "to work with a Command Line Interface* (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Graphical User Interface (GUI). If you can type fast, ThanePark can get your"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ride information faster than traditional GUI apps. Interested? Jump"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Steps to set up ThanePark:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".  Check that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".  Download the latest `thanepark.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ThanePark."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Congratulations! You have successfully set up ThanePark!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " insert diagram here of help window"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Type some of these commands to try out ThanePark:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *`viewall`* : lists all rides in your theme park."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands used for ThanePark."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in chevrons `\u003c\u003e` denotes compulsory field. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `add \u003cattraction\u003e`\u003cmaintenance\u003e `\u003cwaitTime\u003e` `\u003caddress\u003e`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in square brackets `[]` denotes optional field. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `help [more]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in curly brackets `{}` denotes keystroke. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `{tab}` is the TAB keystroke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items ending with ellipses `...` denotes variable arguments. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `history [findargs...]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Parameters can be in any order +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: if the command specifies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  n/name p/address, p/address n/name is also acceptable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Manage commands"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to managing commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Display short summary of important commands.  +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `help [option]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Displays a full list of important commands with a more detailed description if more is supplied as an `option`. If a specific command is supplied as `option`, show"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "greater detail of the specified command. If invalid `option` is specified, will show default help message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d History of previous commands: `history`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Display previous commands during this session. Inputted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "commands from the past are logged into the system. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing commands: `undo`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Undo previous command during current session. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing previously undone commands: `redo`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Reverse the previously undone commands during current session. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Autocomplete/Suggest: `{tab}`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Non-tech savvy users wouldn’t need to remember commands and can"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "just use `tab` s to complete their sentences, or get suggestions on what"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "commands start with their specified prefix. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `{tab}`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Exit: `exit`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Exits the ThanePark application. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Manage input/output of attractions"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to managing attractions."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Add attractions: `add`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Add an attraction by name with the information. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: ``add `\u003cattraction\u003e` `\u003cmaintenance\u003e` `\u003cwaitTime\u003e` `\u003caddress\u003e` [tag(s)]``"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "A ride can have any number of tags (including 0). +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* add n/Transformers m/1 w/30 a/John street, block 123, #01-01"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* add n/The Mummy m/3 w/45 a/311, Clementi Ave 2, #02-25 t/3D t/indoor"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Delete attractions: `delete`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Deletes the specified attraction from the ThanePark. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Deletes the ride at the specified index."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* The index refers to the index number shown in the list of displayed rides."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* `viewall` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "  `delete 2` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "  Deletes the 2nd ride in ThanePark."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* `find Puss in Boots\u0027 Giant Journey` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "   `delete 1` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "   Deletes the 1st ride in the results of the find command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Update information of attraction: `update`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Updates the information `\u003ctag\u003e` with `\u003cvalue\u003e` about the ride with `\u003cname\u003e`. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `update \u003cattraction\u003e \u003ctag\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Shutdown attraction: `shutdown`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Close the ride for the day. Display statistics for the ride on that day. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `shutdown \u003cattraction\u003e`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Open attraction: `open`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Open the ride for the day. Display statistics for the ride on that day. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `open \u003cattraction\u003e`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d View the list of rides"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to viewing list on rides."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "# tag::view[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing all available attractions: `viewall`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Display all available attractions in a list according to the number of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "people that have taken the ride for the day in alphanumeric order if"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "optional fields are not specified. `status` field specifies whether the user"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "want to view opened or closed rides. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `viewall [status]`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d View detailed information of a specific ride: `view`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Display all available information about a single ride on the list of displayed rides."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "`index` field specifies the index of the ride that the user wants to view. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `view \u003cindex\u003e`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Quick view information of top five most frequented rides: `quickview`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Quick view information of the top 5 most frequented rides in the park. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `quickview`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "# end::view[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Filter the list of rides"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to filtering and finding rides."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Filter: `filter`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Display all rides that fits the condition in a table. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Can only filter conditions that have numeric values i.e. Maintenance and WaitTime +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Can include more conditions as desired. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Format: `filter \u003ctag\u003e \u003ccondition\u003e [[tag] [condition]...]` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `filter w/ \u003c 500 w/ \u003e 50` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Filters attractions with waiting time less than 500 and more than 50 minutes."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Find a particular attraction: `find`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Find the rides that the user needs to check on. Case insensitive. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Can only find the name, the address, and the tags of the attractions. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Must include arguments when finding. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Format: `find \u003c[name] [[tag][keyword]...]\u003e` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `find accelerator` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Finds and displays the list of attractions in ThanePark with the name \"accelerator\"."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `find a/ street` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Finds and displays the list of attractions with addresses that contain the word \"street\"."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ThanePark folder."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add*: `add \u003cattraction\u003e` `\u003cmaintenance\u003e` `\u003cwaitTime\u003e` `\u003caddress\u003e` `[tag(s)]` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. add n/Mummy m/3 w/45 a/311, Clementi Ave 2, #02-25 t/3D t/indoor"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete*: `delete \u003cindex\u003e` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. delete 3"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Exit*: `exit`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Find*: `find \u003cattraction\u003e`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Help*: `help [option]`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *History*: `history`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo*: `undo`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo*: `redo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Update*: `update \u003cattraction\u003e \u003ctag\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* *Open*: `open \u003cattraction\u003e`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Shutdown*: `shutdown \u003cattraction\u003e`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *View*: `view \u003cname\u003e`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Quickview*: `quickview`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Filter*: `filter \u003ctag\u003e \u003ccondition\u003e`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *tab*: `{tab}`"
      }
    ],
    "authorContributionMap": {
      "keenlok": 24,
      "jiajunteo": 100,
      "YuPeiHenry": 41,
      "-": 121
    }
  },
  {
    "path": "docs/team/YuPeiHenry.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Major enhancement*: added"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Managed releases `v1.1` - `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#48], https://github.com[#82], https://github.com[#78]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[94], https://github.com[89])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  \u003cWait for bug hunting PE\u003e)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Set up Travis CI, coveralls and autodoc to the project"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Integrated a third party library (j2html) to the project (https://github.com[#79])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../UserGuide.adoc[tag\u003dautocompletesuggest]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautocompletesuggest]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 56
    }
  },
  {
    "path": "docs/team/jiajun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d Teo Jia Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d PROJECT: ThanePark"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This portfolio serves to document my contributions to ThanePark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ThanePark is a desktop application used for theme park operators to manage their rides."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "My task in ThanePark is to enhance the viewall command to view rides"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The user interacts with it using a Command Line Interface(CLI), and it has a Graphical"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "User Interface(GUI) created with JavaFX. It is written in Java, and has about 10,000 lines of code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dview]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.StorageFileCreatingClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.ThaneParkStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.XmlThaneParkStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ThanePark ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StorageFileCreatingClass.disableTestMode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThaneParkStorage thaneParkStorage \u003d new XmlThaneParkStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        storage \u003d new StorageManager(thaneParkStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cReadOnlyThanePark\u003e addressBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ReadOnlyThanePark initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ThanePark\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                storage.saveAddressBook(initialData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            initialData \u003d new ThanePark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            initialData \u003d new ThanePark();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        logger.info(\"Starting ThanePark \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 17,
      "YuPeiHenry": 4,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/CommandsLogCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.PropertyException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.storage.XmlListOfCommandEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Logs down command history into a xml file. Stops writing when file size exceeds 5MB, soft limit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Will not retrieve entries if file exceeds 2 * 5MB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandsLogCenter extends StorageFileCreatingClass {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String STANDARDIZED_ENCODING \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String STANDARDIZED_XML_HEADER \u003d String.format(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"%1$s\\\"?\u003e\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String LIST_HEADER \u003d \"\u003cxmlListOfCommandEntry\u003e\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String LOG_FILE \u003d \"commandHistory.xml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_LOG_INACCESSIBLE \u003d \"%1$s cannot be accessed\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String LIST_ENDING \u003d \"\\n\u003c/xmlListOfCommandEntry\u003e\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_FILE_SIZE_EXCEEDED \u003d \"Maximum file size exceeded, %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean isLogAccessible \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes, create the command log file with header if it does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file \u003d new File(getFilePathString(LOG_FILE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                isLogAccessible \u003d isLogAccessible \u0026\u0026 createFile(getFilePathString(LOG_FILE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.append(STANDARDIZED_XML_HEADER + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.append(LIST_HEADER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ie.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isLogAccessible \u003d file.exists() \u0026\u0026 file.canWrite();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Writes the given xmlCommandEntryString to file. Throws IOException if file does not exist or cannot be written."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void log(CommandEntry commandEntry) throws IOException, JAXBException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isLogAccessible) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_LOG_INACCESSIBLE, getFilePathString(LOG_FILE)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (file.length() \u003e MAX_FILE_SIZE_IN_BYTES) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_SIZE_EXCEEDED, String.valueOf(MAX_FILE_SIZE_IN_BYTES)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedCommandEntry xmlCommandEntry \u003d new XmlAdaptedCommandEntry(commandEntry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(xmlCommandEntry.getClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Marshaller marshaller \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        standardizeXmlOutput(marshaller);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.marshal(xmlCommandEntry, stringWriter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(stringWriter.toString() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a XmlListOfCommandEntry parsed from the command history log file. If file size exceeds twice of size"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * limit, IOException will be thrown."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static XmlListOfCommandEntry retrieve() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isLogAccessible) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_LOG_INACCESSIBLE, getFilePathString(LOG_FILE)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (file.length() \u003e 2 * MAX_FILE_SIZE_IN_BYTES) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_SIZE_EXCEEDED,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                String.valueOf(2 * MAX_FILE_SIZE_IN_BYTES)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(getFilePath(LOG_FILE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, STANDARDIZED_ENCODING) + LIST_ENDING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringReader stringReader \u003d new StringReader(fileData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        JAXBContext jaxbContext \u003d JAXBContext.newInstance(XmlListOfCommandEntry.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return (XmlListOfCommandEntry) unmarshaller.unmarshal(stringReader);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Deletes the log file for command history."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean delete() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.delete();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the marshaller to use a standard XML output."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static void standardizeXmlOutput(Marshaller marshaller) throws PropertyException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_ENCODING, \"UTF-8\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(\"com.sun.xml.bind.xmlHeaders\", CommandsLogCenter.STANDARDIZED_XML_HEADER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_RIDE_DISPLAYED_INDEX \u003d \"The ride index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_RIDES_LISTED_OVERVIEW \u003d \"%1$d rides listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/StorageFileCreatingClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that all storage file creating classes should implement (templates and information do not need this)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Creates files in test directory by with testing behavior by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class StorageFileCreatingClass {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean isTestMode \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Disables test mode of all file creating subclasses"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void disableTestMode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        isTestMode \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the file Path depending on the test state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Path getFilePath(String fileName) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isTestMode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Paths.get(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the filePathString depending on the test state"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String getFilePathString(String fileName) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getFilePath(fileName).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns whether the application is in testing state"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected boolean isInTestMode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return isTestMode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a file depending on the test state"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected static boolean createFile(String fileName) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isTestMode || !file.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isTestMode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.canRead() \u0026\u0026 file.canWrite();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ThaneParkChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/** Indicates the ThanePark in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public final ReadOnlyThanePark data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThaneParkChangedEvent(ReadOnlyThanePark data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return \"number of persons \" + data.getRideList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a selection change in the Ride List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Ride newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Ride newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates an event requesting for help info, and the level of detail is specified by {@param summarized}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ShowHelpRequestEvent(boolean isSummarized, String commandWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.isSummarized \u003d isSummarized;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isSummarized() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return isSummarized;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowHistoryRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class ShowHistoryRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String reportName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates an event requesting for command history html window."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ShowHistoryRequestEvent(String reportName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.reportName \u003d reportName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getReportName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return reportName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SuggestCommandEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public final String[] commandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommandEvent(String[] commandWords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.commandWords \u003d commandWords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code itemsToCompare} contains any elements in {@code keyItems}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param itemsToCompare"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param keyItems"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static boolean containsAny(Set\u003c?\u003e itemsToCompare, Set\u003c?\u003e keyItems) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Stream.of(itemsToCompare).anyMatch(item -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (Object keyItem : keyItems) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (item.contains(keyItem)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 18,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CommandReportGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Singleton Class for generating command history report formatted as a Html page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandReportGenerator extends HtmlGenerator\u003cCommandEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static CommandReportGenerator instance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Required for singleton."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private CommandReportGenerator() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static CommandReportGenerator getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            instance \u003d new CommandReportGenerator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a ContainerTag representation of the generated table with commandEntryList as entries."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cCommandEntry\u003e data) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return generateHorizontalTable(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FilePathToUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Class that handles FilePath to Url conversion."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class FilePathToUrl {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_FILE_ERROR \u003d \"%1$s cannot be accessed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String URL_HEADER \u003d \"file:/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a FilePathToUrl using a filePath String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public FilePathToUrl (String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns filePath String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the String representation of the file\u0027s Url."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String filePathToUrlString() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return filePathToUrl().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the URL representation of the file\u0027s Url."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public URL filePathToUrl() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!file.exists() || !file.canRead()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_ERROR, filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.toURI().toURL();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HtmlGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.attrs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.body;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.div;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.head;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.html;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.link;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.table;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.tbody;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.td;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.th;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.thead;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.tr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.TagCreator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.HtmlFormattable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that generates a Html page with a Time Generated timestamp."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Accepts a HtmlFormattable type argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class HtmlGenerator\u003cHtmlData extends HtmlFormattable\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_TIME_GENERATED \u003d \"report generated at: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withLocale(Locale.UK)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a Html report with commandEntryList as entries as fileName."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void generateHtml(String title, List\u003cHtmlData\u003e data, FilePathToUrl filePathToUrl)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String content \u003d generateHtmlLayout(title, data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        createFile(filePathToUrl.getFilePath(), content);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a String representation of the generated Html report with commandEntryList as entries."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String generateHtmlLayout(String title, List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return html("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            head("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                title(title),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                link().withRel(\"stylesheet\").withHref(\"stylesheets/asciidoctor.css\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            body("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                generateHeader(title),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                generateBody(data)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            )"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ).withStyle(\"padding: 10px 30px\").renderFormatted();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Return ContainerTag representation of page header."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateHeader(String title) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return TagCreator.main(attrs(\"#main.header\"), h1(title),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            h3(String.format(MESSAGE_TIME_GENERATED, formatter.format(Instant.now()))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Return ContainerTag representation of page body."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return div();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a horizontal table with HtmlFormattable data."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ContainerTag generateHorizontalTable(List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (data.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return div();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag headers \u003d tr();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String header : data.get(0).getFieldHeaders()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            headers.with(th(header));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag rows \u003d tbody();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (HtmlData rowData : data) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rows.with(generateTableRow(rowData));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return table("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            thead(headers),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rows"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ).withStyle(\"width: 100%\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a table row with HtmlFormattable data."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ContainerTag generateTableRow(HtmlData rowData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag row \u003d tr();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String entry : rowData.getFields()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            row.with(td(entry));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a vertical table with 2 columns using HtmlFormattable data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ContainerTag generateVerticalTable(HtmlData data) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag table \u003d table().withStyle(\"width: 100%\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e template \u003d data.getFieldHeaders();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int totalFields \u003d template.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int row \u003d 0; row \u003c totalFields; row++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ContainerTag htmlRow \u003d tr();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            htmlRow.with(th(template.get(row)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            htmlRow.with(td(data.getFields().get(row)).withId(template.get(row)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            table.with(htmlRow);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates the html file and writes the html content into it. Overwrites existing files."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Throws IOException if file cannot be written to."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void createFile(String fileName, String content) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(fileName, false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(content);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/RidePageGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.div;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.img;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.p;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Singleton Class for generating a Html page used to display ride details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RidePageGenerator extends HtmlGenerator\u003cRide\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static RidePageGenerator instance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Required for singleton."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RidePageGenerator() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static RidePageGenerator getInstance() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            instance \u003d new RidePageGenerator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a Html report with commandEntryList as entries as fileName."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void generateHtml(String title, Ride data, FilePathToUrl filePathToUrl)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cRide\u003e dataAsList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        dataAsList.add(data);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        generateHtml(title, dataAsList, filePathToUrl);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateHeader(String title) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return div("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            div("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                p(h2().withId(\"name\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ).withStyle(\"height: auto; min-width: 200px; width: 50%; display: inline-block; left: 0px;\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + \"word-wrap: break-word\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            div("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                img().attr(\"src\u003d\\\"images/ride.png\\\" alt\u003d\\\"ride\\\"\").withStyle(\"height: auto; width: 100%\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ).withStyle(\"min-width: 200px; height: auto; width: 40%; display: inline-block; right: 0px\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cRide\u003e data) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return generateVerticalTable(data.get(0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code sentence} contains all the words in {@code string}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param sentence"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return whether sentence contains any word in string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String string) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String preppedString \u003d string;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        checkArgument(!string.trim().isEmpty(), \"String parameter cannot be empty!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] wordsInPreppedString \u003d preppedString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Arrays.stream(wordsInPreppedString)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .allMatch(word -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    for (String keyWord : wordsInPreppedSentence) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        if (word.equalsIgnoreCase(keyWord)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 28,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.CommandsLogCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_LOG_ERROR \u003d \"%1$s when saving command history to file. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates a new CommandHistory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Duplicates a commandHistory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered. Logs down IOException as warnings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandEntry commandEntry \u003d new CommandEntry(Instant.now(), new ExecutedCommand(userInput));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(commandEntry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (JAXBException | IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(MESSAGE_LOG_ERROR.format(e.getClass().getSimpleName(), e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a list of CommandEntry. Will log error message if JAXBException | IOException | IllegalValueException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * is met, where the commands log will be deleted and reinitialized."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cCommandEntry\u003e getCommandEntryList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e result \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cXmlAdaptedCommandEntry\u003e xmlAdaptedCommandEntryList \u003d CommandsLogCenter.retrieve().getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (xmlAdaptedCommandEntryList \u003d\u003d null || xmlAdaptedCommandEntryList.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (XmlAdaptedCommandEntry xmlAdaptedCommandEntry : xmlAdaptedCommandEntryList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                result.add(xmlAdaptedCommandEntry.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (JAXBException | IOException | IllegalValueException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(String.format(MESSAGE_LOG_ERROR, e.getClass().getSimpleName(), e.getMessage()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!CommandsLogCenter.delete()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                logger.warning(\"Failed to recreate Commands Log file.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.init();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 57,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rides */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRide\u003e getFilteredRideList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.parser.ThaneParkParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser thaneParkParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thaneParkParser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Command command \u003d thaneParkParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return model.getFilteredRideList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Adds a ride to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a ride to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MAINTENANCE + \"MAINTENANCE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_WAITING_TIME + \"WAITING TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Transformers \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MAINTENANCE + \"3 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_WAITING_TIME + \"45 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"4D \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"indoor\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ride added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Ride toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Ride}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AddCommand(Ride ride) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d ride;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AllCommandWords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/***"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A class containing all command words in ThanePark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class AllCommandWords {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String[] COMMAND_WORDS \u003d {AddCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand.COMMAND_WORD, UpdateCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD, QuickViewCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewAllCommand.COMMAND_WORD, ViewCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks if the given commandWord is valid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isCommandWord(String commandWord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        boolean containsCommandWord \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String referenceWord : COMMAND_WORDS) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            containsCommandWord \u003d containsCommandWord || commandWord.equals(referenceWord);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return containsCommandWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 19,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.resetData(new ThanePark());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Deletes a ride identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \": Deletes the ride identified by the index number used in the displayed ride list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_RIDE_SUCCESS \u003d \"Deleted Ride: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Filters a list of all rides in the thane park which attributes matches the predicate the user inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Predicate value must be an integer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the rides with the predicate that the user \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"inputs and displays the result as a list with index numbers\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Parameters: [PREFIX] [PREDICATE]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MAINTENANCE + \"\u003c 1000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final RideContainsConditionPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FilterCommand(RideContainsConditionPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(Messages.MESSAGE_RIDES_LISTED_OVERVIEW, model.getFilteredRideList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Finds and lists all rides in thane park which name or tags contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all rides whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" battle star transformer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final RideContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FindCommand(RideContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(Messages.MESSAGE_RIDES_LISTED_OVERVIEW, model.getFilteredRideList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MORE_INFO_FLAG \u003d \"more\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String SHOWING_SHORT_HELP_MESSAGE \u003d \"Showing summarized help.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String[] ARGUMENTS_BLANK \u003d {\"\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HelpCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(ARGUMENTS_BLANK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HelpCommand that requests for help based on {@param args}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HelpCommand(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //summarized help"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (args.length \u003d\u003d 1 \u0026\u0026 args[0].isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //full help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(MORE_INFO_FLAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //help on specific command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (args.length \u003d\u003d 1 \u0026\u0026 AllCommandWords.isCommandWord(args[0])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d args[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //error"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent(isSummarized, commandWord));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isSummarized) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new CommandResult(SHOWING_SHORT_HELP_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof HelpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 isSummarized \u003d\u003d ((HelpCommand) other).isSummarized"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 commandWord.equals(((HelpCommand) other).commandWord)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 46,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.ui.ShowHistoryRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.CommandReportGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows history of executed commands.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MORE_INFO_FLAG \u003d \"more\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_HISTORY_WINDOW \u003d \"Showing requested history of commands.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_HISTORY_WINDOW_FAILURE \u003d \"Failed to generate Html report.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final FilePathToUrl REPORT_PAGE_PATH \u003d new FilePathToUrl(\"src/main/resources/docs/report.html\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String COMMAND_ENTRY_REPORT_TITLE \u003d \"Command History Report\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String[] ARGUMENTS_BLANK \u003d {\"\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HistoryCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(ARGUMENTS_BLANK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HistoryCommand that requests for help based on {@param args}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //summarized history"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (args.length \u003d\u003d 1 \u0026\u0026 args[0].isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //full history"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(MORE_INFO_FLAG)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //request for CommandEntry list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isSummarized) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CommandReportGenerator.getInstance()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    .generateHtml(COMMAND_ENTRY_REPORT_TITLE, history.getCommandEntryList(), REPORT_PAGE_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EventsCenter.getInstance().post(new ShowHistoryRequestEvent(REPORT_PAGE_PATH.getFilePath()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return new CommandResult(MESSAGE_HISTORY_WINDOW);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return new CommandResult(MESSAGE_HISTORY_WINDOW_FAILURE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //request for command history in the result window"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isSummarized \u0026\u0026 previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (isSummarized) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //error"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof HistoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 isSummarized \u003d\u003d ((HistoryCommand) other).isSummarized); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 63,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.ui.SuggestCommandEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Not a text command. Can only be triggered using {tab} in CommandBox."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Suggests a list of commands based on prefix matching."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_SUGGEST_COMMAND_SUCCESS \u003d \"Do you mean the following commands:\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String[] suggestions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a SuggestCommand to suggest all prefix matches commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommand(String prefix) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(prefix);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!prefix.matches(\"[a-zA-Z]+\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            suggestions \u003d new String[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        suggestions \u003d Arrays.stream(AllCommandWords.COMMAND_WORDS).filter(s"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            -\u003e s.matches(\"^\" + prefix + \".*\")).toArray(String[]::new);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Combines the commandWords into a standardized format for listing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param commandWords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String combineCommandWords(String... commandWords) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return String.join(\", \", commandWords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * A prefix with no match is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isPrefixValid() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return suggestions.length \u003e 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String messageSuccess \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS, combineCommandWords(suggestions));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        EventsCenter.getInstance().post(new SuggestCommandEvent(suggestions));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Edits the details of an existing ride in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the ride identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"by the index number used in the displayed ride list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_MAINTENANCE + \"MAINTENANCE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_WAITING_TIME + \"WAITING_TIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MAINTENANCE + \"90 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_WAITING_TIME + \"60\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UPDATE_RIDE_SUCCESS \u003d \"Updated Ride: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UpdateRideDescriptor updateRideDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param index of the ride in the filtered ride list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param updateRideDescriptor details to edit the ride with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateCommand(Index index, UpdateRideDescriptor updateRideDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(updateRideDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.updateRideDescriptor \u003d new UpdateRideDescriptor(updateRideDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Ride editedRide \u003d createUpdatedRide(rideToEdit, updateRideDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!rideToEdit.isSameRide(editedRide) \u0026\u0026 model.hasPerson(editedRide)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updatePerson(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_RIDE_SUCCESS, editedRide));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates and returns a {@code Ride} with the details of {@code rideToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code updateRideDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Ride createUpdatedRide(Ride rideToEdit, UpdateRideDescriptor updateRideDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assert rideToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d updateRideDescriptor.getName().orElse(rideToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance updatedMaintenance \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                updateRideDescriptor.getMaintenance().orElse(rideToEdit.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        WaitTime updatedWaitTime \u003d updateRideDescriptor.getWaitTime().orElse(rideToEdit.getWaitingTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d updateRideDescriptor.getAddress().orElse(rideToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateRideDescriptor.getTags().orElse(rideToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Ride(updatedName, updatedMaintenance, updatedWaitTime, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 updateRideDescriptor.equals(e.updateRideDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Stores the details to edit the ride with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * corresponding field value of the ride."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class UpdateRideDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private Maintenance maintenance;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private WaitTime waitTime;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public UpdateRideDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public UpdateRideDescriptor(UpdateRideDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            setMaintenance(toCopy.maintenance);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            setWaitTime(toCopy.waitTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, maintenance, waitTime, address, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void setMaintenance(Maintenance maintenance) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.maintenance \u003d maintenance;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Optional\u003cMaintenance\u003e getMaintenance() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Optional.ofNullable(maintenance);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void setWaitTime(WaitTime waitTime) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.waitTime \u003d waitTime;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Optional\u003cWaitTime\u003e getWaitTime() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Optional.ofNullable(waitTime);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof UpdateRideDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateRideDescriptor e \u003d (UpdateRideDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    \u0026\u0026 getMaintenance().equals(e.getMaintenance())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    \u0026\u0026 getWaitTime().equals(e.getWaitTime())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "YuPeiHenry": 23,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Views a ride identified using it\u0027s displayed index number from thane park."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Views the ride identified by the index number used in the displayed ride list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Viewed Ride: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e filteredRideList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredRideList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        PREFIX_MAINTENANCE, PREFIX_WAITING_TIME, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_MAINTENANCE, PREFIX_WAITING_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance maintenance \u003d ParserUtil.parseMaintenance(argMultimap.getValue(PREFIX_MAINTENANCE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        WaitTime waitTime \u003d ParserUtil.parseWaitingTime(argMultimap.getValue(PREFIX_WAITING_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new Ride(name, maintenance, waitTime, address, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AddCommand(ride);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 10,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_MAINTENANCE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_WAITING_TIME \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS_FULL \u003d new Prefix(\"address\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_TAG_FULL \u003d new Prefix(\"tag\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Parses input arguments and creates a new FilterCommand Object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws ParseException if user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MAINTENANCE, PREFIX_WAITING_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cList\u003cString\u003e\u003e maintenanceStrings \u003d !argMultimap.getValue(PREFIX_MAINTENANCE).isPresent()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                                    ? Optional.empty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                                    : Optional.of(argMultimap.getAllValues(PREFIX_MAINTENANCE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cList\u003cString\u003e\u003e waitingTimeStrings \u003d !argMultimap.getValue(PREFIX_WAITING_TIME).isPresent()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                                    ? Optional.empty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                                    : Optional.of(argMultimap.getAllValues(PREFIX_WAITING_TIME));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (maintenanceStrings.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (String s : maintenanceStrings.get()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Pair\u003cCharacter, String\u003e maintenanceCondition \u003d getOperatorAndValues(s);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                predicates.add(new AttributePredicate(maintenanceCondition.getKey(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new Maintenance(maintenanceCondition.getValue())));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (waitingTimeStrings.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (String s : waitingTimeStrings.get()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Pair\u003cCharacter, String\u003e waitingTimeConditions \u003d getOperatorAndValues(s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                predicates.add(new AttributePredicate(waitingTimeConditions.getKey(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new WaitTime(waitingTimeConditions.getValue())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns a Pair object with the operator and input value from the user input string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Pair\u003cCharacter, String\u003e getOperatorAndValues(String string) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String predicateString \u003d string.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        char operator \u003d predicateString.charAt(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(predicateString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String resultString \u003d sb.deleteCharAt(0).toString().trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Pair\u003c\u003e(operator, resultString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 72,
      "YuPeiHenry": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_FULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS, PREFIX_ADDRESS_FULL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                PREFIX_TAG, PREFIX_TAG_FULL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cAddress\u003e address \u003d parseAndGetAddress(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cSet\u003cTag\u003e\u003e tags \u003d parseAndGetTags(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new FindCommand(new RideContainsKeywordsPredicate(Arrays.asList(nameKeywords),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                address, tags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks if the argument multimap contains the \"tag\" or \"t/\" prefix and returns a set of tags"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * if present."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseAndGetTags(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_FULL)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks if the argument multimap contains the \"address\" or \"a/\" prefix and returns an Address"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * object if either are present."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cAddress\u003e parseAndGetAddress(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ADDRESS_FULL).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS_FULL).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 43,
      "YuPeiHenry": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String[] options \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!matchesExpectedFormat(options)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new HelpCommand(options);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if matches \"help\", \"help more\" or \"help [commandWord]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean matchesExpectedFormat(String[] options) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return options.length \u003d\u003d 1 \u0026\u0026 options[0].isEmpty()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || options.length \u003d\u003d 1 \u0026\u0026 options[0].equals(HelpCommand.MORE_INFO_FLAG)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || options.length \u003d\u003d 1 \u0026\u0026 AllCommandWords.isCommandWord(options[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HistoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryCommandParser implements Parser\u003cHistoryCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and returns an HistoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String[] options \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!matchesExpectedFormat(options)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new HistoryCommand(options);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if matches \"history\" or \"history more\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean matchesExpectedFormat(String[] options) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return options.length \u003d\u003d 1 \u0026\u0026 options[0].isEmpty()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || options.length \u003d\u003d 1 \u0026\u0026 options[0].equals(HistoryCommand.MORE_INFO_FLAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses a {@code String daysSinceMaintenanceString} into a {@code Maintenance}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if the given {@code daysSinceMaintenanceString} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Maintenance parseMaintenance(String daysSinceMaintenanceString) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String trimmedMaintenance \u003d daysSinceMaintenanceString.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!Maintenance.isValidMaintenance(trimmedMaintenance)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Maintenance(trimmedMaintenance);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses a {@code String waitingTime} into an {@code WaitTime}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws ParseException if the given {@code waitingTime} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static WaitTime parseWaitingTime(String waitingTime) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(waitingTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String trimmedWaitingTime \u003d waitingTime.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!WaitTime.isValidWaitTime(trimmedWaitingTime)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new WaitTime(trimmedWaitingTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 11,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ThaneParkParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.QuickViewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new HistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case QuickViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new QuickViewCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SuggestCommand command \u003d new SuggestCommand(commandWord);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!command.isPrefixValid()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 5,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        PREFIX_MAINTENANCE, PREFIX_WAITING_TIME, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor updateRideDescriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            updateRideDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAINTENANCE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            updateRideDescriptor.setMaintenance("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ParserUtil.parseMaintenance(argMultimap.getValue(PREFIX_MAINTENANCE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WAITING_TIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            updateRideDescriptor.setWaitTime(ParserUtil.parseWaitingTime(argMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    .getValue(PREFIX_WAITING_TIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            updateRideDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(updateRideDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!updateRideDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UpdateCommand(index, updateRideDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 7,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cRide\u003e PREDICATE_SHOW_ALL_RIDES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void resetData(ReadOnlyThanePark newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /** Returns the ThanePark */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ReadOnlyThanePark getAddressBook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if a ride with the same identity as {@code ride} exists in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    boolean hasPerson(Ride ride);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the given ride."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must exist in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void deletePerson(Ride target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds the given ride."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ride} must not already exist in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void addPerson(Ride ride);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the given ride {@code target} with {@code editedRide}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void updatePerson(Ride target, Ride editedRide);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /** Returns an unmodifiable view of the filtered ride list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ObservableList\u003cRide\u003e getFilteredRideList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Updates the filter of the filtered ride list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void updateFilteredRideList(Predicate\u003cRide\u003e predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final VersionedThanePark versionedAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final FilteredList\u003cRide\u003e filteredRides;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ModelManager(ReadOnlyThanePark addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedAddressBook \u003d new VersionedThanePark(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        filteredRides \u003d new FilteredList\u003c\u003e(versionedAddressBook.getRideList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this(new ThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ReadOnlyThanePark getAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        raise(new ThaneParkChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean hasPerson(Ride ride) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedAddressBook.hasRide(ride);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void deletePerson(Ride target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedAddressBook.removeRide(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void addPerson(Ride ride) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedAddressBook.addRide(ride);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updatePerson(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(target, editedRide);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedAddressBook.updateRide(target, editedRide);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ride List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ride} backed by the internal list of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRides);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updateFilteredRideList(Predicate\u003cRide\u003e predicate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        filteredRides.setPredicate(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 filteredRides.equals(other.filteredRides);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 28,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface ReadOnlyThanePark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ObservableList\u003cRide\u003e getRideList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.UniqueRideList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Duplicates are not allowed (by .isSameRide comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThanePark implements ReadOnlyThanePark {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final UniqueRideList rides;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates an ThanePark using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark(ReadOnlyThanePark toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the contents of the ride list with {@code rides}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code rides} must not contain duplicate rides."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void setRides(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.rides.setRides(rides);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Resets the existing data of this {@code ThanePark} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        setRides(newData.getRideList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    //// ride-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if a ride with the same identity as {@code ride} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.contains(ride);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds a ride to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void addRide(Ride p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the given ride {@code target} in the list with {@code editedRide}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updateRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(editedRide);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.setRide(target, editedRide);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes {@code key} from this {@code ThanePark}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void removeRide(Ride key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.asUnmodifiableObservableList().size() + \" rides\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e getRideList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof ThanePark // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 rides.equals(((ThanePark) other).rides));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 37,
      "YuPeiHenry": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        setGuiSettings(700, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * {@code ThanePark} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class VersionedThanePark extends ThanePark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final List\u003cReadOnlyThanePark\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public VersionedThanePark(ReadOnlyThanePark initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressBookStateList.add(new ThanePark(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves a copy of the current {@code ThanePark} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressBookStateList.add(new ThanePark(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof VersionedThanePark)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark otherVersionedAddressBook \u003d (VersionedThanePark) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/logging/CommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a command entry inside command history."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandEntry implements HtmlFormattable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withLocale(Locale.UK)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Instant timeOfEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ExecutedCommand executedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates a CommandEntry"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandEntry(Instant timeOfEntry, ExecutedCommand executedCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.timeOfEntry \u003d timeOfEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.executedCommand \u003d executedCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Instant getTimeOfEntry() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return timeOfEntry;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getTimeOfEntryString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return formatter.format(timeOfEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExecutedCommand getExecutedCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return executedCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFieldHeaders() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e headers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Time\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"CommandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return headers;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e fields \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getTimeOfEntryString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getExecutedCommand().getCommandWord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getExecutedCommand().getCommandArgs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof CommandEntry)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandEntry otherCommandEntry \u003d (CommandEntry) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(timeOfEntry, otherCommandEntry.getTimeOfEntry())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(executedCommand, otherCommandEntry.getExecutedCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/logging/ExecutedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents an executed command with its command word and command args."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class ExecutedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \"\u003cinvalid_command_word\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandArgs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates an ExecutedCommand from a complete String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExecutedCommand(String commandString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] splitCommandString \u003d commandString.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (AllCommandWords.isCommandWord(splitCommandString[0])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || splitCommandString[0].equals(INVALID_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d splitCommandString[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandArgs \u003d splitCommandString.length \u003e\u003d 2 ? splitCommandString[1] : \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandArgs \u003d commandString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandArgs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandArgs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord + \" \" + commandArgs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof ExecutedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u0026\u0026 Objects.equals(toString(), other.toString())); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/logging/HtmlFormattable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Interface that specifies what a HtmlFormattable object for Html pages should support."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public interface HtmlFormattable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    List\u003cString\u003e getFieldHeaders();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    List\u003cString\u003e getFields();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Ride\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/AttributePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that an attribute value matches the predicate given"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class AttributePredicate implements Predicate\u003cNumericAttribute\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private char operator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private NumericAttribute attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AttributePredicate(char operator, NumericAttribute attribute) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public NumericAttribute getAttribute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(NumericAttribute attribute) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \u0027\u003c\u0027:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003c this.attribute.getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \u0027\u003e\u0027:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003e this.attribute.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof AttributePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 this.attribute.equals(((AttributePredicate) other).attribute)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 this.operator \u003d\u003d ((AttributePredicate) other).operator);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/Maintenance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a Ride\u0027s days since last maintenance in the park management app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class Maintenance implements NumericAttribute {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_MAINTENANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"Maintenance should only contain numbers with at least 1 digit long.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code Maintenance}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param daysSinceMaintenanceString Days since last maintenance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance(String daysSinceMaintenanceString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        checkArgument(isValidMaintenance(daysSinceMaintenanceString), MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d Integer.parseInt(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code Maintenance}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param daysSinceMaintenance Days since last maintenance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance(int daysSinceMaintenance) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d daysSinceMaintenance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setValue(int value) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a given string is a valid days since last maintenance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isValidMaintenance(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return test.matches(MAINTENANCE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof Maintenance // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u0026\u0026 value \u003d\u003d ((Maintenance) other).value); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Ride\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/NumericAttribute.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A numeric attribute is an attribute of the ride that contains a number"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface NumericAttribute {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    int getValue();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void setValue(int value);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/Ride.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.HtmlFormattable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.InvalidNumericAttributeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Ride in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class Ride implements HtmlFormattable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride RIDE_TEMPLATE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new Ride(new Name(\"Name\"), new Maintenance(0), new WaitTime(0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            new Address(\"Address\"), new HashSet\u003c\u003e(), Status.OPEN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Status DEFAULT_STATUS \u003d Status.OPEN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Maintenance daysSinceMaintenance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final WaitTime waitingTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //Current state"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Every field except status must be present and not null. Default value of status is OPEN."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Ride(Name name, Maintenance daysSinceMaintenance, WaitTime waitingTime, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(name, daysSinceMaintenance, waitingTime, address, tags, DEFAULT_STATUS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Ride(Name name, Maintenance daysSinceMaintenance, WaitTime waitingTime, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Status status) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireAllNonNull(name, daysSinceMaintenance, waitingTime, address, tags, status);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.daysSinceMaintenance \u003d daysSinceMaintenance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTime \u003d waitingTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime getWaitingTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return waitingTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance getDaysSinceMaintenance() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return daysSinceMaintenance;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setDaysSinceMaintenance(int value) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.daysSinceMaintenance.setValue(value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setWaitingTime(int value) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTime.setValue(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the attribute that is required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Throws an exception if the attribute has an invalid type."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public NumericAttribute getAttribute(NumericAttribute attribute) throws InvalidNumericAttributeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (attribute instanceof WaitTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return this.getWaitingTime();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else if (attribute instanceof Maintenance) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return this.getDaysSinceMaintenance();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new InvalidNumericAttributeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if both rides have the same name."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This defines a weaker notion of equality between two rides."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isSameRide(Ride otherRide) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (otherRide \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return otherRide !\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getName().equals(getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFieldHeaders() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e headers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Status\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Days since last maintenance\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Waiting Time\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return headers;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e fields \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getStatus().name());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getDaysSinceMaintenance().toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getWaitingTime().toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if both rides have the same identity and data fields."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This defines a stronger notion of equality between two rides."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof Ride)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride otherRide \u003d (Ride) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return otherRide.getName().equals(getName())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getDaysSinceMaintenance().equals(getDaysSinceMaintenance())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getWaitingTime().equals(getWaitingTime())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 otherRide.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getStatus() \u003d\u003d getStatus()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 otherRide.getTags().equals(getTags());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.hash(name, daysSinceMaintenance, waitingTime, address, status, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(\" Maintenance: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(getDaysSinceMaintenance())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(\" WaitTime: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(getWaitingTime())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 22,
      "YuPeiHenry": 91,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/RideContainsConditionPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that a {@code Ride}\u0027s attributes matches the predicate given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsConditionPredicate implements Predicate\u003cRide\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final List\u003cAttributePredicate\u003e attributePredicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public RideContainsConditionPredicate(List\u003cAttributePredicate\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        attributePredicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return attributePredicates.stream().allMatch(p -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute attributeToTest \u003d p.getAttribute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute rideAttributeToTest \u003d ride.getAttribute(attributeToTest);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return p.test(rideAttributeToTest);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof RideContainsConditionPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 attributePredicates.equals(((RideContainsConditionPredicate) other).attributePredicates));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/RideContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that a {@code Ride}\u0027s attributes  matches any of the keywords given."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsKeywordsPredicate implements Predicate\u003cRide\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cAddress\u003e addressKeyWords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Set\u003cTag\u003e tagKeyWords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public RideContainsKeywordsPredicate(List\u003cString\u003e keywords, Optional... other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressKeyWords \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tagKeyWords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        getKeyWords(other);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Get other keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param others"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void getKeyWords(Optional... others) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Optional keywords : others) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (keywords.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (keywords.get()instanceof Address) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    addressKeyWords \u003d keywords;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (keywords.get().getClass().equals(HashSet.class)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    Set\u003cTag\u003e tags \u003d (HashSet) keywords.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        tagKeyWords \u003d tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    boolean result \u003d StringUtil.containsWordIgnoreCase(ride.getName().fullName, keyword);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    if (addressKeyWords.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        result \u003d result || StringUtil.containsStringIgnoreCase(ride.getAddress().value,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                addressKeyWords.get().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    if (!tagKeyWords.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        result \u003d result || CollectionUtil.containsAny(ride.getTags(), tagKeyWords);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof RideContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 keywords.equals(((RideContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents the status of a ride"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    OPEN, SHUTDOWN, MAINTENANCE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/UniqueRideList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.RideNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A ride is considered unique by comparing using {@code Ride#isSameRide(Ride)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * persons uses Ride#isSameRide(Ride) for equality so as to ensure that the ride being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * unique in terms of identity in the UniqueRideList. However, the removal of a ride uses Ride#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * as to ensure that the ride with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * @see Ride#isSameRide(Ride)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class UniqueRideList implements Iterable\u003cRide\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ObservableList\u003cRide\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if the list contains an equivalent ride as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean contains(Ride toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRide);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds a ride to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void add(Ride toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the ride {@code target} in the list with {@code editedRide}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(target, editedRide);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new RideNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!target.isSameRide(editedRide) \u0026\u0026 contains(editedRide)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.set(index, editedRide);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes the equivalent ride from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void remove(Ride toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new RideNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides(UniqueRideList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the contents of this list with {@code rides}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code rides} must not contain duplicate rides."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(rides);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!ridesAreUnique(rides)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.setAll(rides);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Iterator\u003cRide\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof UniqueRideList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRideList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code rides} contains only unique rides."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private boolean ridesAreUnique(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c rides.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rides.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (rides.get(i).isSameRide(rides.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 120,
      "YuPeiHenry": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/WaitTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a Ride\u0027s current waiting time, in minutes, in the park management app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class WaitTime implements NumericAttribute {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_WAIT_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"Waiting time should only contain numbers with at least 1 digit long.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String WAIT_TIME_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code WaitTime}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param waitingTimeString Waiting time in minutes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime(String waitingTimeString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(waitingTimeString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        checkArgument(isValidWaitTime(waitingTimeString), MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d Integer.parseInt(waitingTimeString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code WaitTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param waitingTime Waiting time in minutes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime(int waitingTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d waitingTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setValue(int value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a given string is a valid days since last maintenance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isValidWaitTime(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return test.matches(WAIT_TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof WaitTime // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u0026\u0026 value \u003d\u003d ((WaitTime) other).value); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/exceptions/DuplicateRideException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class DuplicateRideException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public DuplicateRideException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/exceptions/InvalidNumericAttributeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Signals that the attribute type is invalid. Valid attribute classes would be WaitTime and Maintenance."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class InvalidNumericAttributeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public InvalidNumericAttributeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        super(\"No such Numeric Attribute Type. Please input a valid attribute type\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ride/exceptions/RideNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Signals that the operation is unable to find the specified ride."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Contains utility methods for populating {@code ThanePark} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static Ride[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Accelerator\"), new Maintenance(\"87438807\"), new WaitTime(\"1\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Battlestar Galactica\"), new Maintenance(\"99272758\"), new WaitTime(\"2\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                getTagSet(\"HUMANSvsCYLON\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Canopy Flyer\"), new Maintenance(\"93210283\"), new WaitTime(\"3\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Dino Sorarin\"), new Maintenance(\"91031282\"), new WaitTime(\"12\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Enchanted Airways\"), new Maintenance(\"92492021\"), new WaitTime(\"9\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"TRANSFORMERS The Ride\"), new Maintenance(\"92624417\"), new WaitTime(\"18\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static ReadOnlyThanePark getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark sampleAb \u003d new ThanePark();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Ride sampleRide : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            sampleAb.addRide(sampleRide);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "YuPeiHenry": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface Storage extends ThaneParkStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void saveAddressBook(ReadOnlyThanePark addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void handleAddressBookChangedEvent(ThaneParkChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Manages storage of ThanePark data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private ThaneParkStorage thaneParkStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public StorageManager(ThaneParkStorage thaneParkStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.thaneParkStorage \u003d thaneParkStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ThanePark methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return thaneParkStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return readAddressBook(thaneParkStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return thaneParkStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void saveAddressBook(ReadOnlyThanePark addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        saveAddressBook(addressBook, thaneParkStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void saveAddressBook(ReadOnlyThanePark addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thaneParkStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void handleAddressBookChangedEvent(ThaneParkChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 17,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ThaneParkStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a storage for {@link ThanePark}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface ThaneParkStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns ThanePark data as a {@link ReadOnlyThanePark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the given {@link ReadOnlyThanePark} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void saveAddressBook(ReadOnlyThanePark addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyThanePark)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void saveAddressBook(ReadOnlyThanePark addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * JAXB-friendly representation of the CommandEntry."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "@XmlRootElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class XmlAdaptedCommandEntry {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CommandEntry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String timeOfEntryString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String executedCommandString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an XmlAdaptedCommandEntry."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an {@code XmlAdaptedCommandEntry} with the given ride details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry(String timeOfEntryString, String executedCommandString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.timeOfEntryString \u003d timeOfEntryString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.executedCommandString \u003d executedCommandString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Converts a given CommandEntry into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCommandEntry"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry(CommandEntry source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        timeOfEntryString \u003d source.getTimeOfEntry().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executedCommandString \u003d source.getExecutedCommand().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Converts this jaxb-friendly adapted ride object into the model\u0027s CommandEntry object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (timeOfEntryString \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Instant.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Instant timeOfEntry \u003d Instant.parse(timeOfEntryString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (executedCommandString \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ExecutedCommand.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final ExecutedCommand executedCommand \u003d new ExecutedCommand(executedCommandString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new CommandEntry(timeOfEntry, executedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof XmlAdaptedCommandEntry)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedCommandEntry otherCommandEntry \u003d (XmlAdaptedCommandEntry) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(timeOfEntryString, otherCommandEntry.timeOfEntryString)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(executedCommandString, otherCommandEntry.executedCommandString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedRide.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * JAXB-friendly version of the Ride."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlAdaptedRide {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ride\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Status DEFAULT_STATUS \u003d Status.OPEN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String DEFAULT_STATUS_STRING \u003d DEFAULT_STATUS.name();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String daysSinceMaintenanceString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String waitingTimeString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String statusString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Constructs an XmlAdaptedRide."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Constructs an {@code XmlAdaptedRide} with the given ride details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide(String name, String daysSinceMaintenanceString, String waitingTimeString, String address,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(name, daysSinceMaintenanceString, waitingTimeString, address, tagged, DEFAULT_STATUS_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an {@code XmlAdaptedRide} with the given ride details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedRide(String name, String daysSinceMaintenanceString, String waitingTimeString, String address,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged, String statusString) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.daysSinceMaintenanceString \u003d daysSinceMaintenanceString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTimeString \u003d waitingTimeString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.statusString \u003d statusString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts a given Ride into this class for JAXB use."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide(Ride source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        daysSinceMaintenanceString \u003d source.getDaysSinceMaintenance().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTimeString \u003d source.getWaitingTime().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        statusString \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts this jaxb-friendly adapted ride object into the model\u0027s Ride object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (daysSinceMaintenanceString \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    Maintenance.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!Maintenance.isValidMaintenance(daysSinceMaintenanceString)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Maintenance modelMaintenance \u003d new Maintenance(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (waitingTimeString \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, WaitTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!WaitTime.isValidWaitTime(waitingTimeString)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final WaitTime modelWaitTime \u003d new WaitTime(waitingTimeString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (statusString \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Status status \u003d Status.valueOf(statusString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Ride(modelName, modelMaintenance, modelWaitTime, modelAddress, modelTags, status);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof XmlAdaptedRide)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide otherRide \u003d (XmlAdaptedRide) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(name, otherRide.name)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(daysSinceMaintenanceString, otherRide.daysSinceMaintenanceString)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(waitingTimeString, otherRide.waitingTimeString)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherRide.address)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 tagged.equals(otherRide.tagged)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(statusString, otherRide.statusString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 25,
      "YuPeiHenry": 52,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the given thanepark data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableThanePark addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static XmlSerializableThanePark loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlListOfCommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * JAXB-friendly list of XmlAdaptedCommandEntry."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "@XmlRootElement"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class XmlListOfCommandEntry {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(name \u003d \"xmlAdaptedCommandEntry\", required \u003d true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private List\u003cXmlAdaptedCommandEntry\u003e value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an XmlListOfCommandEntry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlListOfCommandEntry() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cXmlAdaptedCommandEntry\u003e getValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof XmlListOfCommandEntry)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlListOfCommandEntry otherListOfCommandEntry \u003d (XmlListOfCommandEntry) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(value, otherListOfCommandEntry.getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * An Immutable ThanePark that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "@XmlRootElement(name \u003d \"thanepark\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlSerializableThanePark {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate ride(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private List\u003cXmlAdaptedRide\u003e rides;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates an empty XmlSerializableThanePark."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlSerializableThanePark() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlSerializableThanePark(ReadOnlyThanePark src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.addAll(src.getRideList().stream().map(XmlAdaptedRide::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code ThanePark} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code XmlAdaptedRide}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark addressBook \u003d new ThanePark();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (XmlAdaptedRide p : rides) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Ride ride \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (addressBook.hasRide(ride)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            addressBook.addRide(ride);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof XmlSerializableThanePark)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.equals(((XmlSerializableThanePark) other).rides);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 23,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlThaneParkStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A class to access ThanePark data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlThaneParkStorage implements ThaneParkStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlThaneParkStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlThaneParkStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.info(\"ThanePark file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void saveAddressBook(ReadOnlyThanePark addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyThanePark)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void saveAddressBook(ReadOnlyThanePark addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableThanePark(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.RidePageGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.browser.BrowserRelatedUiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class BrowserPanel extends BrowserRelatedUiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl RIDE_PAGE_PATH \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"src/main/resources/docs/ride.html\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String RIDE_PAGE_TITLE \u003d \"Ride information\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String TEXT_REPLACEMENT_JAVASCRIPT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \"function updateRide(listOfFields) {\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"   for (index in listOfFields) {\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"       document.getElementById(listOfFields[index][0]).innerHTML \u003d listOfFields[index][1];\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"   }\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RidePageGenerator.getInstance().generateHtml(RIDE_PAGE_TITLE, Ride.RIDE_TEMPLATE, RIDE_PAGE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ie.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(\"Unable to create ride page.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return browser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads the ride information page using Javascript and BrowserRelatedUiPart.loadPage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void loadRidePage(Ride ride) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int totalFields \u003d ride.getFieldHeaders().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringBuilder parameters \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        parameters.append(String.format(\"[\\\"%1s\\\", \\\"%2s\\\"], \", \"name\", ride.getName().fullName));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c totalFields; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parameters.append(String.format(\"[\\\"%1s\\\", \\\"%2s\\\"], \","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ride.getFieldHeaders().get(i), ride.getFields().get(i)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        queuedJavascriptCommands.add(TEXT_REPLACEMENT_JAVASCRIPT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        queuedJavascriptCommands.add(String.format(\"updateRide([%1s])\", parameters.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(RIDE_PAGE_PATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads the short Help file as the default HTML file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void loadDefaultPage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(HelpWindow.SHORT_HELP_FILE_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadRidePage(event.getNewSelection());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 40,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.ui.SuggestCommandEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String pendingText \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int caretPosition \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.caretPositionProperty().addListener((unused1) -\u003e updateCaretPosition());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            preventTabNavigation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            suggestCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Keeps track of any change in caret position while the commandTextField is focused."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void updateCaretPosition() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!commandTextField.isFocused()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Negates the effect of tab navigation"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void preventTabNavigation() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.positionCaret(caretPosition);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Suggests commands with the text in the box as arguments. Does not behave like an actual command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void suggestCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(commandTextField.getText().split(\" \")[0]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!suggestCommand.isPrefixValid()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandResult commandResult \u003d suggestCommand.execute(null, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!pendingText.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            replaceText(pendingText);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            pendingText \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            replaceText(pendingText);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            pendingText \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleSuggestCommandEvent(SuggestCommandEvent event) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (event.commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            pendingText \u003d event.commandWords[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 58,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.control.ScrollBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.browser.BrowserRelatedUiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpWindow extends BrowserRelatedUiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl USER_GUIDE_FILE_PATH \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"src/main/resources/docs/HelpWindow.html\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl SHORT_HELP_FILE_PATH \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"src/main/resources/docs/ShortHelpWindow.html\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //Adapted from https://stackoverflow.com/questions/2238938/how-to-programmatically-scroll-android-webview"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //https://stackoverflow.com/questions/6991494/javascript-getelementbyid-base-on-partial-string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //https://stackoverflow.com/questions/22778241/javafx-webview-scroll-to-desired-position"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //javascript to scroll webpage to commandWord"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String SCROLL_JAVASCRIPT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"function scrollToElement(commandWord) {\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var elem \u003d document.querySelector(\u0027[id$\u003d code-\u0027 + commandWord + \u0027-code]\u0027);\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var x \u003d 0;\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var y \u003d 0;\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    while (elem !\u003d null) {\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        x +\u003d elem.offsetLeft;\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        y +\u003d elem.offsetTop;\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        elem \u003d elem.offsetParent;\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    }\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    window.scrollTo(x, y);\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"}\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int verticalScroll \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(USER_GUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return browser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Scrolls the help window to the specified commandWord."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void scrollToCommandWord(String commandWord) throws AccessibilityException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(SCROLL_JAVASCRIPT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(\"window.scrollTo(document.body.scrollLeft, 0)\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        verticalScroll \u003d (int) browser.getEngine().executeScript(\"document.body.scrollTop\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //No commandWords in the window are at the top of the window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(verticalScroll \u003d\u003d 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(\"scrollToElement(\\\"\" + commandWord + \"\\\")\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertScrollToCommandWordSuccessful();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks if the help window successfully scrolled to the command word."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertScrollToCommandWordSuccessful() throws AccessibilityException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (verticalScroll !\u003d (int) browser.getEngine().executeScript(\"document.body.scrollTop\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throw new AccessibilityException(\"Help [commandWord] scrolling error!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Adapted from"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * https://stackoverflow.com/questions/31264847/how-to-set-remember-scrollbar-thumb-position-in-javafx-8-webview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the vertical scrollbar of the webview."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param browser webview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return vertical scrollbar of the webview or {@code null} if no vertical"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * scrollbar exists"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ScrollBar getVScrollBar(WebView browser) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Set\u003cNode\u003e scrolls \u003d browser.lookupAll(\".scroll-bar\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (Node scrollNode : scrolls) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!ScrollBar.class.isInstance(scrollNode)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ScrollBar scroll \u003d (ScrollBar) scrollNode;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (scroll.getOrientation() \u003d\u003d Orientation.VERTICAL) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return scroll;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 85,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HistoryWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.browser.BrowserRelatedUiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Controller for a command history window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryWindow extends BrowserRelatedUiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HistoryWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"HistoryWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private WebView commandHistoryWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new HistoryWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindow() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new HistoryWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param root Stage to use as the root of the HistoryWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandHistoryWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Shows the history window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void show(String reportFileName) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FilePathToUrl reportUrl \u003d new FilePathToUrl(reportFileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(reportUrl);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.fine(\"Showing command history report.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.ui.ShowHistoryRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RideListPanel rideListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryWindow historyWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        historyWindow \u003d new HistoryWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        rideListPanel \u003d new RideListPanel(logic.getFilteredRideList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(rideListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Handle request for help with level of detail specified by {@param event}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleHelp(ShowHelpRequestEvent event) throws AccessibilityException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (event.isSummarized()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            browserPanel.loadDefaultPage();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            showHelpWindow();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!event.getCommandWord().isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            helpWindow.scrollToCommandWord(event.getCommandWord());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void showHelpWindow() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanel getRideListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return rideListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            handleHelp(event);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (AccessibilityException ae) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(ae.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleShowHistoryEvent(ShowHistoryRequestEvent event) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            historyWindow.show(event.getReportName());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(ie.getMessage());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 38,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RideCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * An UI component that displays information of a {@code Ride}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"RideListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ThanePark level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public final Ride ride;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Label daysSinceMaintenanceString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Label waitingTimeString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Label statusString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCard(Ride ride, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.ride \u003d ride;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        name.setText(ride.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        daysSinceMaintenanceString.setText(ride.getDaysSinceMaintenance().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        address.setText(ride.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTimeString.setText(ride.getWaitingTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        statusString.setText(ride.getStatus().name());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (ride.getStatus().equals(Status.OPEN)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            statusString.setStyle(\"-fx-background-color: #17A828\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //statusString.setTextFill(Color.web(\"#dd3333\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (ride.getStatus().equals(Status.SHUTDOWN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || ride.getStatus().equals(Status.MAINTENANCE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            statusString.setStyle(\"-fx-background-color: #CC3045\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //statusString.setTextFill(Color.web(\"33dd33\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //error"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ride.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof RideCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard card \u003d (RideCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 ride.equals(card.ride);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 23,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RideListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"RideListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RideListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private ListView\u003cRide\u003e personListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanel(ObservableList\u003cRide\u003e rideList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        setConnections(rideList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void setConnections(ObservableList\u003cRide\u003e rideList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        personListView.setItems(rideList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        logger.fine(\"Selection in ride list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Scrolls to the {@code RideCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Ride} using a {@code RideCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cRide\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        protected void updateItem(Ride ride, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            super.updateItem(ride, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (empty || ride \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                setGraphic(new RideCard(ride, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 7,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void handleAddressBookChangedEvent(ThaneParkChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/browser/BrowserRelatedUiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that loads Html pages, handles IOException when page cannot be read, and has ability to queue"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Javascript calls for running after the page loads completely."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Override the webView getter when extending this abstract class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class BrowserRelatedUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final int MAX_QUEUE_SIZE \u003d 15;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ArrayList\u003cString\u003e queuedJavascriptCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public BrowserRelatedUiPart(String fxml) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public BrowserRelatedUiPart(String fxml, T root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(fxml, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes the BrowserRelatedUiPart. Enables Javascript and adds a listener to execute queued Javascript"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * after the page loads completely."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(webView !\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        webView.getEngine().setJavaScriptEnabled(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        webView.getEngine().getLoadWorker().stateProperty().addListener("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            new ChangeListener\u003cWorker.State\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                public void changed(ObservableValue ov, Worker.State oldState, Worker.State newState) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        runQueuedJavascript();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Program that runs all queued Javascript. Clears the Javascript queue if too many scripts are queued."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void runQueuedJavascript() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (queuedJavascriptCommands.size() \u003e MAX_QUEUE_SIZE) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(String.format(\"Javascript queue size exceeds %1s\", MAX_QUEUE_SIZE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            queuedJavascriptCommands.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        while (!queuedJavascriptCommands.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            webView.getEngine().executeScript(queuedJavascriptCommands.remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads a local resource in the browser, with its Url decoded from FilePathToUrl"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void loadPage(FilePathToUrl filePathToUrl) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            String url \u003d filePathToUrl.filePathToUrlString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Platform.runLater(() -\u003e webView.getEngine().load(url));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            queuedJavascriptCommands.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/exceptions/AccessibilityException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.ui.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents an error which occurs during handling of UI features. Non-fatal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class AccessibilityException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public AccessibilityException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-size: 8px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".cell_status_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "#statusString {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 16,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/HistoryWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "         title\u003d\"Command History Report\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cImage url\u003d\"@/images/clock.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cWebView fx:id\u003d\"commandHistoryWindow\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "         minWidth\u003d\"700\" minHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#showHelpWindow\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "          \u003cVBox fx:id\u003d\"rideList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" minWidth\u003d\"340\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/RideListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cLabel fx:id\u003d\"daysSinceMaintenanceString\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$daysSinceMaintenanceString\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cLabel fx:id\u003d\"waitingTimeString\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$waitingTimeString\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cLabel fx:id\u003d\"statusString\" styleClass\u003d\"cell_status_label\" text\u003d\"\\$statusString\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/duplicateRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e94351253\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Ride with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e94351253\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e19\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 6,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/invalidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c!-- Ride with invalid waitingTime field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/typicalRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c!-- ThanePark save file which contains the same Ride values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAccelerator\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e9\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eBig Thunder Mountain Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e31\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e16\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eCastle Carrousel\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e1\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eDumbo The Flying Elephant Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e87\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e3\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eEnchanted Airways\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e4\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e21\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eFinal Fantasy\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            \u003cdaysSinceMaintenanceString\u003e12\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e12\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eGalaxy Road\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e24\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 31,
      "YuPeiHenry": 14,
      "-": 12
    }
  },
  {
    "path": "src/test/data/XmlThaneParkStorageTest/invalidAndValidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Valid Ride --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e9482424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c!-- Ride with invalid maintenance field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e948asdf2424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 7,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlThaneParkStorageTest/invalidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Ride with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eIt\u0027s a Sm@ll World\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e9482424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 3,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidRideField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- Ride with an invalid maintenance field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482asf424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 4,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingRideField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c!-- Ride with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 3,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cname\u003eAccelerator\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e85355255\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 5,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validRide.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 3,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eMark Twain Riverboat\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e87249245\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e18\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eTom Sawyer Island Rafts\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e95352563\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eBig Thunder Mountain\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e87652533\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e3\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eSplash Mountain\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482224\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e23\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482427\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e10\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eits a small world\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482442\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eCastle Carrousel\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e8482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e18\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003ePeter Pan Flight\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e8482131\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 29,
      "YuPeiHenry": 27,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isHelpUrl() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL userGuideUrl \u003d HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getLoadedUrl().equals(userGuideUrl);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11,
      "-": 64
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the focus state of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getRootNode().isFocused();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        setText(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Enters the given text in the Command Box."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(text));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Enters the given text in the Command Box."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void pressTab() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.push(KeyCode.TAB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 24,
      "-": 41
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HistoryWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String HISTORY_WINDOW_TITLE \u003d \"Command History Report\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String HISTORY_WINDOW_BROWSER_ID \u003d \"#commandHistoryWindow\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindowHandle(Stage historyWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(historyWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new GuiRobot().isWindowShown(HISTORY_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(HISTORY_WINDOW_BROWSER_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final RideListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        personListPanel \u003d new RideListPanelHandle(getChildNode(RideListPanelHandle.RIDE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RideCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Provides a handle to a ride card in the ride list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MAINTENANCE_FIELD_ID \u003d \"#daysSinceMaintenanceString\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String WAIT_TIME_FIELD_ID \u003d \"#waitingTimeString\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Label maintenanceLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Label waitTimeLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        maintenanceLabel \u003d getChildNode(MAINTENANCE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitTimeLabel \u003d getChildNode(WAIT_TIME_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getMaintenance() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return maintenanceLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getWaitingTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return waitTimeLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if this handle contains {@code ride}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Ride ride) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return getName().equals(ride.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 getAddress().equals(ride.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 getMaintenance().equals(ride.getDaysSinceMaintenance().toString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 getWaitingTime().equals(ride.getWaitingTime().toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(ride.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 14,
      "-": 66
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RideListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Provides a handle for {@code RideListPanel} containing the list of {@code RideCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideListPanelHandle extends NodeHandle\u003cListView\u003cRide\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String RIDE_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cRide\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle(ListView\u003cRide\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a handle to the selected {@code RideCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedRideList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (selectedRideList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new AssertionError(\"Ride list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(RideCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRideList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Navigates the listview to display {@code ride}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void navigateToCard(Ride ride) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!getRootNode().getItems().contains(ride)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new IllegalArgumentException(\"Ride does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            getRootNode().scrollTo(ride);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Selects the {@code RideCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the ride card handle of a ride associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle getRideCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(RideCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Ride getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Remembers the selected {@code RideCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the selected {@code RideCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "YuPeiHenry": 12,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected Supplier\u003cReadOnlyThanePark\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyThanePark\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            createDataFileWithData(new XmlSerializableThanePark(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return new ThanePark(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new AssertionError(\"Data is not in the ThanePark format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredRideList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/CommandsLogCenterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.CommandEntryBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains integration tests with storage and model for {@code CommandsLogCenter}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandsLogCenterTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String logfilePathString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setup() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(CommandEntryBuilder.COMMAND_ENTRIES.length \u003e 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logfilePathString \u003d CommandsLogCenter.getFilePathString(CommandsLogCenter.LOG_FILE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file \u003d new File(logfilePathString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setWritable(true));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setReadable(true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logAndRetrieveSuccessTest() throws IOException, JAXBException, IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e expectedCommandEntries \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cXmlAdaptedCommandEntry\u003e expectedXmlAdaptedCommandEntryList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (CommandEntry commandEntry : CommandEntryBuilder.COMMAND_ENTRIES) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(commandEntry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandEntries.add(commandEntry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedXmlAdaptedCommandEntryList.add(new XmlAdaptedCommandEntry(commandEntry));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntries \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cXmlAdaptedCommandEntry\u003e xmlAdaptedCommandEntryList \u003d CommandsLogCenter.retrieve().getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (XmlAdaptedCommandEntry xmlAdaptedCommandEntry : xmlAdaptedCommandEntryList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualCommandEntries.add(xmlAdaptedCommandEntry.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedXmlAdaptedCommandEntryList, xmlAdaptedCommandEntryList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCommandEntries, actualCommandEntries);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logUnableAccessFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(CommandsLogCenter.MESSAGE_LOG_INACCESSIBLE, logfilePathString), ie.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logUnableToWriteToFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertTrue(ie.getMessage().contains(\"denied\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void retrieveUnableAccessFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.init();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.retrieve();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(CommandsLogCenter.MESSAGE_LOG_INACCESSIBLE, logfilePathString), ie.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void retrieveJaxbExceptionTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //add a CommandEntry first"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Corrupt the xml file"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(\"\u003casdnjkdg\u003e\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.retrieve();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.XmlAdaptedRide;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validThanePark.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingRideField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRideField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validRide.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempThanePark.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_NAME \u003d \"Haunted Mansion\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"13\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(null, ThanePark.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, ThanePark.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, ThanePark.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableThanePark.class).toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(9, dataFromFile.getRideList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide expectedPerson \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                null, VALID_MAINTENANCE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide expectedPerson \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_NAME, INVALID_MAINTENANCE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide expectedPerson \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_NAME, VALID_MAINTENANCE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.saveDataToFile(null, new ThanePark());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new ThanePark());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataToWrite \u003d new XmlSerializableThanePark(new ThanePark());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new ThanePark());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        dataToWrite \u003d new XmlSerializableThanePark("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                builder.withPerson(new RideBuilder().build()).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedRide}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @XmlRootElement(name \u003d \"ride\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static class XmlAdaptedRideWithRootElement extends XmlAdaptedRide {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 33,
      "YuPeiHenry": 8,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.CommandEntryBuilder.COMMAND_STRINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.core.CommandsLogCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String logfilePathString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(COMMAND_STRINGS.length \u003e 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logfilePathString \u003d CommandsLogCenter.getFilePathString(CommandsLogCenter.LOG_FILE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file \u003d new File(logfilePathString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setWritable(true));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setReadable(true));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.delete());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryContinues_withIoExceptionTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        history.add(\"delete 1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryAdds_multipleCommandWordTest() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cExecutedCommand\u003e expectedExecutedCommandList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedExecutedCommandList.add(new ExecutedCommand(commandString));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cExecutedCommand\u003e actualExecutedCommandList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(COMMAND_STRINGS.length, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (CommandEntry commandEntry : actualCommandEntryList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualExecutedCommandList.add(commandEntry.getExecutedCommand());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedExecutedCommandList, actualExecutedCommandList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryAdds_invalidCommandWordTest() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String commandString \u003d \"asdk\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        history.add(commandString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ExecutedCommand expectedExecutedCommand \u003d new ExecutedCommand(commandString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedExecutedCommand, actualCommandEntryList.get(0).getExecutedCommand());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryGetCommandEntry_ioExceptionTest() throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //populate the xml file"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //create file problem"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //trigger the delete and file recreation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(0, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Compare file content"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(CommandsLogCenter.getFilePath(CommandsLogCenter.LOG_FILE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, CommandsLogCenter.STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(CommandsLogCenter.STANDARDIZED_XML_HEADER + \"\\n\" + CommandsLogCenter.LIST_HEADER,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileData);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryGetCommandEntry_jaxbExceptionTest() throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //populate the xml file"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Corrupt the xml file"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(\"\u003casdnjkdg\u003e\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //trigger the delete and file recreation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(0, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Compare file content"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(CommandsLogCenter.getFilePath(CommandsLogCenter.LOG_FILE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, CommandsLogCenter.STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(CommandsLogCenter.STANDARDIZED_XML_HEADER + \"\\n\" + CommandsLogCenter.LIST_HEADER,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileData);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 101,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.addPerson(validRide);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(new AddCommand(validRide), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validRide), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRideSameName_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride sameNameRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(new AddCommand(sameNameRide), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideInList \u003d model.getAddressBook().getRideList().get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(new AddCommand(rideInList), model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "YuPeiHenry": 5,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validRide).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validRide), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(validRide), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validRide);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validRide);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride alice \u003d new RideBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride bob \u003d new RideBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void addPerson(Ride ride) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ReadOnlyThanePark getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasPerson(Ride ride) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void deletePerson(Ride target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void updatePerson(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void updateFilteredRideList(Predicate\u003cRide\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A Model stub that contains a single ride."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private final Ride ride;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelStubWithPerson(Ride ride) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.ride \u003d ride;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasPerson(Ride ride) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return this.ride.isSameRide(ride);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A Model stub that always accept the ride being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        final ArrayList\u003cRide\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasPerson(Ride ride) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return personsAdded.stream().anyMatch(ride::isSameRide);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void addPerson(Ride ride) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            personsAdded.add(ride);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ReadOnlyThanePark getAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return new ThanePark();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 33,
      "YuPeiHenry": 7,
      "-": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.resetData(new ThanePark());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_MAINTENANCE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_MAINTENANCE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_WAIT_TIME_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_WAIT_TIME_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_DESC_AMY \u003d \" \" + PREFIX_MAINTENANCE + VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_DESC_BOB \u003d \" \" + PREFIX_MAINTENANCE + VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_WAITING_TIME + VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_WAITING_TIME + VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    // \u0027a\u0027 not allowed in days since maintenance"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String INVALID_MAINTENANCE_DESC \u003d \" \" + PREFIX_MAINTENANCE + \"911a\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_WAITING_TIME + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final UpdateCommand.UpdateRideDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final UpdateCommand.UpdateRideDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_AMY).withWaitTime(VALID_WAIT_TIME_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * - the address book and the filtered ride list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark expectedAddressBook \u003d new ThanePark(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRideList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredRideList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the ride at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride ride \u003d model.getFilteredRideList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        final String[] splitName \u003d ride.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(new RideContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(1, model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the first ride in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride firstRide \u003d model.getFilteredRideList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deletePerson(firstRide);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "YuPeiHenry": 15,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getRideList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // delete -\u003e first ride deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered ride list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e same first ride deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 1. Deletes a {@code Ride} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted ride in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the ride object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // delete -\u003e deletes second ride in unfiltered ride list / first ride in filtered ride list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered ride list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertNotEquals(rideToDelete, model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e deletes same second ride in unfiltered ride list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(model.getFilteredRideList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 27,
      "YuPeiHenry": 4,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.FANTASY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.GALAXY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\u0027\u003c\u0027,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new Maintenance(\"100\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\u0027\u003c\u0027,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new WaitTime(\"100\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_zeroPredicates_noRideFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\u0027 \u0027, new Maintenance(\"0\"))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(List.of(new AttributePredicate(\u0027 \u0027, new WaitTime(\"0\"))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_singlePredicate_multipleRidesFound() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(Arrays.asList(prepareMaintenancePredicate(\u0027\u003e\u0027, \"15\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(BIG, DUMBO, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\u0027\u003c\u0027, \"15\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(ACCELERATOR, CASTLE, DUMBO, FANTASY, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_multiplePredicates_multipleRidesFound() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(Arrays.asList(prepareMaintenancePredicate(\u0027\u003e\u0027, \"15\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        prepareMaintenancePredicate(\u0027\u003c\u0027, \"50\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(BIG, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\u0027\u003c\u0027, \"15\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                prepareWaitTimePredicate(\u0027\u003e\u0027, \"5\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(CASTLE, FANTASY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\u0027\u003c\u0027, \"15\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                prepareMaintenancePredicate(\u0027\u003e\u0027, \"15\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(DUMBO, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private AttributePredicate prepareMaintenancePredicate(char c, String value) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AttributePredicate(c, new Maintenance(value));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private AttributePredicate prepareWaitTimePredicate(char c, String value) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AttributePredicate(c, new WaitTime(value));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ENCHANTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.FANTASY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_zeroKeywords_noRideFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_multipleKeywords_multipleRidesFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(\"carrousel Enchanted final\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(CASTLE, ENCHANTED, FANTASY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_singleTag_multipleRidesFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Tag tag \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d PREFIX_TAG + tag.tagName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(userInput, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(ACCELERATOR, BIG, DUMBO), model.getFilteredRideList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_address_multipleRidesFound() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Address address \u003d new Address(\"10th Street\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d PREFIX_ADDRESS + address.value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(userInput, address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(DUMBO), model.getFilteredRideList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses {@code userInput} into a {@code RideContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private RideContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new RideContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses {@code userInput} and {@code object} into a {@code RideContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private RideContainsKeywordsPredicate preparePredicate(String userInput, Object object) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new RideContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), Optional.ofNullable(object));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 65,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_SHORT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_SHORT_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(((ShowHelpRequestEvent) recentEvent).isSummarized());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_helpMore_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String[] args \u003d {\"more\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(new HelpCommand(args), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(((ShowHelpRequestEvent) recentEvent).isSummarized());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_helpSpecificCommand_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int numEvents \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandWord : AllCommandWords.COMMAND_WORDS) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            numEvents++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            System.out.println(commandWord);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            String[] args \u003d {commandWord};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new HelpCommand(args), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertFalse(((ShowHelpRequestEvent) recentEvent).isSummarized());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(commandWord, ((ShowHelpRequestEvent) recentEvent).getCommandWord());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(numEvents, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 38,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUGGEST_COMMAND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.parser.ThaneParkParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains unit tests for {@code SuggestCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser parser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new SuggestCommand(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a\", \"add\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"c\", \"clear\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"d\", \"delete\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"e\", \"exit\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"f\", \"find\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"h\", \"help\", \"history\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"q\", \"quickView\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"r\", \"redo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"u\", \"update\", \"undo\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"v\", \"viewAll\", \"view\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a j\\\\km bu/ni i?@w 359h\", \"add\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand_failure() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"b\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand2_failure() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"g\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies behavior of successful suggest."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param commandWords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandSuccessBehavior(String userInput, String... commandWords) throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SuggestCommand.combineCommandWords(commandWords));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Command command \u003d parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(command instanceof SuggestCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        SuggestCommand suggestCommand \u003d (SuggestCommand) command;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMessage, suggestCommand.execute(model, history).feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies behavior of failed suggest"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandFailureBehavior(String userInput) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 83,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //setup"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undoRedoCommandsAreIncluded() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //includes add, clear, delete and edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int total \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new AddCommand(validRide).execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.addPerson(validRide);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new DeleteCommand(INDEX_FIRST_PERSON).execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.deletePerson(rideToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Change some ride back to the deleted one"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d rideToDelete;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        new UpdateCommand(INDEX_FIRST_PERSON, descriptor).execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.resetData(new ThanePark());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new ClearCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 53,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride lastRide \u003d model.getFilteredRideList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideBuilder personInList \u003d new RideBuilder(lastRide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d personInList.withName(VALID_NAME_BOB).withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(lastRide, editedRide);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, new UpdateRideDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedRide \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideInFilteredList \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder(rideInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride firstRide \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(firstRide).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_SECOND_RIDE, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit ride in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideInList \u003d model.getAddressBook().getRideList().get(INDEX_SECOND_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new UpdateRideDescriptorBuilder(rideInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getRideList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit -\u003e first ride edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered ride list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e same first ride edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 1. Edits a {@code Ride} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited ride in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the ride object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit -\u003e edits second ride in unfiltered ride list / first ride in filtered ride list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered ride list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertNotEquals(model.getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased()), rideToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e edits same second ride in unfiltered ride list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor copyDescriptor \u003d new UpdateCommand.UpdateRideDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_RIDE, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 36,
      "YuPeiHenry": 15,
      "-": 197
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateRideDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateRideDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand.UpdateRideDescriptor descriptorWithSameValues \u003d new UpdateCommand.UpdateRideDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand.UpdateRideDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new UpdateRideDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewAllCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ViewAllCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ViewAllCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getRideList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand selectFirstCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand selectSecondCommand \u003d new ViewCommand(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand selectFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code ViewCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(viewCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code ViewCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(viewCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 2,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRide \u003d new RideBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_AMY + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRideMultipleTags \u003d new RideBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedRideMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRide \u003d new RideBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MAINTENANCE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + VALID_WAIT_TIME_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MAINTENANCE_BOB + VALID_WAIT_TIME_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MAINTENANCE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 12,
      "YuPeiHenry": 32,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Tests with 2 attributes of same type for waiting time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003c\u0027, new WaitTime(\"100\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003e\u0027, new WaitTime(\"5\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_WAITING_TIME + \" \u003c 100 \" + PREFIX_WAITING_TIME + \" \u003e 5\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Tests with Maintenance"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003c\u0027, new Maintenance(\"100\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003e\u0027, new Maintenance(\"5\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d \" \" + PREFIX_MAINTENANCE + \" \u003c 100 \" + PREFIX_MAINTENANCE + \" \u003e 5\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Test with 2 different types"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003c\u0027, new Maintenance(\"100\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.add(new AttributePredicate(\u0027\u003e\u0027, new WaitTime(\"5\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d \" \" + PREFIX_MAINTENANCE + \" \u003c 100 \" + PREFIX_WAITING_TIME + \" \u003e 5\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_FULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new FindCommand(new RideContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input looking with address prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Arrays.asList(PREFIX_ADDRESS.getPrefix(), \"10th\", \"street\"), Optional.of(new Address(\"10th street\"))));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, PREFIX_ADDRESS.getPrefix() + \" 10th street\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with address in full"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Arrays.asList(PREFIX_ADDRESS_FULL.getPrefix(), \"10th\", \"street\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Optional.of(new Address(\"10th street\"))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, PREFIX_ADDRESS_FULL.getPrefix() + \" 10th street\", expectedFindCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with single tag prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(PREFIX_TAG.getPrefix(), \"friends\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(list, Optional.of(tags)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with single tag prefix in full"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG_FULL.getPrefix(), \"friends\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(list, Optional.of(tags)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with multiple tags prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG.getPrefix(), \"friends\", PREFIX_TAG.getPrefix(), \"neighbours\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags.add(new Tag(\"neighbours\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(list, Optional.of(tags)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with multiple tag prefix in full"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG_FULL.getPrefix(), \"friends\", PREFIX_TAG_FULL.getPrefix(), \"neighbours\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(list, Optional.of(tags)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates a user input from a list of strings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private String getUserInput(List\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            userInput \u003d userInput.concat(s).concat(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 60,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_validArgs_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"\", new HelpCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] args2 \u003d {\"more\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"more\", new HelpCommand(args2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] args3 \u003d {\"add\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"add\", new HelpCommand(args3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HistoryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryCommandParser parser \u003d new HistoryCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_validArgs_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"\", new HistoryCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] args \u003d {\"more\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"more\", new HistoryCommand(args));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            HistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_WAIT_TIME \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_WAIT_TIME \u003d \"18\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMaintenance((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMaintenance(INVALID_MAINTENANCE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance expectedMaintenance \u003d new Maintenance(VALID_MAINTENANCE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMaintenance, ParserUtil.parseMaintenance(VALID_MAINTENANCE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String maintenanceWithWhitespace \u003d WHITESPACE + VALID_MAINTENANCE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance expectedMaintenance \u003d new Maintenance(VALID_MAINTENANCE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMaintenance, ParserUtil.parseMaintenance(maintenanceWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWaitingTime((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseWaitingTime(INVALID_WAIT_TIME));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WaitTime expectedWaitTime \u003d new WaitTime(VALID_WAIT_TIME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedWaitTime, ParserUtil.parseWaitingTime(VALID_WAIT_TIME));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_WAIT_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WaitTime expectedWaitTime \u003d new WaitTime(VALID_WAIT_TIME);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedWaitTime, ParserUtil.parseWaitingTime(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 16,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ThaneParkParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RideUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser parser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(RideUtil.getAddCommand(ride));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new AddCommand(ride), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(ride).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + RideUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new FindCommand(new RideContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), pe.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parseCommand_help_more() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" more\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parser.parseCommand(HelpCommand.COMMAND_WORD + \" more 3\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), pe.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" more\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ViewAllCommand.COMMAND_WORD) instanceof ViewAllCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ViewAllCommand.COMMAND_WORD + \" 3\") instanceof ViewAllCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new ViewCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 23,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid maintenance"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid maintenance followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MAINTENANCE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid maintenance followed by invalid maintenance. The test case for invalid maintenance followed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid maintenance is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + MAINTENANCE_DESC_BOB + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Ride} being edited,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + VALID_MAINTENANCE_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // maintenance"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + TAG_DESC_FRIEND + MAINTENANCE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MAINTENANCE_DESC + MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_MAINTENANCE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 55,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(modelManager.hasPerson(ACCELERATOR));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.addPerson(ACCELERATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(modelManager.hasPerson(ACCELERATOR));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.getFilteredRideList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark addressBook \u003d new AddressBookBuilder().withPerson(ACCELERATOR).withPerson(BIG).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark differentAddressBook \u003d new ThanePark();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] keywords \u003d ACCELERATOR.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.updateFilteredRideList(new RideContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThanePark thanePark \u003d new ThanePark();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), thanePark.getRideList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark newData \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(newData, thanePark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Two rides with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e newRides \u003d Arrays.asList(ACCELERATOR, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThaneParkStub newData \u003d new ThaneParkStub(newRides);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.hasRide(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(thanePark.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.addRide(ACCELERATOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(thanePark.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.addRide(ACCELERATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(thanePark.hasRide(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.getRideList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A stub ReadOnlyThanePark whose rides list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static class ThaneParkStub implements ReadOnlyThanePark {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private final ObservableList\u003cRide\u003e rides \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThaneParkStub(Collection\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.rides.setAll(rides);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ObservableList\u003cRide\u003e getRideList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return rides;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 32,
      "YuPeiHenry": 1,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class VersionedThaneParkTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ReadOnlyThanePark addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ReadOnlyThanePark addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ReadOnlyThanePark addressBookWithCastle \u003d new AddressBookBuilder().withPerson(CASTLE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ReadOnlyThanePark emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertThrows(VersionedThanePark.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertThrows(VersionedThanePark.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertThrows(VersionedThanePark.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertThrows(VersionedThanePark.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCastle);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertAddressBookListStatus(VersionedThanePark versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             List\u003cReadOnlyThanePark\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             ReadOnlyThanePark expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             List\u003cReadOnlyThanePark\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new ThanePark(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (ReadOnlyThanePark expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            assertEquals(expectedAddressBook, new ThanePark(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (ReadOnlyThanePark expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            assertEquals(expectedAddressBook, new ThanePark(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates and returns a {@code VersionedThanePark} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code VersionedThanePark#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private VersionedThanePark prepareAddressBookList(ReadOnlyThanePark... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        VersionedThanePark versionedAddressBook \u003d new VersionedThanePark(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedThanePark versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 49,
      "-": 249
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/MaintenanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class MaintenanceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Maintenance(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_invalidMaintenance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String invalidMaintenance \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Maintenance(invalidMaintenance));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance firstMaintenance \u003d new Maintenance(\"100\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance secondMaintenance \u003d new Maintenance(100);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance thirdMaintenance \u003d new Maintenance(50);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(firstMaintenance.equals(firstMaintenance));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same value using different methods -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(firstMaintenance.equals(secondMaintenance));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(thirdMaintenance));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isValidMaintenance() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Maintenance.isValidMaintenance(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\" \")); // spaces only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"1\")); // exactly 1 numbers"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"93121534\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void setsCorrectValue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance firstMaintenance \u003d new Maintenance(\"100\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance secondMaintenance \u003d new Maintenance(\"50\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        firstMaintenance.setValue(50);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(firstMaintenance, secondMaintenance);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 30,
      "YuPeiHenry": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/RideContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicate \u003d new RideContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate secondPredicate \u003d new RideContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicateCopy \u003d new RideContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d new RideContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Big\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Big\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Big\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Big\", \"Castle\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Castle\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d new RideContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Keywords match days since last maintenance, current waiting time and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice\").withMaintenance(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withWaitTime(\"1\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "YuPeiHenry": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/RideTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ride.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void isSameRide() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(ACCELERATOR));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.isSameRide(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // different phone and email but same name -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withWaitTime(VALID_WAIT_TIME_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withMaintenance(VALID_MAINTENANCE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride aliceCopy \u003d new RideBuilder(ACCELERATOR).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.equals(aliceCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.equals(ACCELERATOR));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(BOB));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 35,
      "YuPeiHenry": 11,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/UniqueRideListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.exceptions.RideNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class UniqueRideListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final UniqueRideList uniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(uniqueRideList.contains(ACCELERATOR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(uniqueRideList.contains(ACCELERATOR));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(uniqueRideList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(null, ACCELERATOR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(RideNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedUniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(RideNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.remove(ACCELERATOR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.remove(ACCELERATOR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides((UniqueRideList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(expectedUniqueRideList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides((List\u003cRide\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e rideList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(rideList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e listWithDuplicateRides \u003d Arrays.asList(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(listWithDuplicateRides);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 38,
      "YuPeiHenry": 29,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ride/WaitTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class WaitTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WaitTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new WaitTime(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isValidWaitTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // null waiting time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e WaitTime.isValidWaitTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // blank waiting time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid waiting time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(WaitTime.isValidWaitTime(\"17\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlThaneParkStorage addressBookStorage \u003d new XmlThaneParkStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * {@link XmlThaneParkStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlThaneParkStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark original \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ReadOnlyThanePark retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlThaneParkStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        storage.handleAddressBookChangedEvent(new ThaneParkChangedEvent(new ThanePark()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    class XmlThaneParkStorageExceptionThrowingStub extends XmlThaneParkStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public XmlThaneParkStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void saveAddressBook(ReadOnlyThanePark addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 15,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedRideTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.storage.XmlAdaptedRide.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlAdaptedRideTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_NAME \u003d BIG.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d BIG.getDaysSinceMaintenance().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_WAIT_TIME \u003d BIG.getWaitingTime().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BIG.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BIG.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d new XmlAdaptedRide(BIG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(BIG, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(INVALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d new XmlAdaptedRide(null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_invalidMaintenance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, INVALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_nullMaintenance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d new XmlAdaptedRide(VALID_NAME, null, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Maintenance.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, WaitTime.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d new XmlAdaptedRide(VALID_NAME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_MAINTENANCE, VALID_WAIT_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlAdaptedRide person \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 25,
      "YuPeiHenry": 12,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.testutil.TypicalRides;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlSerializableThaneParkTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableThaneParkTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TYPICAL_RIDES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRideThanePark.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path INVALID_RIDE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRideThanePark.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path DUPLICATE_RIDE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRideThanePark.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_RIDES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark typicalPersonsAddressBook \u003d TypicalRides.getTypicalThanePark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_RIDE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_RIDE_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expectMessage(XmlSerializableThanePark.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlThaneParkStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.HAUNTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlThaneParkStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlThaneParkStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private java.util.Optional\u003cReadOnlyThanePark\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new XmlThaneParkStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        readAddressBook(\"NotXmlFormatThanePark.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        readAddressBook(\"invalidRideThanePark.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        readAddressBook(\"invalidAndValidRideThanePark.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark original \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlThaneParkStorage xmlAddressBookStorage \u003d new XmlThaneParkStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ReadOnlyThanePark readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.addRide(HAUNTED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.removeRide(ACCELERATOR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.addRide(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void saveAddressBook(ReadOnlyThanePark addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new XmlThaneParkStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        saveAddressBook(new ThanePark(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 25,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": " *     {@code ThanePark ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private ThanePark addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressBook \u003d new ThanePark();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AddressBookBuilder(ThanePark addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds a new {@code Ride} to the {@code ThanePark} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AddressBookBuilder withPerson(Ride ride) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressBook.addRide(ride);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CommandEntryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Builds valid CommandEntry for test and valid/invalid Command Strings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandEntryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final CommandEntry[] COMMAND_ENTRIES \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"add asdfvf\")),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"delete 1\")),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"help\"))};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String[] COMMAND_STRINGS \u003d {\"add 20\", \"delete 1\", \"history\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RideBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class to help with building Ride objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Accelerator\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_MAINTENANCE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_WAIT_TIME \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_DIFFERENT_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Maintenance maintenance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private WaitTime waitingTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Name differentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        maintenance \u003d new Maintenance(DEFAULT_MAINTENANCE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTime \u003d new WaitTime(DEFAULT_WAIT_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        differentName \u003d new Name(DEFAULT_DIFFERENT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes the RideBuilder with the data of {@code rideToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder(Ride rideToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        name \u003d rideToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        maintenance \u003d rideToCopy.getDaysSinceMaintenance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTime \u003d rideToCopy.getWaitingTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        address \u003d rideToCopy.getAddress();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(rideToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Sets the {@code Name} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Ride} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Sets the {@code Address} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the {@code Maintenance} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withMaintenance(String daysSinceLastMaintenanceString) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.maintenance \u003d new Maintenance(daysSinceLastMaintenanceString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the {@code WaitTime} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withWaitTime(String waitingTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTime \u003d new WaitTime(waitingTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Ride(name, maintenance, waitingTime, address, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Ride buildDifferent() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Ride(differentName, maintenance, waitingTime, address, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "YuPeiHenry": 32,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RideUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class for Ride."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RideUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns an add command string for adding the {@code ride}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static String getAddCommand(Ride ride) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(ride);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the part of command string for the given {@code ride}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static String getPersonDetails(Ride ride) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        sb.append(PREFIX_NAME + ride.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        sb.append(PREFIX_MAINTENANCE + ride.getDaysSinceMaintenance().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        sb.append(PREFIX_WAITING_TIME + ride.getWaitingTime().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        sb.append(PREFIX_ADDRESS + ride.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ride.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code UpdateRideDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(UpdateRideDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.getMaintenance().ifPresent("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            phone -\u003e sb.append(PREFIX_MAINTENANCE).append(phone.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.getWaitTime().ifPresent("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            email-\u003e sb.append(PREFIX_WAITING_TIME).append(email.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 9,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the middle index of the ride in the {@code model}\u0027s ride list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRideList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the last index of the ride in the {@code model}\u0027s ride list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the ride in the {@code model}\u0027s ride list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static Ride getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return model.getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Index INDEX_SECOND_RIDE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRides.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class containing a list of {@code Ride} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class TypicalRides {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride ACCELERATOR \u003d new RideBuilder().withName(\"Accelerator\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withWaitTime(\"1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withMaintenance(\"9\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride BIG \u003d new RideBuilder().withName(\"Big Thunder Mountain Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withWaitTime(\"16\").withMaintenance(\"31\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride CASTLE \u003d new RideBuilder().withName(\"Castle Carrousel\").withMaintenance(\"1\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"13\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride DUMBO \u003d new RideBuilder().withName(\"Dumbo The Flying Elephant Meier\").withMaintenance("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            \"87\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"3\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride ENCHANTED \u003d new RideBuilder().withName(\"Enchanted Airways\").withMaintenance(\"4\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"21\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride FANTASY \u003d new RideBuilder().withName(\"Final Fantasy\").withMaintenance(\"12\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"12\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride GALAXY \u003d new RideBuilder().withName(\"Galaxy Road\").withMaintenance(\"24\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"1\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride HAUNTED \u003d new RideBuilder().withName(\"The Haunted Mansion\").withMaintenance(\"21\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"19\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride IDA \u003d new RideBuilder().withName(\"Ida Mueller\").withMaintenance(\"31\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"13\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    // Manually added - Ride\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride AMY \u003d new RideBuilder().withName(VALID_NAME_AMY).withMaintenance(VALID_MAINTENANCE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(VALID_WAIT_TIME_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride BOB \u003d new RideBuilder().withName(VALID_NAME_BOB).withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private TypicalRides() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns an {@code ThanePark} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static ThanePark getTypicalThanePark() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark ab \u003d new ThanePark();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Ride ride : getTypicalRides()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            ab.addRide(ride);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static List\u003cRide\u003e getTypicalRides() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ACCELERATOR, BIG, CASTLE, DUMBO, ENCHANTED, FANTASY, GALAXY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 25,
      "YuPeiHenry": 17,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdateRideDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building UpdateRideDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateRideDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private UpdateRideDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder(UpdateRideDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new UpdateRideDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UpdateRideDescriptor} with fields containing {@code ride}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder(Ride ride) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setName(ride.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setMaintenance(ride.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setWaitTime(ride.getWaitingTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setAddress(ride.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setTags(ride.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Maintenance} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder withMaintenance(String daysSinceMaintenanceString) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setMaintenance(new Maintenance(daysSinceMaintenanceString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code WaitTime} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder withWaitTime(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setWaitTime(new WaitTime(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdateRideDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateRideDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 6,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ACCELERATOR);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedDefaultPageUrl \u003d HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // associated web page of a ride"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedRideUrl \u003d BrowserPanel.RIDE_PAGE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRideUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ViewAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"viewAll\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A GUI unit test class for ThanePark."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.ui.HelpWindow.USER_GUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedHelpPage \u003d USER_GUIDE_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RideCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRide;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideWithNoTags \u003d new RideBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard rideCard \u003d new RideCard(rideWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplay(rideCard, rideWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideWithTags \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideCard \u003d new RideCard(rideWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplay(rideCard, rideWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard rideCard \u003d new RideCard(ride, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same ride, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard copy \u003d new RideCard(ride, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(rideCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(rideCard.equals(rideCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride differentRide \u003d new RideBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(new RideCard(differentRide, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same ride, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(new RideCard(ride, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that {@code rideCard} displays the details of {@code expectedRide} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCardDisplay(RideCard rideCard, Ride expectedRide, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle rideCardHandle \u003d new RideCardHandle(rideCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", rideCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // verify ride details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplaysRide(expectedRide, rideCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 46,
      "YuPeiHenry": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RideListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.getTypicalRides;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRide;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final ObservableList\u003cRide\u003e TYPICAL_RIDES \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            FXCollections.observableList(getTypicalRides());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RideListPanelHandle rideListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        initUi(TYPICAL_RIDES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_RIDES.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListPanelHandle.navigateToCard(TYPICAL_RIDES.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Ride expectedRide \u003d TYPICAL_RIDES.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RideCardHandle actualCard \u003d rideListPanelHandle.getRideCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCardDisplaysRide(expectedRide, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        initUi(TYPICAL_RIDES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle expectedRide \u003d rideListPanelHandle.getRideCardHandle(INDEX_SECOND_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle selectedRide \u003d rideListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardEquals(expectedRide, selectedRide);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies that creating and deleting large number of rides in {@code RideListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ObservableList\u003cRide\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }, \"Creation and deletion of ride cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a list of rides containing {@code rideCount} rides that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * {@code RideListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ObservableList\u003cRide\u003e createBackingList(int rideCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithRides(rideCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getRideList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a .xml file containing {@code rideCount} rides. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Path createXmlFileWithRides(int rideCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        builder.append(\"\u003cthanepark\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c rideCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003crides\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003cdaysSinceMaintenanceString\u003e000\u003c/daysSinceMaintenanceString\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003cwaitingTimeString\u003e123\u003c/waitingTimeString\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            builder.append(\"\u003cstatusString\u003eOPEN\u003c/statusString\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003c/rides\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        builder.append(\"\u003c/thanepark\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Path manyRidesFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyRides.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.createFile(manyRidesFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.writeToFile(manyRidesFile, builder.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        manyRidesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return manyRidesFile;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes {@code rideListPanelHandle} with a {@code RideListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code RideListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void initUi(ObservableList\u003cRide\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideListPanel rideListPanel \u003d new RideListPanel(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListPanelHandle \u003d new RideListPanelHandle(getChildNode(rideListPanel.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                RideListPanelHandle.RIDE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 22,
      "YuPeiHenry": 32,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final ThaneParkChangedEvent EVENT_STUB \u003d new ThaneParkChangedEvent(new ThanePark());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertCardEquals(RideCardHandle expectedCard, RideCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCard.getWaitingTime(), actualCard.getWaitingTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCard.getMaintenance(), actualCard.getMaintenance());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRide}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertCardDisplaysRide(Ride expectedRide, RideCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedRide.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide.getDaysSinceMaintenance().toString(), actualCard.getMaintenance());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide.getWaitingTime().toString(), actualCard.getWaitingTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedRide.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedRide.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the list in {@code rideListPanelHandle} displays the details of {@code rides} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListMatching(RideListPanelHandle rideListPanelHandle, Ride... rides) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c rides.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCardDisplaysRide(rides[i], rideListPanelHandle.getRideCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the list in {@code rideListPanelHandle} displays the details of {@code rides} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListMatching(RideListPanelHandle rideListPanelHandle, List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(rideListPanelHandle, rides.toArray(new Ride[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts the size of the list in {@code rideListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListSize(RideListPanelHandle rideListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int numberOfPeople \u003d rideListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 18,
      "-": 50
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.HAUNTED;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RideUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + MAINTENANCE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride with all fields same as another ride in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        toAdd \u003d new RideBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride with all fields same as another ride in the address book except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        toAdd \u003d new RideBuilder(AMY).withName(\"Different\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(ACCELERATOR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + MAINTENANCE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(HAUNTED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filters the ride list before adding -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* ------------------------ Perform add operation while a ride card is selected --------------------------- */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in the ride list, add a ride -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(CASTLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(HAUNTED);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RideUtil.getAddCommand(HAUNTED) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + RideUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + INVALID_MAINTENANCE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(command, Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(command, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(Ride toAdd) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(RideUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Ride)}. Executes {@code command}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Ride)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(String command, Ride toAdd) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Ride)} except asserts that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 2. {@code Storage} and {@code RideListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Ride)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 36,
      "YuPeiHenry": 31,
      "-": 186
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.testutil.TypicalRides;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A system test class for ThanePark, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected ThanePark getInitialData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return TypicalRides.getTypicalThanePark();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(getModel().getAddressBook().getRideList().size(), getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getFilteredRideList().size() \u003c getModel().getAddressBook().getRideList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Selects the ride at {@code index} of the displayed list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getRideList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same ride objects as {@code expectedModel}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * and the ride list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new ThanePark(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredRideList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code RideListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * of the previously selected ride."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the ride in the ride list panel at"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see RideListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //TODO: Check that the ride information displays the correct name"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedUrl \u003d BrowserPanel.RIDE_PAGE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the ride list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see RideListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() throws IOException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl(), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 17,
      "YuPeiHenry": 13,
      "-": 257
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in ride list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filters the ride list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 98
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void delete() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the first ride in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride deletedRide \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the last ride in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo deleting the last ride in the list -\u003e last ride restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo deleting the last ride in the list -\u003e last ride deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the middle ride in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, delete index within bounds of address book and ride list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, delete index within bounds of address book but out of bounds of ride list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getRideList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* --------------------- Performing delete operation while a ride card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the selected ride -\u003e ride list panel selects the ride before the deleted ride */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        deletedRide \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                getModel().getAddressBook().getRideList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes the {@code Ride} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return the removed ride"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Ride removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride targetRide \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deletePerson(targetRide);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return targetRide;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the ride at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride deletedRide \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 24,
      "YuPeiHenry": 6,
      "-": 166
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: repeat previous find command where ride list is displaying the rides we are finding"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride where ride list is not displaying the ride we are finding -\u003e 1 ride found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" CASTLE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CASTLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords -\u003e 2 rides found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Big Elephant\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords in reversed order -\u003e 2 rides found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords with 1 repeat -\u003e 2 rides found */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big Dumbo\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find same rides in thane park after deleting 1 of them -\u003e 1 ride found */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getModel().getAddressBook().getRideList().contains(BIG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, keyword is same as name but of different case -\u003e 1 ride found */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, keyword is substring of name -\u003e 0 rides found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, name is substring of keyword -\u003e 0 rides found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride not in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find phone number of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getDaysSinceMaintenance().toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find address of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getAddress().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find address of ride in thane park -\u003e 1 rides found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_ADDRESS + DUMBO.getAddress().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find waiting time of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getWaitingTime().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find tags of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DUMBO.getTags());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find tags of ride in thane park -\u003e 3 rides found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_TAG + tags.get(0).tagName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ACCELERATOR, DUMBO);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find while a ride is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DUMBO.getName().fullName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in empty thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RIDES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                MESSAGE_RIDES_LISTED_OVERVIEW, expectedModel.getFilteredRideList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 60,
      "-": 152
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpWindow() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl(), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpSummary() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //already open on startup"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpDisplayed();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //select something"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpNotDisplayed();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpDisplayed();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpWindowAtCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" add\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" delete\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" asdgf\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the short help"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see BrowserPanelHandle#isHelpUrl()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertShortHelpDisplayed() throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(getMainWindowHandle().getBrowserPanel().isHelpUrl());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the browser\u0027s url is not displaying the short help"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see BrowserPanelHandle#isHelpUrl()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertShortHelpNotDisplayed() throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(getMainWindowHandle().getBrowserPanel().isHelpUrl());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 50,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/HistoryCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HistoryWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A system test class for the history window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHistoryWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHistoryWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // open history window and give it focus"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // assert that while the history window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(HistoryCommand.MESSAGE_HISTORY_WINDOW, getResultDisplay().getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // assert that the status bar too is updated correctly while the history window is open"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void history_multipleCommands_onlyOneHistoryWindowOpen() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HistoryWindowHandle.HISTORY_WINDOW_TITLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the history window is open, and closes it after checking."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertHistoryWindowOpen() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HistoryWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new HistoryWindowHandle(guiRobot.getStage(HistoryWindowHandle.HISTORY_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the history window isn\u0027t open."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertHistoryWindowNotOpen() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HistoryWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 64,
      "-": 18
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Predicate\u003cRide\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cRide\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cPredicate\u003cRide\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static void setFilteredList(Model model, Ride... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Ride} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static Predicate\u003cRide\u003e getPredicateMatching(Ride other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected ThanePark getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SuggestCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUGGEST_COMMAND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains system tests for {@code SuggestCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void suggestCommand() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a\", \"add\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"c\", \"clear\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"d\", \"delete\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"e\", \"exit\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"f\", \"find\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"h\", \"help\", \"history\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"q\", \"quickView\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"r\", \"redo\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"u\", \"update\", \"undo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"v\", \"viewAll\", \"view\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"b\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"g\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"i\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"j\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"k\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"l\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"m\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"o\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"p\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"s\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"t\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"w\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"x\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"y\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"z\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * The commandResult of pressing tab is tested by SuggestCommandTest"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleKeyPress_tab() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //TODO: Assert that commands are valid or invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not do anything on an invalid command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"fail\", \"fail\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not execute commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"help\", \"help\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does complete commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"dele\", \"delete\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not complete when there are multiple commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"h\", \"h\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Performs UI visible verification of suggest command behavior resulting in 1 or more suggested commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Logic tests are done by SuggestCommandTest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see seedu.address.logic.commands.SuggestCommandTest"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandSuccessBehavior(String command, String... commandWords) throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SuggestCommand.combineCommandWords(commandWords));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedCommandBoxText;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandBoxText \u003d commandWords[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (commandWords.length \u003e 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandBoxText \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new Exception(\"Wrong use of assertCommandSuccess!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertApplicationDisplaysExpected(expectedCommandBoxText, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Performs UI visible verification of suggest command behavior resulting in no suggested commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Logic tests are done by SuggestCommandTest"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see seedu.address.logic.commands.SuggestCommandTest"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandFailureBehavior(String command) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedResultMessage \u003d MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedCommandBoxText \u003d command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertApplicationDisplaysExpected(expectedCommandBoxText, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks the behavior of tab inside the commandBox"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertTabBehavior(String input, String expectedCommandBoxText) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getCommandBox().setText(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getCommandBox().pressTab();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCommandBoxText, getCommandBox().getInput());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(getCommandBox().isFocused());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 109,
      "-": 6
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyThanePark\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/UpdateCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Maintenance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.address.model.ride.Ride;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.model.ride.WaitTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.address.testutil.RideBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RideUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void update() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo editing the last ride in the list -\u003e last ride restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo editing the last ride in the list -\u003e last ride edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                getModel().getFilteredRideList().get(INDEX_FIRST_PERSON.getZeroBased()), editedRide);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getAddressBook().getRideList().contains(BOB));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertNotEquals(getModel().getFilteredRideList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_AMY + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String editedName \u003d \"Different\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + \" \" + PREFIX_NAME + editedName + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(BOB).withName(editedName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_AMY).withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d getModel().getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(rideToEdit).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, edit index within bounds of address book and ride list -\u003e edited */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedName \u003d \"Another name\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_NAME + editedName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rideToEdit \u003d getModel().getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(rideToEdit).withName(editedName).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, edit index within bounds of address book but out of bounds of ride list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getRideList().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* --------------------- Performing edit operation while a ride card is selected -------------------------- */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in the ride list, edit a ride -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // browser\u0027s url is updated to reflect the new ride\u0027s name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRideList().size() + 1;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(RideUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getAddressBook().getRideList().contains(BOB));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getModel().getFilteredRideList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Ride, Index)} except that"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Index, Ride, Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Ride editedRide) throws IOException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedRide, null);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the ride at index {@code toEdit} being"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * updated to values specified {@code editedRide}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Ride editedRide,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredRideList().get(toEdit.getZeroBased()), editedRide);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 41,
      "YuPeiHenry": 60,
      "-": 218
    }
  },
  {
    "path": "src/test/java/systemtests/ViewCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ViewCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.address.testutil.TypicalRides.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void select() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the first card in the ride list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the last card in the ride list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the middle card in the ride list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, select index within bounds of address book but out of bounds of ride list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getRideList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, select index within bounds of address book and ride list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRideList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"VieW 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected ride.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 5,
      "-": 142
    }
  }
]
