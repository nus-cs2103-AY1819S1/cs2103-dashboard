[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d Deadline Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W17-4/main[image:https://travis-ci.org/CS2103-AY1819S1-W17-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "////"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "////"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* This is a desktop deadline manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* It is designed for students in NUS School of Computing who can type fast and are comfortable with command line inputs. However, students from other faculties are welcome to use our deadline manager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* Our main value proposition:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Fully featured command line interface, allowing users to do what they need faster without needing to use the mouse."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** More features than regular deadline managers, such as the ability to snooze impending deadlines and procrastinate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Fully tested, including automated GUI testing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* This application is based on https://github.com/nus-cs2103-AY1819S1/addressbook-level4[AddressBook Level 4]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 29,
      "sijie123": 9
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"githubId\": \"btzy\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"displayName\": \"Bernard Teo\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"authorNames\": [\"btzy\", \"Bernard Teo\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"githubId\": \"ranaldmiao\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"displayName\": \"Ranald Lam\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"authorNames\": [\"ranaldmiao\", \"Ranald Lam\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"githubId\": \"sijie123\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"displayName\": \"Lin Si Jie\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"authorNames\": [\"sijie123\", \"Si Jie\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"githubId\": \"sidhant007\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"displayName\": \"Sidhant Bansal\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"authorNames\": [\"sidhant007\", \"Sidhant Bansal\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"githubId\": \"kc97ble\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"displayName\": \"Nguyen Tien Trung Kien\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "      \"authorNames\": [\"Nguyen Tien Trung Kien\", \"Kien Nguyen\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    archiveName \u003d \u0027deadlinemanager.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        \u0027site-name\u0027: \u0027DeadlineManager\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W17-4/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 243,
      "sijie123": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "DeadlineManager is developed by the [CS2103-AY1819S1-W17-4](https://github.com/CS2103-AY1819S1-W17-4) team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Bernard Teo Zhi Yi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "image::btzy.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "{empty}[http://github.com/btzy[github]] [\u003c\u003cbtzy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "Responsibilities: Search, Filter, Tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Lin Si Jie"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "image::sijie123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "{empty}[http://github.com/sijie123[github]] [\u003c\u003csijie123#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "Responsibilities: Storage, Import/Export"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Nguyen Tien Trung Kien"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "image::kc97ble.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "{empty}[http://github.com/kc97ble[github]] [\u003c\u003ckc97ble#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "Responsibilities: CRUD, Recurring Tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Ranald Lam Yun Shao"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "image::ranaldmiao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "{empty}[http://github.com/ranaldmiao[github]] [\u003c\u003cranaldmiao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "Responsibilities: UI, Attach Files"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Sidhant Bansal"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "image::sidhant007.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "{empty}[http://github.com/sidhant007[github]] [\u003c\u003csidhant007#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "Responsibilities: Sort, Priority, UI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 33,
      "kc97ble": 1,
      "btzy": 19,
      "sijie123": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W17-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "btzy": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d Deadline Manager - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W17-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "By: `Team W17-4`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The Deadline Manager is an app to help users keep track of upcoming deadlines. It is targeted for students in NUS School of Computing, and has features dedicated to improve their workflow."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This *Developer Guide* help you get started with contributing to this open source project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This guide is written with the intention of providing relevant and useful information for new developers to quickly familiarise themselves with the structure of the project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If you already have some experience developing this project, this guide should serve as a handy reference for specific implementations of features."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Structure of this Developer Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "In \u003c\u003cSetting up, Section 2\u003e\u003e, this guide will first provide instructions on setting up your programming environment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003c\u003cDesign, Section 3\u003e\u003e and \u003c\u003cImplementation, Section 4\u003e\u003e will then describe the structure of the project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Finally, \u003c\u003cDocumentation, Section 5\u003e\u003e, \u003c\u003cTesting, Section 6\u003e\u003e and \u003c\u003cDev Ops, Section 7\u003e\u003e will detail documentation, testing and post-development procedures."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Development Team"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This project is developed by Team W17-4 based on the https://se-edu.github.io/index.html[original SE-EDU AddressBook Project]. For more information, please refer to our https://cs2103-ay1819s1-w17-4.github.io/main/AboutUs.html[About Us] guide."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This section of the developer guide will help you set up your programming environment to begin contributing to this project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The following software is required for building Deadline Manager."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Setting up the project on your computer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedTask.java[`XmlAdaptedTask.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Building and running the project"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Press the green `build` button on the top right corner of `IntelliJ` to build the project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Press F10, then select `MainApp` to run the project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijie123"
        },
        "content": "After you build for the first time, subsequently, the project can be run by pressing the green `play` button instead."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijie123"
        },
        "content": "To test that you have correctly imported the project,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". \u003c\u003cBuilding and running the project, Run\u003e\u003e the `seedu.address.MainApp` and ensure that the program launches successfully."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Run some sample commands and check that they do not cause any errors:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".. `help`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".. `list`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure that they all pass."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Before you start contributing to this project, ensure that you have configured your `IntelliJ` as follows to conform with our coding standards and project structure."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijie123"
        },
        "content": "After forking the repo, the documentation will still have the W17-4 team branding and refer to the `CS2103-AY1819S1-W17-4/deadlineManager` repo."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-W17-4/deadlineManager`), you should do the following:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This section aims to provide an overview of the structure behind Deadline Manager. For detailed implementation details on specific features, please refer to \u003c\u003cImplementation, Section 4\u003e\u003e instead."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This section (3.1) will give a brief overview on the components in Deadline Manager, as well as overview of design principles of the Deadline Manager. Sections \u003c\u003cMain, 3.2\u003e\u003e through \u003c\u003cStorage, 3.7\u003e\u003e below will give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The *_Architecture Diagram_* given above shows the high-level design of the Deadline Manager."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Components"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The Deadline Manager consists of two shared components and four core components."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Shared components:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `Main`: The entry point of the App."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `Commons`: A collection of classes used by the other components in the App."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Core components:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Each of the four core components"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven Design"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Note how the `Model` simply raises a `TaskCollectionChangedEvent` when the deadline manager data is changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Main"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sijie123"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* At app launch: initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* At shut down: detaching the components and invoking cleanup methods where necessary."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Commons"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Classes used by multiple components are placed in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `LogsCenter` : This class is used by components to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Figure 5 shows the class diagram of `UI`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `UI` consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All of these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `UI` component"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* Binds itself to some data in the `Model` so that it can automatically update when data in the `Model` changes."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Figure 6 above shows the class diagram of `Logic`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  `Logic` uses the `TaskCollectionParser` class to parse user commands."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task) and/or raise events."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sijie123"
        },
        "content": "As an example, given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  `Logic` uses the `TaskCollectionParser` class to parse the delete command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  This results in a `DeleteCommand` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  The command execution affects the `Model` by deleting a person."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Figure 8 shows the class diagram for `Model`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `Model`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* stores the deadline manager data."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sijie123"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `deadline manager`, which `Task` can reference. This would allow `deadline manager` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Figure 9 illustrates the class diagram of Storage."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `Storage` component"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* can save the deadline manager data in xml format and read it back."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* can export the last view in xml format and import it back."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* is event-based. Methods are executed by listening to events such as TaskCollectionChangedEvent."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Return data and errors are also passed back by firing events."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sijie123"
        },
        "content": "This section describes some noteworthy details on how major features are implemented."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "Working in progress."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTaskCollection`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sijie123"
        },
        "content": "It extends `TaskCollection` with an undo/redo history, stored internally as an `taskCollectionStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `VersionedTaskCollection#commit()` -- Saves the current deadline manager state in its history."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `VersionedTaskCollection#undo()` -- Restores the previous deadline manager state from its history."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `VersionedTaskCollection#redo()` -- Restores a previously undone deadline manager state from its history."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sijie123"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTaskCollection()`, `Model#undoTaskCollection()` and `Model#redoTaskCollection()` respectively."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTaskCollection` will be initialized with the initial deadline manager state, and the `currentStatePointer` pointing to that single deadline manager state."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in the deadline manager. The `delete` command calls `Model#commitTaskCollection()`, causing the modified state of the deadline manager after the `delete 5` command executes to be saved in the `taskCollectionStateList`, and the `currentStatePointer` is shifted to the newly inserted deadline manager state."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new task. The `add` command also calls `Model#commitTaskCollection()`, causing another modified deadline manager state to be saved into the `taskCollectionStateList`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTaskCollection()`, so the deadline manager state will not be saved into the `taskCollectionStateList`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTaskCollection()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous deadline manager state, and restores the deadline manager to that state."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial deadline manager state, then there are no previous deadline manager states to restore. The `undo` command uses `Model#canUndoTaskCollection()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoTaskCollection()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the deadline manager to that state."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If the `currentStatePointer` is at index `taskCollectionStateList.size() - 1`, pointing to the latest deadline manager state, then there are no undone deadline manager states to restore. The `redo` command uses `Model#canRedoTaskCollection()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the deadline manager, such as `list`, will usually not call `Model#commitTaskCollection()`, `Model#undoTaskCollection()` or `Model#redoTaskCollection()`. Thus, the `taskCollectionStateList` remains unchanged."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTaskCollection()`. Since the `currentStatePointer` is not pointing at the end of the `taskCollectionStateList`, all deadline manager states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire deadline manager."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of deadline manager states."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTaskCollection`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sijie123"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d Import and Export feature"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sijie123"
        },
        "content": "//\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The deadline supports import and export features. This feature uses 2 components: `Storage` and `Model`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of components"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Internally, `StorageManager` implements the following APIs from `ImportExportStorage` interface:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `importTaskCollection`:  Imports and returns a `TaskCollection` given a filename"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `exportTaskCollection`: Exports and writes to a file given a `TaskCollection`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Internally, it uses the same API as reading and saving the working taskCollection file."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sijie123"
        },
        "content": "However, additional checks are performed to ensure that the user does not inadvertently overwrite the current working file, or import and corrupt the current working file."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sijie123"
        },
        "content": "`StorageManager` only handles the I/O from file, and the data read and written is handled by `Model`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sijie123"
        },
        "content": "An ImportExportExceptionEvent is raised if I/O fails for any reason."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sijie123"
        },
        "content": "ModelManager implements the following APIs necessary for Import and Export:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `importTaskCollection`: Creates and posts a new import request event"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `exportTaskCollection`: Creates and posts a new export request event."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The request events are posted to the `EventCenter`, which will dispatch to all subscribed methods."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Inter-component communication"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sijie123"
        },
        "content": "To facilitate communication between the two components, the deadline manager uses the event-driven model."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sijie123"
        },
        "content": "An import or export request event is created by `ModelManager`, and a handler in `StorageManager` is invoked to handle the event."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sijie123"
        },
        "content": "After data has been successfully read or written, the response is placed in another event for `ModelManager` to process."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sijie123"
        },
        "content": "To achieve the above, `ModelManager` indicates an import/export request by creating these events:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `ImportRequestEvent`: Requests for a new import from file."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `ExportRequestEvent`: Requests to create a new export to file."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sijie123"
        },
        "content": "`ModelManager` implements these additional methods to handle the responses from `Storage`:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `handleImportDataAvailableEvent`: Processes the read task collection and merges tasks into the current collection."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `handleImportExportExceptionEvent`: Indicates internally that the last import/export request has failed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sijie123"
        },
        "content": "It is the responsibility of the `Model` to feedback to the user in the case of an exception."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Similarly, `StorageManager` returns the result of imports and errors with the following events:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `ImportExportExceptionEvent`: Indicates that an error has occurred with import or export."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `ImportDataAvailableEvent`: Indicates that the requested task collection has been read from disk."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sijie123"
        },
        "content": "`StorageManager` implements these additional methods to handle requests from `Model`:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `handleImportRequestEvent`: Processes an import event and reads from file."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `handleExportRequestEvent`: Processes an export event and writes to file."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Sequence Flow"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Given below is a sequence diagram illustrating the interactions between `Model` and `Storage` when exporting."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sijie123"
        },
        "content": "image::ExportSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 1. The user executes export to file `dataFile`. The export command calls ModelManager\u0027s `exportTaskCollection`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 2. The `ModelManager` posts the `ExportRequestEvent` to the `EventsCenter`."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 3. The `EventsCenter` will dispatch the `ExportRequestEvent` to `Storage`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 4. `Storage` will handle the `ExportRequestEvent` and write to file."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Given below is a sequence diagram illustrating the interactions between `Model` and `Storage` when importing."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sijie123"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 1. The user executes import from file `dataFile`. The import command calls ModelManager\u0027s `importTaskCollection`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 2. The `ModelManager` posts the `ImportRequestEvent` to the `EventsCenter`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 3. The `EventsCenter` will dispatch the `ImportRequestEvent` to `Storage`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 4. `Storage` will handle the `ImportRequestEvent`, read from file, then post a new `ImportDataAvailableEvent` to `EventsCenter` to signal that data is available."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 5. The `EventsCenter` will dispatch the `ImportDataAvailableEvent` back to `ModelManager`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Step 6. `ModelManager` will take the imported data and de-conflict the merged entries."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Import Conflict Resolver"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sijie123"
        },
        "content": "An imported task is deemed conflicting with an existing task if the two tasks compare `equal` with the internal implementation of Task\u0027s `equal` method."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If the user attempts to import a new task that conflicts with an existing task, the task needs to be de-conflicted with one of the following resolver:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `IgnoreResolver`: Discards the incoming task in favour of the existing task."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `OverwriteResolver`: Updates the existing task to reflect the values of the incoming task."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `DuplicateResolver`: Keep both copies."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The user can specify the deconflict algorithm with flags. By default, the `IgnoreResolver` is used."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Communication between `Model` and `Storage`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Both the `Model` and the `Storage` components are required for import/export. However, they are separate components, and we need to establish a method of communication between the two components."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* **Alternative 1 (current choice):** `Model` is maintained as being separate from `Storage`. The event-based style is used: an Import/Export event is created to signal a request, and another Import/Export event is created to signal that the data is ready."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Pros: `Storage` is decoupled from `Model`, i.e. changes to `Model` will not affect changes to `Storage`, and vice versa. This is a good OOP practice."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Cons: It is more difficult to implement and more overhead is incurred in passing data around. Calls are not immediate, and there is no way to immediately tell whether an execution succeeded or failed."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* **Alternative 2:** Model executes an import/export method in Storage directly."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Pros: The data from the import/export request can be retrieved immediately and easily."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Cons: `Model` is more tightly coupled with `Storage`, i.e. `Model` and `Storage` will no longer be separate components, but will instead know the inner workings of each other."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to resolve import conflicts"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sijie123"
        },
        "content": "As described in \u003c\u003cImport Deconflict, Import Deconflict\u003e\u003e, an import conflict arises when the user attempts to import tasks that already exist in Deadline Manager. We need an import conflict resolver to determine how to deal with these tasks."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* **Alternative 1 (current choice):** An `ImportConflictResolver` class is implemented to resolve import conflicts. The user specifies which resolver algorithm to use, and the corresponding `{Method}ImportConflictResolver` object is created to resolve import conflicts."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Pros: This provides more flexibility for user to define how to resolve imports. Additionally, this is better Software Engineering practice as it follows the Single Responsibility Principle: the `ImportConflictResolver` object is responsible only for its own algorithm."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Cons: It is more difficult to implement an entirely separate `ImportConflictResolver` class, complete with separate sub-classes for different algorithms."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* **Alternative 2:** Use an `enum` to implement ImportConflictResolver. The `ImportConflictResolver` enum provides a pre-defined selection of algorithms that the user can specify."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Pros: There is no need to implement separate classes. Since the `ImportConflictResolver` enum is only useful within Model, it reside within Model as a private variable."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Cons: If/else statements are required to determine which algorithm should be used. Additionally, an `ImportConflictResolver` implemented this way cannot be easily reused or extended."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sijie123"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The sort command enables the user to sort the tasks currently being shown according to user defined custom comparator."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "It is made up of two main components - `SortCommandParser` and `SortCommand`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The sort command is facilitated by `VersionedTaskCollection`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The sort command exposes the operation `updateSortedTaskList` to sort the task list."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "It is the responsibility of `SortCommandParser` to parse the user input into a comparator which can compare between two tasks."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Then the comparator is passed onto the `SortCommand` which sorts the `versionedTaskCollection` according to the comparator."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "A `NullPointerException` is raised in case the `SortCommand` receives a `null` comparator."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Flow"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Given below is a sequence of steps, illustrating the interaction between `SortCommandParser`, `SortCommand` and `ModelManager`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Step 1. The user executes the sort command with a comparator typed by user."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Step 2. The `SortCommandParser` receives the command with the user comparator given as a string."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Step 3. The `SortCommandParser` parses the string into a valid comparator and calls the `SortCommand` with this comparator provided."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Step 4. The `SortCommand` calls the `updateSortedTaskList` API method of `ModelManager`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Step 5. The method `updateSortedTaskList` sorts the `versionTaskCollection` using JavaFx sort method"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which Task List to Sort"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* **Alternative 1 (current choice):** The entire `versionedTaskList` is sorted using JavaFx inbuilt sort method"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** Cons: May have performance issues in terms of slow running."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* **Alternative 2:** The sorting is done ONLY on the viewable `filteredTasks` list."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** Pros: Will be more efficient in terms of time complexity."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** Cons: Requires significant changes to the codebase since sorting the `filteredTasks` requires it to be modifiable."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "btzy"
        },
        "content": "// tag::extendedfilter[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "btzy"
        },
        "content": "The deadline manager supports a very expressive filtering system.  The filtering system can be utilized with the `filter` command."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "btzy"
        },
        "content": "The filtering system is designed with two primary goals:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Expressiveness: Complex ways of filtering tasks can be expressed in the command format and be understood by the program."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Terseness: The amount of user input required to express a filter is as little as possible."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "btzy"
        },
        "content": "When a user invokes the `filter` command (e.g. `filter t:CS2101 \u0026 n:Assignment`), the following steps are taken by the program:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "btzy"
        },
        "content": "1. Extract the text describing the filter operation (e.g. `t:CS2101 \u0026 n:Assignment`)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "btzy"
        },
        "content": "2. Parse the text describing the filter operation into a predicate (i.e. `Predicate\u003cTask\u003e`)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "btzy"
        },
        "content": "3. Apply the predicate on the model (this simply calls `Model#updateFilteredPersonList()`, which internally leverages on JavaFX\u0027s `FilteredList` class to provide filtering by predicate)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "btzy"
        },
        "content": "Step 1 is performed by the `AddressBookParser` class, and no special actions need to be taken by the filtering system."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "btzy"
        },
        "content": "Step 3 is performed by the `FilterCommand` class.  It is a simple operation that simply delegates the task to `Model#updateFilteredPersonList()`."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "btzy"
        },
        "content": "The overwhelming majority of code for the filtering system comes from step 2, which is performed by the `FilterCommandParser` class.  The ability to parse complex filter descriptions into usable predicates forms the core of the filtering feature, and this ability makes the filtering system very flexible."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "btzy"
        },
        "content": "In the rest of this guide that describes the filtering system, we use the term _filter expression_ to refer to the full filter operation that the user typed (e.g. `t:CS2101 \u0026 n:Assignment`, or even `t:CS2101 \u0026 ( n:Assignment | n:Homework) \u0026 p\u003c3`), and the term _filter unit_ to refer to substrings of the filter expression that represent single indivisible predicates (e.g. `t:CS2101`, or `n:Homework`)."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "btzy"
        },
        "content": "There are three components to parsing the filter operation:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "btzy"
        },
        "content": "1. A boolean expression parser that understands the high-level syntax of the filter expression and digests the filter expression into filter units"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "btzy"
        },
        "content": "2. A parser that splits each filter unit (e.g. `t:CS2101`) into its three constituent parts (e.g. `t`, `:`, `CS2101`) -- this is the lambda expression in the sequence diagram below, which resides in the `FilterCommandParser` class"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "btzy"
        },
        "content": "3. A method for each field (e.g. `Name`, `Deadline`, `Priority`, `Set\u003cTag\u003e`) that interprets the parts from the previous part in the context of that particular field, and returns the predicate that is required  -- this is referred to as the _field-specific parser_, and is implemented as a static method in each filterable field"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "btzy"
        },
        "content": "A general string tokenizer (this is the `StringTokenizer` class in the `parser` subdirectory) is shared by parts 1 and 2 to split the filter expression into tokens."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "btzy"
        },
        "content": "image::FilterOperationSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "btzy"
        },
        "content": "The above diagram shows the simplified sequence of operations to parse a filter expression into a predicate.  Take note of the following simplifications in the sequence diagram above:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "btzy"
        },
        "content": "* \"Field\" represents any filterable field -- `Name`, `Deadline`, `Priority`, or `Tag`.  For tags, filtering is more complicated as there can be any number of tags on a task, but the above sequence diagram still gives a rough idea of how parsing works."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Strictly speaking, the \"loop\" is not actually a loop.  As the boolean expression parser parses the filter expression, it invokes the lambda expression whenever a filter unit is encountered.  For simplicity, the sequence diagram above hides the complexity within the boolean expression parser."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "btzy"
        },
        "content": "The sections below describe the string tokenizer and the aforementioned three compoments in more detail."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d String tokenizer"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "btzy"
        },
        "content": "This is represented by the class `seedu.address.logic.parser.StringTokenizer`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "btzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "btzy"
        },
        "content": "This class is not to be confused with `java.util.StringTokenizer`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "btzy"
        },
        "content": "This class is initialized with the whole filter expression, and can be queried for a token multiple times -- each query consumes and returns the next available token, in a similar way to `java.util.Scanner`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "btzy"
        },
        "content": "There are two ways to consume tokens using the string tokenizer:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Consume a text string.  This is used for consuming tokens that are intended to be textual (e.g. `t`, `CS2101`).  Consumption of text strings is quote-aware -- if the text string is quoted using single or double quotes, the text string would be consumed as a single token, even if it contains spaces or special characters.  This is useful when the user wants to search for a name that contains those characters."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Consume a token by a regular expression.  This is used for consuming symbolic tokens (e.g. `:`, `|`, `\u0026`, `(`)."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "btzy"
        },
        "content": "When unambiguous, adjacent tokens need not be separated by whitespace.  This is usually the case when consuming a token specified by a regular expression."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "btzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "btzy"
        },
        "content": "The string tokenizer class is also used to parse comma-separated tag expressions."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d Boolean expression parser"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "btzy"
        },
        "content": "This is represented by the class `seedu.address.logic.parser.BooleanExpressionParser\u003cT\u003e`, and it is a general boolean expression parser that is designed to be unaware of the syntax of individual filter units."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "btzy"
        },
        "content": "The following operators are recognized (highest precedence first):"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `!`: Logical negation (NOT) of two predicates"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `\u0026` or `\u0026\u0026`: Logical conjunction (AND) of two predicates"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `|` or `||`: Logical disjunction (OR) of two predicates"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "btzy"
        },
        "content": "Parentheses (`(` and `)`) are also recognized and respected, and they may be nested to arbitrary depth."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "btzy"
        },
        "content": "The boolean expression parser uses the link:https://en.wikipedia.org/wiki/Shunting-yard_algorithm[shunting yard algorithm] to provide precedence-respecting parsing of the filter expression."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "btzy"
        },
        "content": "The boolean expression parser functions as follows:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "btzy"
        },
        "content": "1. The boolean expression parser is constructed with the filter expression, and it constructs a `StringTokenizer` instance from the given filter expression."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "btzy"
        },
        "content": "2. When the start of an operand (i.e. filter unit) is encountered, it hands over the `StringTokenizer` instance to the filter unit parser (this is defined in the `FilterCommandParser` class).  The filter unit parser determines the field name, and then uses the field-specific parser to construct the predicate (i.e. `Predicate\u003cTask\u003e` instance) that the filter unit represents.  This predicate is returned to the boolean expression parser."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "btzy"
        },
        "content": "Application of operators (i.e. `!`, `\u0026`, `|`) is done by the boolean expression parser itself (i.e. without delegating the work to other classes)."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d Filter unit parser"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "btzy"
        },
        "content": "The filter unit parser is written as a lambda expression inside the `FilterCommandParser` class.  There are two reasons for this:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "btzy"
        },
        "content": "* The filter unit parser parses syntax that is specific to filters only, and it cannot be easily adapted for other uses."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "btzy"
        },
        "content": "* It frees both the boolean expression parser and the field-specific parser from having to depend on the `FilterCommandParser` class."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "btzy"
        },
        "content": "The following diagram describes the syntax of a filter unit:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "btzy"
        },
        "content": "image::FilterUnitDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "btzy"
        },
        "content": "As shown in the diagram above, a filter unit consists of three parts:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "btzy"
        },
        "content": "1. The field identifier, which identifies the field (e.g. name or deadline) that is being filtered on"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "btzy"
        },
        "content": "2. The test phrase, which represents the value or keyword that tasks are being compared to"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "btzy"
        },
        "content": "3. The filter operator, which describes the how the identified field is compared to the test phrase (more details below)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "btzy"
        },
        "content": "These three parts are described in the following sections."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Field identifier"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "btzy"
        },
        "content": "There are four filterable fields in a task, and each of these fields correspond to one or more field identifiers:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `n` or `name` -- the name of the task"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `d`, `due` or `deadline` -- the deadline (i.e. due date) of the task"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `p` or `priority` -- the priority of the task"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `t` or `tag` -- the set of tags associated with the task"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "btzy"
        },
        "content": "Field identifiers that correspond to the same field are equivalent."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Test phrase"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "btzy"
        },
        "content": "This is the value or keyword that tasks are compared to, and the syntax of this field depends on the field identifier of this filter unit."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "btzy"
        },
        "content": "The following is the required syntax for each filterable field:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Name: Any text string"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Deadline: Any date in the form `DD/MM/YYYY`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Priority: Any valid priority value (i.e. any integer between 0 and 4 inclusive)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Tag set: Any comma-separated list of tags, where each tag can be any text string (e.g. `CS2101,CS2103T`)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "btzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "btzy"
        },
        "content": "The rules for quoted strings for the string tokenizer applies here as well, because the same string tokenizer is used here."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "btzy"
        },
        "content": "Tags that contain spaces may be specified by placing quotes around those tags.  This means that the whole test phrase must also be quoted with a different type of quote (e.g. `t:\"CS2101,CS2103T,\u0027Oral Presentation\u0027\"`)."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Filter operator"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "btzy"
        },
        "content": "The filter operator specifies exactly _how_ the task should be compared to the test phrase."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "btzy"
        },
        "content": "For fields that are intrinsically ordered (i.e. deadline and priority), the `\u003c`, `\u003d`, and `\u003e` operators have their usual mathematical meaning, except that the operators `\u003c` and `\u003e` are non-strict.  This means that `p\u003e2` will return a superset of the tasks returned by `p\u003d2`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "btzy"
        },
        "content": "For textual fields (i.e. name), the `\u003c`, `\u003d`, `\u003e` operators represent _substring_, _equivalence_, and _superstring_ relations respectively."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "btzy"
        },
        "content": "For set-based fields (i.e. tags), the `\u003c`, `\u003d`, `\u003e` operators represent _subset_, _equivalence_, and _superset_ relations respectively.  Individual tags are compared for equivalence, so it is currently not possible to filter by a substring of a tag."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "btzy"
        },
        "content": "As most users do not usually require such fine-grained control over the filter operator, the `:` operator, known as the _convenience_ operator, is provided as well.  The convenience operator is an alias for one of the other filter operators, and the choice of filter operator depends on the field identifier.  For each field, the filter operator that is expected to be most commonly used is chosen as the target for the convenience operator."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "btzy"
        },
        "content": "The following list shows what the convenience operator means, in the context of each field:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Name: `:` is an alias for `\u003e`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Deadline: `:` is an alias for `\u003c`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Priority: `:` is an alias for `\u003e`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Tag set: `:` is an alias for `\u003e`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d Field-specific parser"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "btzy"
        },
        "content": "As field-specific parsers have to be implemented differently for each filterable field, the design choice was made to place each field-specific parser in its respective field class.  More precisely, each field-specific parser is implemented as a static method in its field class."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "btzy"
        },
        "content": "When each filter unit is parsed, it invokes the field-specific parser for the given field identifier.  The field-specific parser then creates and returns a predicate from the given filter operator and test phrase."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "btzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Parsing of composite filter expressions"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "btzy"
        },
        "content": "* **Alternative 1 (current choice):** Use an algorithm that can parse arbitrarily complex expressions (i.e. the https://en.wikipedia.org/wiki/Shunting-yard_algorithm[shunting yard algorithm])."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "btzy"
        },
        "content": "** Pros: Provides full flexibility in specifying composite filters."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "btzy"
        },
        "content": "** Cons: Difficult to implement."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "btzy"
        },
        "content": "* **Alternative 2:** Use a more restrictive parsing algorithm that prohibits parentheses and does not take operator precedence into consideration."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "btzy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "btzy"
        },
        "content": "** Cons: Filter command will be limited in expressiveness.  As the order of operations do not follow usual programming languages or mathematical expressions, users need to spend more time to understand the parsing format before use, and they might use the command erroneously."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "// tag::attachments[]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Attachment feature"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "The attachment feature aims to help users organise and keep track of important files needed for the respective tasks. It allows users to associate files in their computer with a particular task. When the user decides to perform the task, this feature provides functionality to identify previously associated files and export it to an appropriate location."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "The attachment feature is mainly implemented by `AttachmentCommand`. As `AttachmentCommand` is an all-purpose command that allows users to perform numerous actions related to attachments, a nested abstract class `AttachmentAction` is defined within `AttachmentCommand`. There are 4 classes that extend `AttachmentAction` in order to implement the various actions of the attachment feature. The command line arguments for the attachment command is parsed by `AttachmentCommandParser`."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Flow"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Given below is a sequence of steps, illustrating the interaction between `AttachmentCommandParser`, `AttachmentCommand` and classes that implement `AttachmentAction` after a user enters a relevant command."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 1. The user enters an attachment command which involves either `add`, `list`, `delete` or `get`."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 2. The `AttachmentCommandParser` receives the command with the arguments given as a string."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 3. The `AttachmentCommandParser` interprets the arguments and constructs either a `AddAttachmentAction` for `add`, `ListAttachmentAction` for `list`, `DeleteAttachmentAction` for `delete` or `GetAttachmentAction` for `get`. The relevant arguments will also be passed as parameters to the constructors of these classes. Do note that these classes all extends from the abstract class `AttachmentAction`."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 4. An `AttachmentCommand` is constructed and initialized with the `AttachmentAction` constructed in Step 3."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Given below is another sequence of steps, illustrating the interaction between `AttachmentCommand` and classes that implement `AttachmentAction` when the `AttachmentCommand#execute` method is invoked by the `LogicManager`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 1. The task identified by the user is retrieved from the `Model`."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 2. The `perform` method of the `AttachmentAction` is invoked, with the task retrieved in Step 1 as the parameter."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 3. The `Model` is updated with the `Task` object returned by the `perform` method in Step 2."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Step 4. The `resultMessage` method of `AttachmentAction` is invoked. The returned value is used to construct a `CommandResult` object and returned to the `LogicManager`."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d AttachmentAction and implementing classes"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "`AttachmentAction` is an abstract static class nested within `AttachmentCommand`. It defines the following 2 APIs:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `public abstract Task perform(Task taskToEdit)` This method is invoked by `AttachmentCommand` to perform the action on the task provided. Since `Task` is immutable, a new task with the modified values should be returned by the method. Implementing classes would need to implement this method with the logic for the respective actions."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*  `public String resultMessage()` This method will be invoked by `AttachmentCommand` to retrieve the response message after a call to `perform`. It would be good for implementing classes to override the default implementation to provide a more customized response message."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d AddAttachmentAction"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "`AddAttachmentAction` implements `AttachmentAction` and provides the implementations required for the user to associate a file with a task. In other words, it adds an attachment to a task. The constructor class takes in a single parameter, `filePath`, denoting the path to the file to be associated with the task. The `perform` method of `AddAttachmentAction` executes the following:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Checks if a file exists at the specified `filePath`. A `CommandException` will be raised if this is not the case."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Checks if the task already contains an attachment with the same filename. A `CommandException` will be raised if this is not the case."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Constructs a new `Attachment` object using the file at the specified `filePath`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Constructs a new `Task` object with the same attributes as the original task, but with the additional `Attachment` object added to the set of attachments."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d ListAttachmentAction"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "`ListAttachmentAction` implements `AttachmentAction` and provides the implementations required for the user to list all the files associated with a task. In other words, it provides a listing of all attachments that are added to the task. The constructor class requries no parameters. The `perform` method of `ListAttachmentAction` executes the following:"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Prints the total number of attachments in the specified task."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Prints the filename of each of the attachments in the specified task, with one attachment per line."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d DeleteAttachmentAction"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "`DeleteAttachmentAction` implements `AttachmentAction` and provides the implementations required for the user to unassociate a file that was previously associated with the task as attachment. In other words, it removes an attachment from a task. The constructor class takes in a single parameter, `fileName`, denoting the name of the attachment that is to be unassociated with the task. The `perform` method of `DeleteAttachmentAction` executes the following:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Checks if `fileName` corresponds to a valid attachment in the specified task. A  `CommandException` will be raised if this is not the case. The `fileName` is case senstitive."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Constructs a new `Task` object with the same attributes as the original task, but with the `Attachment` object identified by the `fileName` removed from the set of attachments."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d GetAttachmentAction"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "`GetAttachmentAction` implements `AttachmentAction` and provides the implementations required for the user to retrieve a file that was previously associated with the task as attachment. In other words, it allows users to copy an attachment from a task out to the file system. The constructor class takes in two parameters, `filename`, denoting the name of the attachment and `savePath`, denoting the path to copy the attachment to. The `perform` method of `GetAttachmentAction` executes the following:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Checks if `fileName` corresponds to a valid attachment in the specified task. A  `CommandException` will be raised if this is not the case. The `fileName` is case senstitive."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Checks if the attachment identified by `fileName` still exists on the user\u0027s filesystem. A `CommandException` will be raised if this is not the case."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Copies the attachment from where it was previously associated to `savePath` on the filesystem."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to associate files to tasks"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 1 (current choice):** Saves the path to the file."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Pros: Easy to implement. Reduces storage footprint."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Cons: Associated file can cease to exist, due to it being renamed, moved or deleted."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 2:** Copies the entire file to a user specified directory."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Pros: Deletion of the associated file (in its original location) will not affect the application."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Cons: Harder to implement file management system on the file system. Uses more storage space. User will not be able to update the attachment without deleting and re-adding the file."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to identify attachments within a task"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 1 (current choice):** Use the file name as an identifier."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Pros: More user friendly as there is less words to type."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Cons: Cannot have more than one attachment with the same file name in the same task. For example: `folder1/Template.docx` and `folder2/Template.docx` cannot be simultaneously added as attachments to the same task."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **Alternative 2:** Use the path to the file as an identifier."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Pros: Allows for more than one attachments with the same file name to be associated with the same task. For example: `folder1/Template.docx` and `folder2/Template.docx` can be added to the same task as attachments."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Cons: Cumbersome for the user to type the full path to identify the file."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "// end::eattachments[]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d [Proposed] Snooze tasks"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "sijie123"
        },
        "content": "_{This section is a work-in-progress. Snooze will only be implemented in v2.0 and this section will be updated in due time.}_"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "sijie123"
        },
        "content": "The Deadline Manager uses `java.util.logging` for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Asciidoc is used to write documentation. It is imperative that the documentation is updated as new features are implemented so that developers are aware of the changes made."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Testing is important to the development of this project as it gives the developers and users assurance that the App will function as intended."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "sijie123"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Sometimes, you would encounter problems with testing, and certain tests may fail with unexpected exceptions."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "sijie123"
        },
        "content": "An example is illustrated below:"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sijie123"
        },
        "content": "As we develop the app, some tasks are repeated very often. These tasks can be better done if we utilise Dev Ops, to automatically process these repetitive tasks."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "A project often depends on third-party libraries. For example, deadline manager depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all tasks in the list."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/TaskCollectionParser.java[`TaskCollectionParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/TaskCollectionParser.java[`TaskCollectionParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the deadline manager, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the deadline manager."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/TaskCollection.java[`TaskCollection`] API need to be updated."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "sijie123"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/TaskCollection.java[`TaskCollection`] and link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/TaskCollection.java[`TaskCollection`] allows you to update a task, and link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`] allows you to update the tags."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/TaskCollection.java[`TaskCollection`]. Loop through each task, and remove the `tag` from each task."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `TaskCollection#removeTag(Tag)`."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your deadline manager application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last task in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Use different colors for different tags inside task cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/TaskCard.java[the `TaskCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** You can modify the existing test methods for `TaskCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "sijie123"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/TaskCollectionSystemTest.java[`TaskCollectionSystemTest#assertCommandBoxShowsDefaultStyle() and TaskCollectionSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the deadline manager."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the deadline manager is updated."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of tasks when the application just started."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleTaskCollectionChangedEvent(TaskCollectionChangedEvent)`] to update the number of tasks whenever there are new changes to the taskCollection."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/TaskCollectionSystemTest.java[`TaskCollectionSystemTest`] to also verify the new total number of tasks status bar."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the deadline manager to the cloud. However, the current implementation of the application constantly saves the deadline manager after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the deadline manager storage."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add a new method `backupTaskCollection(ReadOnlyTaskCollection)`, so that the deadline manager can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/TaskCollectionStorage.java[`TaskCollectionStorage`] interface."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlTaskCollectionStorage.java[`XmlTaskCollectionStorage`] class."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "sijie123"
        },
        "content": "*Scenario:* You are a software maintainer for `taskCollection`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits the remark for a task specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits the remark for the first task to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Removes the remark for the first task."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/TaskCollectionParser.java[`TaskCollectionParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/TaskCollectionParserTest.java[`TaskCollectionParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/TaskCollectionParser.java[`TaskCollectionParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/TaskCollectionParserTest.java[`TaskCollectionParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `TaskCard`"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`] s to display a remark for each task later."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/TaskListCard.fxml[`TaskListCard.fxml`]."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/TaskCardHandle.java[`TaskCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "sijie123"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/task/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Task` to support a `Remark` field"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the task will be created without a remark)."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `taskCollection.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedTask` class"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "sijie123"
        },
        "content": "We now have `Remark` s for `Task` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedTask.java[`XmlAdaptedTask`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Fix `invalidAndValidTaskTaskCollection.xml`, `typicalTaskCollection.xml`, `validTaskCollection.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `TaskBuilder`"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Since `Task` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/TaskBuilder.java[`TaskBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/TaskBuilder.java[`TaskBuilder`]. This method will create a new `Remark` for the task that it is currently building."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Try and use the method on any sample `Task` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalTasks.java[`TypicalTasks`]."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "sijie123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `TaskCard`"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`]\u0027s constructor to bind the `Remark` field to the `Task` \u0027s remark."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "sijie123"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysTask(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a task."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "|`* * *` |user |add a new task |"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "|`* * *` |user |delete a task |remove entries that I no longer need"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "|`* * *` |user |find a task by name |locate details of tasks without having to go through the entire list"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "|`*` |user with many tasks in the deadline manager |sort tasks by name |locate a task easily"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "sijie123"
        },
        "content": "(For all use cases below, the *System* is the `TaskCollection` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Use case: Delete task"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "1.  User requests to list tasks"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "sijie123"
        },
        "content": "2.  TaskCollection shows a list of tasks"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "3.  User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "sijie123"
        },
        "content": "4.  TaskCollection deletes the task"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "sijie123"
        },
        "content": "** 3a1. TaskCollection shows an error message."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 120,
      "sidhant007": 46,
      "-": 829,
      "kc97ble": 5,
      "sijie123": 306,
      "btzy": 166
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d Deadline Manager - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W17-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "By: \u003c\u003cAboutUs#, CS2103-AY1819S1-W17-4\u003e\u003e      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Morphed from: https://github.com/nus-cs2103-AY1819S1/addressbook-level4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deadline Manager (DLM) is for those who *prefer to use a desktop app for keeping track of tasks*. More importantly, DLM is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, DLM can help you sort out your upcoming tasks faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The steps to quickly get started with the project are as follows -"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ".  Install Java version `9` or later on your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your deadline manager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *`list`* : lists all tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **`add`**`n/v1.1 milestone d/2/10/2018 t/CS2103T p/1` : adds a task named `v1.1 milestone` to the deadline manager."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* **`delete`**`3` : deletes the 3rd task shown in the current list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Assignment 2`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Assignment 2 t/CS3230` or as `n/Assignment 2`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/CS2103`, `t/CS2103 t/Project` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME d/DEADLINE`, `d/DEADLINE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Help will list the available functions for the user to use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds a task to the deadline manager +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "Format: `add n/NAME d/DEADLINE [P/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `DEADLINE` should be a date in the format DD/MM/YYYY. Examples of valid dates are: 29/03/2018, 29/3/2018, 1/1/2018."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "* `PRIORITY` should only be 0, 1, 2, 3, or 4. The lower the number, the higher the priority of the task. (1 \u003d Highest Priority, 4 \u003d Lowest Priority)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "You can have two tasks with the same attributes!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `add n/Assignment 2 d/1/1/2018 p/1` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds a task with name `Assignment 2` with a deadline on 1st January 2018 with priority 1 (highest priority)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `add n/v1.1 milestone d/9/10/2018 t/CS2103T t/Project p/2` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds a task with name `v1.1 milestone` with a deadline on 9th October 2018 with priority 2 (second highest priority). It is additionally tagged with 2 tags: `CS2103T` and `Project`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Kien"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Adding a recurring task : `addr`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds a recurring task to the deadline manager. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `addr n/NAME d/DEADLINE p/PRIORITY f/FREQUENCY [t/TAG]...`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `DEADLINE` should be the first time that this task should trigger. It should be a date in the format DD/MM/YYYY. Examples of valid dates are: 29/03/2018, 29/3/2018, 1/1/2018."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `FREQUENCY` (in number of days), should be how frequently the task should recur."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "* `PRIORITY` should only be 0, 1, 2, 3, or 4. The lower the number, the higher the priority of the task. (1 \u003d Highest Priority, 4 \u003d Lowest Priority)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `add n/CS2103T Tutorials d/8/9/2018 p/3 f/7 t/CS2103T` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds a recurring task named `CS2103T Tutorials` with the first occurrence in 8th September 2018 and repeats every 7 days. The task is also labelled with priority 3 (second lowest) and tagged with `CS2103T`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Shows a list of all tasks in the deadline manager. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Editing a task : `edit`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits an existing task in the deadline manager. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `edit INDEX [n/NAME] [d/DEADLINE] [p/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* When editing tags, the existing tags of the task will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* You can remove all the task\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* The range of possible values for each argument of the edit command follows that of the add command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `edit 1 d/3/10/2018` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits the deadline of the 1st task to 3rd October 2018."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `edit 2 n/v1.2 Milestone t/` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits the name of the 2nd task to be `v1.2 Milestone` and clears all existing tags."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `edit 1 p/1` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Edits the priority of the 1st task to 1 (highest priority)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Locating tasks by name: `find`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Bernard to update?"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Finds tasks whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `find Assignment` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Returns `assignment` and `Assignment 3`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `find CS2103T Assignment 3` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Returns any task having names `CS2103T`, `assignment`, or `3`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Filtering a list of tasks: `filter`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btzy"
        },
        "content": "Filters the current list of tasks with a specified filter expression. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btzy"
        },
        "content": "Format: `filter FILTER_EXPRESSION`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btzy"
        },
        "content": "When this command is used, Deadline Manager will display only those tasks which satisfies the given filter expression. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btzy"
        },
        "content": "Filter predicates are the core of the `filter` command.  Each filter predicate specifies a particular attribute (e.g. deadline, priority) and a value to test this attribute against (e.g. deadline being earlier than 1/10/2018).  Filter predicates are regarded as \"indivisible\". +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "// TODO: What does it mean by indivisible ?"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btzy"
        },
        "content": "Filter expressions are composed from some number of filter predicates, and the `filter` command is designed to accept arbitrarily complex filter expressions that can be composed from any number of filter predicates. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btzy"
        },
        "content": "The format for `FILTER_EXPRESSION` is defined recursively in the following paragraphs."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btzy"
        },
        "content": "`FILTER_EXPRESSION` is a string in the following format:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `FILTER_PREDICATE` -- This filter expression contains a single filter predicate"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `FILTER_EXPRESSION \u0026 FILTER_EXPRESSION` -- This filter expression is a logical conjunction (i.e. AND) of two other filter expressions.  The operator `\u0026` may be substituted with `\u0026\u0026`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `FILTER_EXPRESSION | FILTER_EXPRESSION` -- This filter expression is a logical disjunction (i.e. OR) of two other filter expressions.  The operator `|` may be substituted with `||`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `! FILTER_EXPRESSION` -- This filter expression is a logical negation (i.e. NOT) of two other filter expressions."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `( FILTER_EXPRESSION )` -- This filter expression is surrounded by parentheses."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btzy"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "btzy"
        },
        "content": "Parentheses are used for finer control the order that filter expressions are combined.  By default, `!` has highest precedence (i.e. `!` is applied first), followed by `\u0026`, then followed by `|`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btzy"
        },
        "content": "When it is unambiguous, whitespace between the operators and filter expressions may be omitted."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btzy"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btzy"
        },
        "content": "`FILTER_PREDICATE` is a string in the following format-: `\u003ckey\u003e\u003coperator\u003e\u003cphrase\u003e`:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* where `key` is an alphanumeric string that describes the attribute being compared. Example - `priority`, `tag` and `name`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btzy"
        },
        "content": "* where `operator` is one of `:`, `\u003d`, `\u003c`, `\u003e`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btzy"
        },
        "content": "* where `phrase` is a string that describes what to search (this is called the search phrase)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btzy"
        },
        "content": "The operator `:` is known as the *convenience* operator -- it is an alias for the operator that intuitively does what you expect for the given `key`.  More details are given below."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btzy"
        },
        "content": "The `\u003c` and `\u003e` operators are non-strict: Every task that will be shown using `\u003d` will also be shown using `\u003c` or `\u003e`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "btzy"
        },
        "content": "In general, both `key` and `phrase` do not need to be placed in quotes.  However, if whitespace or special chracters (i.e. those that have a meaning for compositing filter expressions) are part of `phrase`, then `phrase` must be in quotes (either single or double quotes will work, but the opening and closing quotes must be of the same type)."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btzy"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btzy"
        },
        "content": "Meaning of the operators for each valid key:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btzy"
        },
        "content": "* When `key` is `n` or `name`, the task name is compared.  Comparision is case-insensitive.  The operator `\u003e` tests if the search phrase is contained within the task name.  The operator `\u003c` tests if the task name is contained within the search phrase.  The operator `\u003d` tests if the search phrase is exactly the same as the task name.  The convenience operator is an alias for `\u003e`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btzy"
        },
        "content": "* When `key` is `d` or `due`, the task\u0027s due date is compared, and the search phrase is interpreted as a date.  Dates must be in `d/m/y` format.  The operator `\u003e` tests if the task\u0027s due date is on or after the specified due date.  The operator `\u003c` tests if the task\u0027s due date is on or before the specified due date.  The operator `\u003d` tests if the task\u0027s due date is exactly equal to the specified due date.  The convenience operator is an alias for `\u003c`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btzy"
        },
        "content": "* When `key` is `p` or `priority`, the task\u0027s priority is compared, and the search phrase is interpreted as an integer, representing the priority to be searched.  A priority of zero matches all the tasks with no priority set.  The operator `\u003e` tests if the task has priority at most as high as the specified priority.  The operator `\u003c` tests if the task has priority at least as high as the specified priority.  The operator `\u003d` tests if the task\u0027s priority is exactly equal to the specified priority.  The convenience operator is an alias for `\u003c`.  Note that priority 1 is the highest priority, and priority 4 is the lowest priority."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btzy"
        },
        "content": "* When `key` is `t` or `tag`, the task\u0027s tags are compared, and the search phrase is interpreted as a (unordered) set of tags.  Multiple tags are separated by commas (see examples below).  The operator `\u003e` tests if every tag of the given task is contained in the specified set of tags.  The operator `\u003c` tests if the every specified tag is present for the given task.  The operator `\u003d` tests if the set of tags for the given task is exactly the same as the set of specified tags.  The convenience operator is an alias for `\u003c`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btzy"
        },
        "content": "* Any other `key` will cause Deadline Manager to produce an error."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter due\u003c1/10/2018`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that have deadlines on or before 1st October 2018."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "// TODO: define a subset in glossary"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter d\u003d1/10/2018`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that have deadlines equal to 1st October 2018."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter d:1/10/2018`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that have deadlines on or before 1st October 2018."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter name:Alex`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that have a name that contains \"Alex\"."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter name:\"Alex Tan\"`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that have a name that contains \"Alex Tan\"."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter p\u003d1`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Returns a subset of the current list of tasks that have priority \u003d 1 (highest priority)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter p\u003c3`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Returns a subset of the current list of tasks that have priority \u003c 3. (Highest priority or second highest priority.)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter t:CS2103T`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that has the tag \"CS2103T\"."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "btzy"
        },
        "content": "* `filter t:CS2103T,CS2101`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "btzy"
        },
        "content": "Returns a subset of the current list of tasks that has both the tags \"CS2103T\" and \"CS2101\"."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Sidhant"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d\u003d Sorting a list of tasks : `sort`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Sorts the lists of all the tasks which the user is currently viewing. Generally meant to be used in combination with `filter`. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "When this command is used, Deadline Manager will sort all the currently displayed tasks according to the user specified comparison method. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Sort comparators are the core of the `sort` command.  Each sort comparator specifies a particular attribute (Example - `name`, `priority`) and a comparison direction, i.e ascending or descending."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The entire sorting command is composed of a chain of sort comparators. This chain helps the user to define which tasks to show earlier and which ones to show latter. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "What this means is that in case two tasks are in tie according to the first comparator, then the decision to place which task first is determined by the next comparator, and so on."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `sort SORT_COMPARATOR [SORT_COMPARATORS]...` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* Format of `SORT_COMPARATOR`: `(n|name|d|due|p|priority)(\u003c|\u003e)` OR `(t|tag)(\u003c|\u003e){TAG1 TAG2 TAG3 ...}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* Sorts the list by the 1st comparator, in case of ties, it sorts by 2nd comparator and so on."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* Meaning of the operators for each valid key:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** When `key` is `n` or `name`, the task name is compared. Comparision is case-insensitive."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** When `key` is `d` or `due`, the task\u0027s due date is compared."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** When `key` is `p` or `priority`, the task\u0027s priority is compared. Note that 1 is the highest priority and 4 is the lowest priority."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** When `key` is `t` or `tag`, the task\u0027s tags are compared."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "For sorting by tags the user has to specify which tags are more important and which are less important."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "** Any other `key` will cause Deadline Manager to produce an error."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* \u003c stands for sorting in ascending order and \u003e stands for sorting in descending order"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `sort n\u003e` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Sorts the current list of tasks in view in descending order by name, where sorting is done in alphabetical order."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `sort due\u003c name\u003e` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Sorts the current list of tasks in view in ascending order by due date, where ties are broken by descending order of names."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `sort priority\u003c` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Sorts the current list of tasks in view in ascending order by priority."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `sort tag\u003c{cs2100 family cs2103t}` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "Sorts the current list of tasks in view in ascending order by tags. In this case all the tasks with the tag `cs2100` will be placed"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "before those tasks with the tag `family`, finally followed by those tasks with the tag `cs2103t`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* In case a task does not belong to any of the tags mentioned it will be placed at the bottom of the sorted list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* In case a task contains more than one tag specified in the comparator, then it will be attempted to be sorted according to those tags first which place it former in the sorted list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Sidhant"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//Not sure if this is implemented"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d  Resolving tasks : `resolve` (coming in v2.0)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deletes a specified task from the deadline manager. The index refers to the entries of a previous call to list or search. +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `resolve INDEX`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Deletes the task at the specified INDEX. The index refers to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `resolve 1` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The 1st task displayed by the deadline manager will be deleted."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Sidhant"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Snoozing tasks : `snooze` (coming in v2.0)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Hides a specified task from the deadline manager until the time specified in the parameter has elapsed. The index refers to the entries of a previous call to list or search. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `snooze INDEX d/DEADLINE`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Modifies the contents of the task at the specified by INDEX to a new date `DEADLINE`. The index referes to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `snooze 1 d/20/09/2018` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "A task is \u0027snoozed\u0027 as its deadline is now shifted backwards to 20th September 2018."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Ranald"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Managing attachments of a task : `attachment`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Allows the user to add, list, delete and retrieve files associated with a specific task. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deadline manager does not make a copy or backup the files added. Only the location of the files are stored and it can be modified, renamed, moved or deleted without Deadline manager\u0027s knowledge. As such, there is no guarantee for a file associated with a specific task to always exist. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Format: `INDEX COMMAND [p/FILEPATH] [n/FILENAME]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*  Modify and manages the attachments of the task at the specified INDEX. The index refers to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `COMMAND` is either `add`, `list`, `delete` or `get` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* For `add` commands, `FILEPATH` argument is required to denote the file you intend to attach to the task. A file must exist at the `FILEPATH` specified."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* For `list` commands, no additional arguments are required."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* For `delete` commands, `FILENAME` argument is required to represent the file to delete."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* For `get` commands, `FILENAME` argument is required to represent the file to retrieve, `FILEPATH` argument is required to denote the destination you want the file to be exported to. If there is an existing file at `FILEPATH`, it would be overwritten without warning."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "The application does not allow adding more than one file with the same filename to the same task, even if they are in different locations on the computer."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Add: `attachment 1 add p/C:\\Documents\\HelloWorld.docx` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Adds an attachment located at \"C:\\Documents\\HelloWorld.docx\" to the 1st task in the deadline manager."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Get: `attachment 2 get p/C:\\Documents\\TaskAttachments.zip n/Assignment.zip` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Saves an attachment named \"Assignment.zip\" of the 2nd task in the deadline manager to \"C:\\Documents\\TaskAttachments.zip\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* List: `attachment 1 list` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Lists all attachments currently associated with the 1st task in the deadline manager."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Delete: `attachment 1 delete n/HelloWorld.docx`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Removes the association of the attachment named \"HelloWorld.docx\" with the 1st task in the deadline manager."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "The `import`, `export` commands described below do *NOT* support backing up attachments. However they will keep a link to the attachments path if any."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Importing a set of tasks: `import`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Imports tasks that were previous generated by an export command. Tasks will be retrieved from the provided `FILENAME` location."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Format: `import f/FILENAME [r/all | r/overwrite | r/skip]`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `FILENAME` must refer to an existing file on the computer in the same directory, and should only contain alphanumeric, underscore (_), or the fullstop (.) characters."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* Additionally, the file must be in a readable format, such as one previously exported by Deadline Manager."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Additionally, optional commands can provided to specify what Deadline Manager should do when there is an import conflict."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sijie123"
        },
        "content": "An import conflict occurs when you try to import a task, but a similar task already exists in your Deadline Manager."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sijie123"
        },
        "content": "You can input either one of three commands to specify how to resolve an import conflict:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `r/all`: Imports the new task, and keeps both the existing and incoming tasks."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `r/overwrite`: Imports the new task, and overwrites/discards the existing task."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `r/skip`: Does not import the conflicting task, but keeps the existing task instead."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sijie123"
        },
        "content": "If you do not specify any command, Deadline Manager uses `r/skip` by default, i.e. it will ignore new tasks that cause import conflicts."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `import f/cs2103.txt` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Imports all tasks from `cs2103.txt`. If an incoming task already exists in Deadline Manager, it is skipped."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `import f/cs2101.xml r/all` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Imports all tasks from `cs2101.xml`. Even if an incoming task exists in Deadline Manager, it is still imported."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `import f/cs2101/timetable.xml` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Fails and returns an error as `cs2101/timetable.xml` is not a valid filename."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sijie123"
        },
        "content": "//TODO: Add a picture on what I mean by \"currently displayed\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Exporting a set of tasks: `export`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Exports the tasks that is currently displayed by the Deadline Manager. The tasks will be saved as a file at the provided `FILENAME` location.  +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Format: `export f/FILENAME [r/overwrite]`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `FILENAME` must refer to a location in the same directory as Deadline Manager."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* If there is an existing file at the provided location, the write command will fail to protect your data."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "****"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sijie123"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sijie123"
        },
        "content": "You can override the default behaviour by specifying the r/overwrite argument. This will allow you to overwrite files even if they already exist. Use with caution so as not to overwrite important data."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `export cs2103.txt` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Creates and exports tasks to `cs2103.txt` within the same folder as Deadline Manager."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `export cs2101.txt` (Exports a file successfully) +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sijie123"
        },
        "content": "  `export cs2101.txt` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Fails and returns an error as `cs2101.txt` already exists when the second command is run. To protect your data, the second export command fails."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sijie123"
        },
        "content": "* `export C:\\Documents\\cs2103.txt` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sijie123"
        },
        "content": "Fails and returns an error as `cs2103.txt` is not in the same directory as Deadline Manager."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deletes the specified task from the deadline manager. +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deletes the 2nd task in the deadline manager."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "* `find `OP1 Assignment` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//TODO: Ranald or Sidhant"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003d\u003d\u003d Selecting a task : `select`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Selects the task identified by the index number used in the displayed task list. +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Selects the task and loads details about the task at the specified `INDEX`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* The index refers to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Selects the 2nd task in the deadline manager."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* `find Assignment` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Selects the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Restores the deadline manager to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Undoable commands: those commands that modify the deadline manager\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Clears all task entries from the deadline manager. +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Deadline manager data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "Attachments are merely linked in the deadline manager. A separate copy of the file will not be stored. If the original attachment file has been deleted, deadline manager will fail to retrieve it."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "//_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous deadline manager folder."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "* *Add* `add n/NAME d/DEADLINE [P/PRIORITY] [t/TAG]...` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "e.g. `add n/CS2103 Assignment d/11/10/2018 P/2 t/java t/hard`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "* *Add Recurring*: `addr n/NAME d/DEADLINE f/FREQUENCY [P/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "e.g. `add n/CS2103 Tutorial d/1/10/2018 f/7 P/4 t/easy`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Attachment (Add)* : `attachment INDEX add p\\FILEPATH`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Attachment (Delete)* : `attachment INDEX delete n/FILENAME`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Attachment (List)* : `attachment INDEX list`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Attachment (Retrieve)* : `attachment INDEX get n/FILENAME p/FILEPATH`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `attachment 2 get p/C:\\Documents\\TaskAttachments.zip n/Assignment.zip`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [d/DEADLINE] [t/TAG]...` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `edit 2 n/CS2103 Assignment 2 t/easy`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Export* : `export FILEPATH`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `find CS2103 CS2102`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "btzy"
        },
        "content": "* *Filter* : `filter FILTER_EXPRESSION`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "btzy"
        },
        "content": "e.g. `filter due\u003c1/10/2018`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Import* : `import FILEPATH`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Resolve* : `resolve INDEX` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `resolve 1`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Search* : `search FILTER_EXPRESSION`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `search due\u003c1/10/2018`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Snooze* : `snooze INDEX d/DEADLINE` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g.  `snooze 1 d/31/06/2018`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* *Sort* : `sort SORT_COMPARATOR [SORT_COMPARATORS]` +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "e.g. `sort due\u003c name\u003e`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* File Path: a string that defines the unique location of a file in the file system."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "* Subset: a part of a larger group of related things."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 237,
      "sidhant007": 50,
      "-": 199,
      "kc97ble": 7,
      "btzy": 67,
      "sijie123": 41
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "AddressBook - Level 4 is a desktop deadline manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        appParameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.TaskCollectionStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlTaskCollectionStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskCollection ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollectionStorage taskCollectionStorage \u003d new XmlTaskCollectionStorage("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            userPrefs.getDeadlineManagerFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        storage \u003d new StorageManager(taskCollectionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s deadline manager and {@code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * userPrefs}. \u003cbr\u003e The data from the sample deadline manager will be used instead if {@code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * storage}\u0027s deadline manager is not found, or an empty deadline manager will be used instead if errors"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * occur when reading {@code storage}\u0027s deadline manager."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Optional\u003cReadOnlyTaskCollection\u003e taskCollectionOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ReadOnlyTaskCollection initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionOptional \u003d storage.readTaskCollection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (!taskCollectionOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample deadline manager\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            initialData \u003d taskCollectionOptional.orElseGet(SampleDataUtil::getSampleTaskCollection);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty deadline manager\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            initialData \u003d new TaskCollection();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty deadline manager\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            initialData \u003d new TaskCollection();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty TaskCollection\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info(\"Starting DeadlineManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping deadline manager ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 36,
      "-": 177,
      "sijie123": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private String appTitle \u003d \"Deadline Manager\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void unregisterHandler(Object handler) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        eventBus.unregister(handler);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 44,
      "sijie123": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * can be obtained from this class\u003cbr\u003e These loggers have been configured to output messages to the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * console and a {@code .log} file by default, at the {@code INFO} level. A new {@code .log} file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * with a new numbering will be created after the log file reaches 5MB big, up to a maximum of 5"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String LOG_FILE \u003d \"deadlinemanager.log\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e Logging levels for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * existing loggers will only be updated if the logger with the same name is requested again"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * from the LogsCenter."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e Creates the {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * consoleHandler} if it is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e Creates {@code fileHandler} if it is"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * methods."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 20,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * the current component wants to communicate with another component, it can send an {@code Index}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * to avoid having to know what base the other component is using for its index. However, after"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * receiving the {@code Index}, that component can convert it back to an int if the index will not"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * creation stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * in the console."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExportRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Indicates a request to export the current taskcollection view."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ExportRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final ReadOnlyTaskCollection data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final String filename;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final boolean overwrite;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ExportRequestEvent(ReadOnlyTaskCollection data, String filename, boolean overwrite) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.overwrite \u003d overwrite;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "sijie123": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ImportRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Indicates a request to import to the current model."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final String filename;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportRequestEvent(String filename) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return \"importing from \" + filename;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TaskCollectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Indicates the TaskCollection in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class TaskCollectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public final ReadOnlyTaskCollection data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public TaskCollectionChangedEvent(ReadOnlyTaskCollection data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 13,
      "sijie123": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/ImportDataAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportDataAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final ReadOnlyTaskCollection data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportDataAvailableEvent(ReadOnlyTaskCollection data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/ImportExportExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportExportExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportExportExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExecuteCommandEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Indicates that the command specified by commandText should be executed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class ExecuteCommandEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public final String commandText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public ExecuteCommandEvent(String commandText) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.commandText \u003d commandText;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return getClass().getSimpleName() + \": \" + commandText;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Indicates a request to jump to the list of tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SelectFileSaveEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Indicates a request to prompt the user to select a location to save a file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class SelectFileSaveEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public final Consumer\u003cFile\u003e fileReceiver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public SelectFileSaveEvent(Consumer\u003cFile\u003e fileReceiver) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.fileReceiver \u003d fileReceiver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a selection change in the Task List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Task newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskPanelSelectionChangedEvent(Task newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Task getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                                   given here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 13,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Returns true if the {@code phrase} contains the given fragment {@code fragment}. Ignores case."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param phrase   cannot be null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param fragment cannot be null or empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static boolean containsFragmentIgnoreCase(String phrase, String fragment) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(fragment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "        fragment \u003d fragment.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "        checkArgument(!fragment.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return containsIgnoreCase(phrase, fragment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Like String.contains, but ignoring case."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param phrase   cannot be null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param fragment cannot be null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static boolean containsIgnoreCase(String phrase, String fragment) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(fragment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return phrase.toLowerCase().contains(fragment.toLowerCase());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e Will return false for any other non-null string input e.g. empty"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * letters)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 12,
      "-": 63,
      "btzy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data into xml and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                               writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list. This"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * is different from {@code ListIterator}, which has a cursor that points in between elements. The"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and {@code"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * previous()}, the same element is returned on both calls. In contrast, {@code"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * ListElementPointer}\u0027s behaviour: when making alternating calls of {@code next()} and {@code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * NoSuchElementException}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 12,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 11,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.parser.TaskCollectionParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final TaskCollectionParser taskCollectionParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollectionParser \u003d new TaskCollectionParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Command command \u003d taskCollectionParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "sidhant007": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Adds a task to the deadline manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the deadline manager. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + \"[\" + PREFIX_FREQUENCY + \"FREQUENCY] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_NAME + \"CS2103T Peer Feedback \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PREFIX_FREQUENCY + \"7 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_DEADLINE + \"10/11/2018 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_TAG + \"cs2103t \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the deadline manager\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 16,
      "sidhant007": 2,
      "-": 43,
      "kc97ble": 6,
      "btzy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttachmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Edits the details of an existing task in the deadline manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class AttachmentCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attachment\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String COMMAND_ADD_ACTION \u003d \"add\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String COMMAND_GET_ACTION \u003d \"get\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String COMMAND_DELETE_ACTION \u003d \"delete\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String COMMAND_LIST_ACTION \u003d \"list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        COMMAND_WORD + \": Modify and manages the attachments of the task identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"[add|get|delete|list] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"[\" + PREFIX_FILEPATH + \"FILEPATH] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"[\" + PREFIX_FILENAME + \"FILENAME]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Example 1: \" + COMMAND_WORD + \" 1 \" + COMMAND_ADD_ACTION + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_FILEPATH + \"D:\\\\Documents\\\\HelloWorld.docx\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" 2 \" + COMMAND_GET_ACTION + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_FILEPATH + \"D:\\\\Documents\\\\TaskAttachments.zip\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Example 3: \" + COMMAND_WORD + \" 1 \" + COMMAND_LIST_ACTION + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Example 4: \" + COMMAND_WORD + \" 1 \" + COMMAND_DELETE_ACTION + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + PREFIX_FILENAME + \"HelloWorld.docx\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_MISSING_ARGUMENTS \u003d \"Missing argument %1$s for %2$s action\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Attachment.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final AttachmentAction attachmentAction;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param index            of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param attachmentAction action that is to be performed on the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public AttachmentCommand(Index index, AttachmentAction attachmentAction) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(attachmentAction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.attachmentAction \u003d attachmentAction;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d attachmentAction.perform(taskToEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new CommandResult(attachmentAction.resultMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit} edited with {@code"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * editPersonDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                         AttachmentAction attachmentAction) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Task(taskToEdit.getName(), taskToEdit.getPriority(), taskToEdit.getFrequency(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            taskToEdit.getDeadline(), taskToEdit.getTags(), taskToEdit.getAttachments());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof AttachmentCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand e \u003d (AttachmentCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 attachmentAction.equals(e.attachmentAction);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Checks and throws (@code CommandException) if there is nothing at the specified path or the item is not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * a file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param file The file to check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static void checkAttachmentStatus(String format, File file) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        checkAttachmentExists(format, file);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        checkAttachmentIsFile(format, file);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Ensures that a provided file object actually exists in the filesystem. Throws (@code CommandException)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * if otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param sourceFile file to check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static void checkAttachmentExists(String format, File sourceFile) throws CommandException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!sourceFile.exists()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.info(String.format(\"Attachment %s does not exist. Checked %s.\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                sourceFile.getName(), sourceFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(String.format(format, sourceFile));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Ensures that a provided file object actually is a file in the filesystem. Throws (@code CommandException)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * if otherwise."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param sourceFile file to check"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static void checkAttachmentIsFile(String format, File sourceFile) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!sourceFile.isFile()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.info(String.format(\"Attachment %s is not a file. Checked %s.\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                sourceFile.getName(), sourceFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(String.format(format, sourceFile));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Utility function to determine if an attachment with name (@code name) exists in the set of attachments."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param attachments Set of attachments"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param name        Name to search"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return True if there is an attachment with name (@code name)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static boolean isAttachmentName(Set\u003cAttachment\u003e attachments, String name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cString\u003e attachmentNames \u003d attachments"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(x -\u003e x.getName())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return attachmentNames.contains(name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Utility function to obtain an attachment object from a set of attachments, based on name."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param attachments Set of attachments"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param name        Name to search"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return Null if there is no attachment with the provided name in the set."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static Attachment getAttachment(Set\u003cAttachment\u003e attachments, String name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Map\u003cString, Attachment\u003e attachmentNameMap \u003d attachments.stream()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toMap(x -\u003e x.getName(), x -\u003e x));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return attachmentNameMap.get(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Stores the actions to perform on a task\u0027s attachment with."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public abstract static class AttachmentAction {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_ATTACHMENT_ACTION_COMPELTED \u003d \"Action Completed.\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public abstract Task perform(Task taskToEdit) throws CommandException;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public String resultMessage() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return MESSAGE_ATTACHMENT_ACTION_COMPELTED;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Action to add attachment"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static class AddAttachmentAction extends AttachmentAction {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_ADD_NOT_A_FILE \u003d \"%1$s is not a valid file.\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_SUCCESS \u003d \"%1$s added as attachment.\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private String resultMessage \u003d \"Action Not Performed\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final String filePath;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public AddAttachmentAction(String filePath) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireAllNonNull(filePath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public Task perform(Task taskToEdit) throws CommandException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Attachment newAttachment \u003d buildAttachment();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (isAttachmentName(taskToEdit.getAttachments(), newAttachment.getName())) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                logger.info(String.format(\"Task already contains an attachment with filename %s.\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    newAttachment.getName()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new CommandException(Attachment.MESSAGE_DUPLICATE_ATTACHMENT_NAME);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            HashSet\u003cAttachment\u003e updatedAttachments \u003d new HashSet\u003c\u003e(taskToEdit.getAttachments());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            updatedAttachments.add(newAttachment);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return new Task(taskToEdit.getName(), taskToEdit.getPriority(), taskToEdit.getFrequency(),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                taskToEdit.getDeadline(), taskToEdit.getTags(), updatedAttachments);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Generates the Attachment Object from the file path."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Also performs checks to see if file exists."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * @return Arrachment that is generated"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * @throws CommandException"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private Attachment buildAttachment() throws CommandException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            checkAttachmentStatus(MESSAGE_ADD_NOT_A_FILE, file);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            resultMessage \u003d String.format(MESSAGE_SUCCESS, file.getName());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return new Attachment(new File(filePath));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public String resultMessage() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return resultMessage;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Action to list all attachments."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static class ListAttachmentAction extends AttachmentAction {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_TOTAL_ATTACHMENTS \u003d \"%d attachments in total.\\n\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_LIST_ATTACHMENT_DETAILS \u003d \"%d) %s\\n\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private String resultMessage \u003d \"Action Not Performed\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public Task perform(Task taskToEdit) throws CommandException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Set\u003cAttachment\u003e attachments \u003d taskToEdit.getAttachments();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            resultMessage \u003d String.format(MESSAGE_TOTAL_ATTACHMENTS, attachments.size());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            int indexCounter \u003d 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            for (Attachment attachment : attachments) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                indexCounter++;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                resultMessage +\u003d String.format(MESSAGE_LIST_ATTACHMENT_DETAILS, indexCounter, attachment.toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return taskToEdit;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public String resultMessage() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return resultMessage;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Action to delete all attachment."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static class DeleteAttachmentAction extends AttachmentAction {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_NAME_NOT_FOUND \u003d \"%1$s is not an attachment.\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_SUCCESS \u003d \"%1$s deleted from attachments.\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private String resultMessage \u003d \"Action Not Performed\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final String nameToDelete;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public DeleteAttachmentAction(String nameToDelete) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireAllNonNull(nameToDelete);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.nameToDelete \u003d nameToDelete;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public Task perform(Task taskToEdit) throws CommandException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Attachment attachmentToDelete \u003d getAttachment(taskToEdit.getAttachments(), nameToDelete);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (attachmentToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NAME_NOT_FOUND, nameToDelete));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            HashSet\u003cAttachment\u003e updatedAttachments \u003d new HashSet\u003c\u003e(taskToEdit.getAttachments());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            updatedAttachments.remove(attachmentToDelete);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            resultMessage \u003d String.format(MESSAGE_SUCCESS, nameToDelete);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return new Task(taskToEdit.getName(), taskToEdit.getPriority(), taskToEdit.getFrequency(),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                taskToEdit.getDeadline(), taskToEdit.getTags(), updatedAttachments);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public String resultMessage() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return resultMessage;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Action to get/retrieve attachment."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static class GetAttachmentAction extends AttachmentAction {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_NAME_NOT_FOUND \u003d \"%1$s is not an attachment.\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_GET_FAILED \u003d \"Failed to save to %1$s.\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_SUCCESS \u003d \"%1$s is now saved to %2$s.\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public static final String MESSAGE_GET_NOT_A_FILE \u003d \"%1$s is not a valid file.\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"It might have been deleted or moved\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private String resultMessage \u003d \"Action Not Performed\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final String fileName;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final String savePath;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public GetAttachmentAction(String fileName, String savePath) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireAllNonNull(fileName, savePath);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.savePath \u003d savePath;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Saves the attachment to savePath, overwriting the destination if a file exists."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * @param attachment attachment to save"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * @param savePath   path to save the attachment to"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private File copyFileToDestination(Attachment attachment, String savePath) throws CommandException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            checkAttachmentStatus(MESSAGE_GET_NOT_A_FILE, attachment.file);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                return attachment.saveTo(savePath);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                logger.severe(String.format(\"Attachment copy from %s to %s failed due to: %s\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    attachment.file.getAbsolutePath(), savePath, ioe));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_GET_FAILED, savePath));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public Task perform(Task taskToEdit) throws CommandException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Attachment attachmentToGet \u003d getAttachment(taskToEdit.getAttachments(), fileName);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (attachmentToGet \u003d\u003d null) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NAME_NOT_FOUND, fileName));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            copyFileToDestination(attachmentToGet, savePath);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            resultMessage \u003d String.format(MESSAGE_SUCCESS, attachmentToGet.getName(), savePath);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return taskToEdit;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public String resultMessage() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return resultMessage;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 361,
      "sidhant007": 2,
      "kc97ble": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Clears the deadline manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline manager has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.resetData(new TaskCollection());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the deadline manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "sidhant007": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Edits the details of an existing task in the deadline manager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + \"[\" + PREFIX_FREQUENCY + \"FREQUENCY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PREFIX_PRIORITY + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the deadline manager.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param index              of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit} edited with {@code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * editTaskDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                         EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Frequency updatedFrequency \u003d editTaskDescriptor.getFrequency().orElse(taskToEdit.getFrequency());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Attachments are not modifiable via \u0027EditCommand\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cAttachment\u003e updatedAttachments \u003d taskToEdit.getAttachments();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Task(updatedName, updatedPriority, updatedFrequency, updatedDeadline, updatedTags,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            updatedAttachments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        builder.append(\"index: \").append(index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .append(\" editTaskDescriptor: \").append(editTaskDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        private Frequency frequency;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            setFrequency(toCopy.frequency);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, priority, frequency, deadline, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public Optional\u003cFrequency\u003e getFrequency() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return Optional.ofNullable(frequency);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public void setFrequency(Frequency frequency) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                \u0026\u0026 getFrequency().equals(e.getFrequency())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            builder.append(getName())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(\" Frequency: \")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(getFrequency())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 51,
      "-": 143,
      "kc97ble": 57,
      "btzy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting deadline manager as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportExportExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Imports all tasks from an external deadline manager export file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_EXPORT_ERROR \u003d \"Export failed. Error: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported successfully to external file: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"export n/FILENAME [r/overwrite]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String pathName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String exportError \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private boolean overwrite;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ExportCommand(String filename, boolean overwrite) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.pathName \u003d filename;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.overwrite \u003d overwrite;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        //this.pathName \u003d Paths.get(filename);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        model.exportTaskCollection(pathName, overwrite);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        EventsCenter.getInstance().unregisterHandler(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (hasExportError()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EXPORT_ERROR, exportError));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, pathName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            \u0026\u0026 pathName.equals(((ExportCommand) other).pathName)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            \u0026\u0026 overwrite \u003d\u003d ((ExportCommand) other).overwrite); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private boolean hasExportError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return !(exportError.equals(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleImportExportExceptionEvent(ImportExportExceptionEvent event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        exportError \u003d event.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Finds and lists all tasks in deadline manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "        COMMAND_WORD + \": Display only those tasks which satisfies the given filter predicate \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \"Parameters: FILTER_PREDICATE [FILTER_PREDICATES]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" due\u003c1/10/2018\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public FilterCommand(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "    // FilterCommand should only compare equal by identity -"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "    // you can\u0027t really check two non-identical predicates for equality."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "sidhant007": 2,
      "btzy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Finds and lists all tasks in deadline manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" assignment tutorial project\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "sidhant007": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportExportExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.IgnoreImportConflictResolver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ImportConflictResolver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Imports all tasks from an external deadline manager export file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_IMPORT_ERROR \u003d \"Import failed. Error: %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Imported successfully from file: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": imports a prevously saved file. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        + \"Usage: import f/filename [r/all | r/overwrite | r/skip] \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        + \"Example: import f/saveFile.xml r/overwrite\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private ImportConflictResolver conflictResolver;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String importError \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportCommand(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this(fileName, new IgnoreImportConflictResolver());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportCommand(String fileName, ImportConflictResolver conflictResolver) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.conflictResolver \u003d conflictResolver;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.importTaskCollection(fileName, conflictResolver);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        EventsCenter.getInstance().unregisterHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (hasImportError()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_IMPORT_ERROR, importError));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            //model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, fileName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            \u0026\u0026 fileName.equals(((ImportCommand) other).fileName)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            \u0026\u0026 conflictResolver.getClass().equals(((ImportCommand) other).conflictResolver.getClass())); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private boolean hasImportError() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return !(importError.equals(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleImportExportExceptionEvent(ImportExportExceptionEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        importError \u003d event.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "sijie123": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Lists all tasks in the deadline manager to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Reverts the {@code model}\u0027s deadline manager to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!model.canRedoTaskCollection()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.redoTaskCollection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Selects a task identified using it\u0027s displayed index from the deadline manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        + \": Selects the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "sidhant007": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " * Sort all tasks in the deadline manager by their name (aka title)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            COMMAND_WORD + \": Sort the tasks using a user defined custom operator \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    + \"Parameters: SORT_COMPARATOR [SORT_COMPARATORS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    + \"Example 1: \" + COMMAND_WORD + \" name\u003e due\u003c\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    + \"Example 2: \" + COMMAND_WORD + \" d\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    + \"Example 3: \" + COMMAND_WORD + \" tag\u003c{tag1 tag2 tag3} priority\u003c\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private final Comparator\u003cTask\u003e comparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public SortCommand(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateSortedTaskList(comparator);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Reverts the {@code model}\u0027s deadline manager to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!model.canUndoTaskCollection()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.undoTaskCollection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code cause}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Frequency.NO_FREQUENCY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Priority.NO_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_PRIORITY, PREFIX_FREQUENCY, PREFIX_DEADLINE, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(NO_PRIORITY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Frequency frequency \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_FREQUENCY).orElse(NO_FREQUENCY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task task \u003d new Task(name, priority, frequency, deadline, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "-": 34,
      "kc97ble": 21,
      "btzy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 15,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e e.g."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * example.\u003cbr\u003e 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e 3."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * prefixes to their respective argument values. Only the given prefixes will be recognized in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the arguments string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                                               Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * from index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * prefix}. Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * on their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                        ...}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                                     List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getStartPosition());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 37,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttachmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.AttachmentCommand.COMMAND_ADD_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.AttachmentCommand.COMMAND_DELETE_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.AttachmentCommand.COMMAND_GET_ACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.AttachmentCommand.COMMAND_LIST_ACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.AttachmentCommand.MESSAGE_MISSING_ARGUMENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.AttachmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Parses input arguments and creates a new AttachmentCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class AttachmentCommandParser implements Parser\u003cAttachmentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AttachmentCommand and returns an"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * AttachmentCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public AttachmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .tokenize(args, PREFIX_FILEPATH, PREFIX_FILENAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String actionWord;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String[] indexAndCommand \u003d argMultimap.getPreamble().split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexAndCommand[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            actionWord \u003d indexAndCommand[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttachmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttachmentCommand.MESSAGE_USAGE), ae);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        switch (actionWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        case COMMAND_ADD_ACTION:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return parseAddAction(index, argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        case COMMAND_LIST_ACTION:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return parseListAction(index, argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        case COMMAND_DELETE_ACTION:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return parseDeleteAction(index, argMultimap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        case COMMAND_GET_ACTION:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return parseGetAction(index, argMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Generates the attachment command for an add attachment action."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private AttachmentCommand parseAddAction(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_ARGUMENTS, \"FILEPATH\", \"add\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String filePath \u003d argMultimap.getValue(PREFIX_FILEPATH).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new AttachmentCommand(index, action);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Generates the attachment command for a list attachment action."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private AttachmentCommand parseListAction(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d new AttachmentCommand.ListAttachmentAction();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new AttachmentCommand(index, action);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Generates the attachment command for a delete attachment action."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private AttachmentCommand parseDeleteAction(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILENAME).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_ARGUMENTS, \"FILENAME\", \"delete\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_FILENAME).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d new AttachmentCommand.DeleteAttachmentAction(fileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new AttachmentCommand(index, action);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Generates the attachment command for a delete attachment action."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private AttachmentCommand parseGetAction(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILENAME).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_ARGUMENTS, \"FILENAME\", \"get\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_ARGUMENTS, \"FILEPATH\", \"get\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_FILENAME).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String filePath \u003d argMultimap.getValue(PREFIX_FILEPATH).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d new AttachmentCommand.GetAttachmentAction(fileName, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new AttachmentCommand(index, action);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BooleanExpressionParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.BooleanExpressionParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Parses a boolean expression into a predicate."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class BooleanExpressionParser\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a boolean operator."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class BooleanOperator {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a left bracket."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class LeftBracket extends BooleanOperator {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a right bracket."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class RightBracket extends BooleanOperator {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents an operator that has precedence and can operate on the output stack."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private abstract static class PrecedableOperator extends BooleanOperator {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Gets the precedence of this operator."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Lower value is evaluated earlier."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public abstract int precedence();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Gets the precedence of this operator."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Lower value is evaluated earlier."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public abstract \u003cE\u003e void operate(Deque\u003cPredicate\u003cE\u003e\u003e outputStack);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a binary operator."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private abstract static class BinaryOperator extends PrecedableOperator {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public \u003cE\u003e void operate(Deque\u003cPredicate\u003cE\u003e\u003e outputStack) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (outputStack.size() \u003c 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new NoSuchElementException(\"Not enough elements on output stack for binary operator\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "            Predicate\u003cE\u003e o2 \u003d outputStack.poll();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "            Predicate\u003cE\u003e o1 \u003d outputStack.poll();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "            outputStack.push(operate(o1, o2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public abstract \u003cE\u003e Predicate\u003cE\u003e operate(Predicate\u003cE\u003e operand1, Predicate\u003cE\u003e operand2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a AND operator."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class AndOperator extends BinaryOperator {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public int precedence() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return 21;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public \u003cE\u003e Predicate\u003cE\u003e operate(Predicate\u003cE\u003e operand1, Predicate\u003cE\u003e operand2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return operand1.and(operand2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a OR operator."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class OrOperator extends BinaryOperator {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public int precedence() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return 22;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public \u003cE\u003e Predicate\u003cE\u003e operate(Predicate\u003cE\u003e operand1, Predicate\u003cE\u003e operand2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return operand1.or(operand2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a prefix unary operator."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private abstract static class PrefixUnaryOperator extends PrecedableOperator {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public \u003cE\u003e void operate(Deque\u003cPredicate\u003cE\u003e\u003e outputStack) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (outputStack.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new NoSuchElementException(\"Not enough elements on output stack for binary operator\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": "            outputStack.push(operate(outputStack.poll()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public abstract \u003cE\u003e Predicate\u003cE\u003e operate(Predicate\u003cE\u003e operand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a NOT operator."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class NotOperator extends PrefixUnaryOperator {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public int precedence() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return 11;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public \u003cE\u003e Predicate\u003cE\u003e operate(Predicate\u003cE\u003e operand) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return operand.negate();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Helper class for boolean operators."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static class BooleanOperators {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final LeftBracket LEFT_BRACKET \u003d new LeftBracket();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final RightBracket RIGHT_BRACKET \u003d new RightBracket();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final AndOperator AND \u003d new AndOperator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final OrOperator OR \u003d new OrOperator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final NotOperator NOT \u003d new NotOperator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static final Predicate\u003cCharacter\u003e OPERATOR_CHAR_PREDICATE \u003d ch -\u003e ch \u003d\u003d \u0027(\u0027 || ch \u003d\u003d \u0027)\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "            || ch \u003d\u003d \u0027\u0026\u0027 || ch \u003d\u003d \u0027|\u0027 || ch \u003d\u003d \u0027!\u0027;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Creates an operator from the next token of the given StringTokenizer."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btzy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static BooleanOperator parse(StringTokenizer tokenizer) throws NoSuchElementException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btzy"
        },
        "content": "            BooleanOperator operator \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tokenizer.tryNextPattern(Pattern.compile(\"\\\\(\")) !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operator \u003d LEFT_BRACKET;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tokenizer.tryNextPattern(Pattern.compile(\"\\\\)\")) !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operator \u003d RIGHT_BRACKET;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tokenizer.tryNextPattern(Pattern.compile(\"\\\\\u0026{1,2}\")) !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operator \u003d AND;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tokenizer.tryNextPattern(Pattern.compile(\"\\\\|{1,2}\")) !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operator \u003d OR;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tokenizer.tryNextPattern(Pattern.compile(\"\\\\!\")) !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operator \u003d NOT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new InputMismatchException(\"No matching operator found!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return operator;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * Creates an operator from the next token of the given StringTokenizer,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btzy"
        },
        "content": "         * or returns null if the next token cannot be interpreted as any known operator."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btzy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public static BooleanOperator tryParse(StringTokenizer tokenizer) throws NoSuchElementException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btzy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return parse(tokenizer);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btzy"
        },
        "content": "            } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Represents a the function to execute to parse an operand."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public interface OperandParser\u003cU\u003e {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btzy"
        },
        "content": "        public Predicate\u003cU\u003e parse(StringTokenizer tokenizer, Predicate\u003cCharacter\u003e reservedChar) throws ParseException;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final OperandParser\u003cT\u003e operandParser;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btzy"
        },
        "content": "    BooleanExpressionParser(OperandParser\u003cT\u003e operandParser) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.operandParser \u003d operandParser;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Parses the given string as a filter expression."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * This method uses the shunting yard algorithm."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public Predicate\u003cT\u003e parse(String str) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btzy"
        },
        "content": "        StringTokenizer tokenizer \u003d new StringTokenizer(str, ch -\u003e ch \u003d\u003d \u0027 \u0027, ch -\u003e ch \u003d\u003d \u0027\\\u0027\u0027 || ch \u003d\u003d \u0027\\\"\u0027);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btzy"
        },
        "content": "        ArrayDeque\u003cBooleanOperator\u003e operatorStack \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btzy"
        },
        "content": "        ArrayDeque\u003cPredicate\u003cT\u003e\u003e outputStack \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btzy"
        },
        "content": "        boolean isExpectingOperand \u003d true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btzy"
        },
        "content": "        while (tokenizer.hasNextToken()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btzy"
        },
        "content": "            BooleanOperator operator \u003d BooleanOperators.tryParse(tokenizer);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (operator !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // store operator"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (operator instanceof PrefixUnaryOperator) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    if (!isExpectingOperand) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new BooleanExpressionParseException(\"The \" + operator.getClass().getSimpleName()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            + \" operator cannot be preceded by an operand\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operatorStack.push(operator);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    isExpectingOperand \u003d true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } else if (operator instanceof BinaryOperator) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    if (isExpectingOperand) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new BooleanExpressionParseException(\"The \" + operator.getClass().getSimpleName()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            + \" operator cannot be preceded by another operator\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    while (!operatorStack.isEmpty()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        \u0026\u0026 operatorStack.peek() instanceof PrecedableOperator"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        \u0026\u0026 ((PrecedableOperator) operatorStack.peek()).precedence()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        \u003c\u003d ((PrecedableOperator) operator).precedence()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        PrecedableOperator precOperator \u003d (PrecedableOperator) operatorStack.poll();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        precOperator.operate(outputStack);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operatorStack.push(operator);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    isExpectingOperand \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } else if (operator instanceof LeftBracket) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    if (!isExpectingOperand) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new BooleanExpressionParseException(\"The \" + operator.getClass().getSimpleName()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            + \" operator cannot be preceded by an operand\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operatorStack.push(operator);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    isExpectingOperand \u003d true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } else if (operator instanceof RightBracket) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    if (isExpectingOperand) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new BooleanExpressionParseException(\"The \" + operator.getClass().getSimpleName()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            + \" operator cannot be preceded by another operator\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    while (!operatorStack.isEmpty() \u0026\u0026 operatorStack.peek() instanceof PrecedableOperator) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        PrecedableOperator precOperator \u003d (PrecedableOperator) operatorStack.poll();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        precOperator.operate(outputStack);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    if (operatorStack.isEmpty()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new BooleanExpressionParseException("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            \"The right bracket was encountered without matching left bracket\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    assert operatorStack.peek() instanceof LeftBracket : \"Expected a left bracket\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    operatorStack.pop();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    isExpectingOperand \u003d false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "btzy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // read and store operand"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (!isExpectingOperand) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    throw new BooleanExpressionParseException(\"Two operands cannot be adjacent\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "btzy"
        },
        "content": "                outputStack.push(operandParser.parse(tokenizer, BooleanOperators.OPERATOR_CHAR_PREDICATE));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "btzy"
        },
        "content": "                isExpectingOperand \u003d false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (isExpectingOperand) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new BooleanExpressionParseException(\"Operand expected at end of expression\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "btzy"
        },
        "content": "        while (!operatorStack.isEmpty() \u0026\u0026 operatorStack.peek() instanceof PrecedableOperator) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "btzy"
        },
        "content": "            PrecedableOperator precOperator \u003d (PrecedableOperator) operatorStack.poll();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "btzy"
        },
        "content": "            precOperator.operate(outputStack);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (!operatorStack.isEmpty()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "btzy"
        },
        "content": "            assert operatorStack.peek() instanceof LeftBracket : \"Expected a left bracket\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new BooleanExpressionParseException(\"Left bracket does not have matching right bracket\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assert outputStack.size() \u003d\u003d 1 : \"Shunting yard algorithm error in BooleanExpressionParser\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return outputStack.poll();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 279
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"P/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final Prefix PREFIX_FREQUENCY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /* Prefix definitions for attachments */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /* Prefix definitions for import command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final Prefix PREFIX_RESOLVER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 12,
      "kc97ble": 2,
      "btzy": 1,
      "sijie123": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_PRIORITY, PREFIX_FREQUENCY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                                PREFIX_DEADLINE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            editTaskDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    .setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            editTaskDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                    .setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FREQUENCY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            editTaskDescriptor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                    .setFrequency(ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_FREQUENCY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            editTaskDescriptor"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    .setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 17,
      "-": 62,
      "kc97ble": 9,
      "btzy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESOLVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseFileName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand and returns an"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                .tokenize(args, PREFIX_FILENAME, PREFIX_RESOLVER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        String filename \u003d argMultimap.getValue(PREFIX_FILENAME).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        String checkedFilename \u003d parseFileName(filename);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Optional\u003cString\u003e shouldOverwriteCmd \u003d argMultimap.getValue(PREFIX_RESOLVER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (!shouldOverwriteCmd.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new ExportCommand(checkedFilename, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (shouldOverwriteCmd.get().equals(\"overwrite\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new ExportCommand(checkedFilename, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.FilterOperator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateTestPhraseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.util.SetUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String MESSAGE_INVALID_KEY_FORMAT \u003d \"Invalid key: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String MESSAGE_INVALID_OPERATOR_FORMAT \u003d \"Invalid filter operator: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String MESSAGE_INVALID_TESTPHRASE_FORMAT \u003d \"Invalid filter test value: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String MESSAGE_INVALID_GENERAL_PREDICATE_FORMAT \u003d \"Invalid filter: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Creates a predicate from the specified key, operator, and testphrase."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static Predicate\u003cTask\u003e createPredicate(String key, FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        throws ParseException, InvalidPredicateException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            switch (key) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"n\": // fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"name\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                Predicate\u003cName\u003e namePredicate \u003d Name.makeFilter(operator, testPhrase);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                predicate \u003d task -\u003e namePredicate.test(task.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"d\": // fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"due\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                Predicate\u003cDeadline\u003e deadlinePredicate \u003d Deadline.makeFilter(operator, testPhrase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                predicate \u003d task -\u003e deadlinePredicate.test(task.getDeadline());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"p\": // fallthrough"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"priority\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                Predicate\u003cPriority\u003e priorityPredicate \u003d Priority.makeFilter(operator, testPhrase);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                predicate \u003d task -\u003e priorityPredicate.test(task.getPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"f\": // fallthrough"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"frequency\": {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                Predicate\u003cFrequency\u003e frequencyPredicate \u003d Frequency.makeFilter(operator, testPhrase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                predicate \u003d task -\u003e frequencyPredicate.test(task.getFrequency());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"t\": // fallthrough"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"tag\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                Predicate\u003cSet\u003cTag\u003e\u003e tagsPredicate \u003d SetUtil.makeFilter(Tag.class, operator, testPhrase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                predicate \u003d task -\u003e tagsPredicate.test(task.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_KEY_FORMAT, key));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        } catch (InvalidPredicateOperatorException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_OPERATOR_FORMAT, operator), e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        } catch (InvalidPredicateTestPhraseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TESTPHRASE_FORMAT, testPhrase), e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns an"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // pattern that matches things like:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // due\u003d1/10/2018"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // test\u003cblah"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // name\u003e\"hello world\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "        final Predicate\u003cCharacter\u003e allowedKeyCharacterPredicate \u003d ch"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "            -\u003e (ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "            || (ch \u003e\u003d \u0027a\u0027 \u0026\u0026 ch \u003c\u003d \u0027z\u0027);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": "            BooleanExpressionParser\u003cTask\u003e expressionParser \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "                new BooleanExpressionParser\u003c\u003e((tokenizer, reservedCharPredicate) -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    final String key \u003d tokenizer.nextString(allowedKeyCharacterPredicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    final String opString \u003d tokenizer.nextPattern(Pattern.compile(\"[\\\\\u003d\\\\\u003c\\\\\u003e\\\\:]\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    final FilterOperator operator \u003d FilterOperator.parse(opString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    final String value \u003d tokenizer.nextString(reservedCharPredicate.negate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        return createPredicate(key, operator, value);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    } catch (InvalidPredicateException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_GENERAL_PREDICATE_FORMAT, key + \u0027 \u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "                            + opString + \u0027 \u0027 + operator), e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btzy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d expressionParser.parse(args);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return new FilterCommand(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (IllegalArgumentException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new ParseException(\"Invalid filter expression: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc97ble": 51,
      "btzy": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns an"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESOLVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseFileName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.DuplicateImportConflictResolver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.IgnoreImportConflictResolver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ImportConflictResolver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.OverwriteImportConflictResolver;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand and returns an"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * ImportCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                .tokenize(args, PREFIX_FILENAME, PREFIX_RESOLVER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        String filename \u003d argMultimap.getValue(PREFIX_FILENAME).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        String checkedFilename \u003d parseFileName(filename);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ImportConflictResolver resolver;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Optional\u003cString\u003e resolverInput \u003d argMultimap.getValue(PREFIX_RESOLVER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (resolverInput.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            resolver \u003d resolverParser(resolverInput.get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            resolver \u003d new IgnoreImportConflictResolver();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return new ImportCommand(checkedFilename, resolver);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Determines which resolver to use based on the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param input user command arguments"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @return the appropriate ImportConflictResolver"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws ParseException if user\u0027s argument is not recognised"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private ImportConflictResolver resolverParser(String input) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new DuplicateImportConflictResolver();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        case \"overwrite\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new OverwriteImportConflictResolver();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        case \"skip\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new IgnoreImportConflictResolver();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static final String MESSAGE_INVALID_FILENAME \u003d \"Invalid filename! File name can only contain alphanumeric\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        + \" characters, full stop and the underscore [_] characters\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Parses a {@code String frequency} into a {@code Frequency}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @throws ParseException if the given {@code frequency} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static Frequency parseFrequency(String frequency) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        requireNonNull(frequency);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String trimmedFrequency \u003d frequency.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (!Frequency.isValidFrequency(trimmedFrequency)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new ParseException(Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Frequency(trimmedFrequency);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS, e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Parses and determines if a filename is legal."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * A filename is legal if it uses only alphanumeric characters, the underscore, or fullstop characters."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filename the filename to be checked"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @return the fileName if it is legal"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws ParseException if filename is illegal"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public static String parseFileName(String filename) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (!filename.matches(\"^[a-zA-Z0-9_.]+$\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 87,
      "kc97ble": 20,
      "btzy": 11,
      "sijie123": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand and returns"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private static final String MESSAGE_INVALID_KEY_FORMAT \u003d \"Invalid key: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand and returns an"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * SortCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        StringBuilder trimmedArgs \u003d new StringBuilder(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        if (trimmedArgs.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        int bracketDepth \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedArgs.length(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            if (trimmedArgs.charAt(i) \u003d\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                bracketDepth++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            } else if (trimmedArgs.charAt(i) \u003d\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                bracketDepth--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            } else if (trimmedArgs.charAt(i) \u003d\u003d \u0027 \u0027 \u0026\u0026 bracketDepth \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                trimmedArgs.setCharAt(i, \u0027~\u0027);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        String[] splittedArgs \u003d trimmedArgs.toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        // pattern that matches things like:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        // due\u003c name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        // n\u003c"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        // name\u003e p\u003c"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        // t\u003c{cs2103t programming} name\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Comparator\u003cTask\u003e comparator \u003d Comparator.comparing(Task::getClass, (a, b) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            return 0; // a default comparator which compares every task equal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        for (String element: splittedArgs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            if (element.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            final String[] splittedComparator \u003d element.split(\"(?\u003c\u003d[\u003c\u003e])\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            final String taskField \u003d splittedComparator[0].substring(0, splittedComparator[0].length() - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            final char comparisonCharacter \u003d splittedComparator[0].charAt(splittedComparator[0].length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            if (comparisonCharacter !\u003d \u0027\u003e\u0027 \u0026\u0026 comparisonCharacter !\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                        String.format(MESSAGE_INVALID_KEY_FORMAT, element));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            if (splittedComparator.length \u003e 1 \u0026\u0026 (!taskField.equals(\"t\") \u0026\u0026 !taskField.equals(\"tag\"))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                        String.format(MESSAGE_INVALID_KEY_FORMAT, element));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            switch (taskField) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"n\": // fallthrough"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"name\": {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (comparisonCharacter \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getName, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"d\": // fallthrough"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"due\": {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (comparisonCharacter \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getDeadline);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getDeadline, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"p\": // fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"priority\": {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (comparisonCharacter \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getPriority);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getPriority, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"f\": // fallthrough"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            case \"frequency\": {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                if (comparisonCharacter \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getFrequency);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                    comparator \u003d comparator.thenComparing(Task::getFrequency, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"t\": // fallthrough"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            case \"tag\": {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                String tags \u003d splittedComparator[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (tags.isEmpty() || tags.length() \u003c 2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                tags \u003d tags.substring(1, tags.length() - 1); // removing \u0027{\u0027 and \u0027}\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                String[] tagsOrder \u003d tags.split(\"~+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (comparisonCharacter \u003d\u003d \u0027\u003e\u0027) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    tagsOrder \u003d reverseString(tagsOrder);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                Tag[] tagsArray \u003d new Tag[tagsOrder.length];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                for (int i \u003d 0; i \u003c tagsOrder.length; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                        tagsArray[i] \u003d new Tag(tagsOrder[i]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                        throw new ParseException("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                comparator \u003d comparator.thenComparing(Task::getTags, createTagsComparator(tagsArray));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_KEY_FORMAT, element));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return new SortCommand(comparator);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Reverses the given {@code String} as argument and returns the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * reverse string"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    String[] reverseString(String[] x) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        int len \u003d x.length;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        for (int i \u003d 0; i \u003c len / 2; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            String temp \u003d x[i];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            x[i] \u003d x[len - i - 1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            x[len - i - 1] \u003d temp;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Builds a comparator to compare two sets of tags given {@code Tag[]} an array of tags as argument"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * and returns the comparator"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    Comparator\u003cSet\u003cTag\u003e\u003e createTagsComparator(Tag[] tagsOrder) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Comparator\u003cSet\u003cTag\u003e\u003e byTags \u003d (Set\u003cTag\u003e a, Set\u003cTag\u003e b) -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            for (int i \u003d 0; i \u003c tagsOrder.length; i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                boolean containsA \u003d a.contains(tagsOrder[i]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                boolean containsB \u003d b.contains(tagsOrder[i]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                if (containsA \u0026\u0026 !containsB) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                } else if (!containsA \u0026\u0026 containsB) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        };"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return byTags;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 176,
      "kc97ble": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StringTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": " * This class tokenizes a string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": " * The token can be any predicate,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": " * and it supports quoted strings (and arbitrary levels of recursiveness) too."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": " * It is better than java.util.StringTokenizer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Multiple consecutive delimiters are treated as a single delimiter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class StringTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final String str;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final Predicate\u003cCharacter\u003e delimPred;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final Predicate\u003cCharacter\u003e quotePred;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private int nextIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Constructs an instance of Stringtokenizer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param delimPred A predicate that returns true if the given character is a delimiter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param quotePred A predicate that returns true if the given character is a quote."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public StringTokenizer(String str, Predicate\u003cCharacter\u003e delimPred, Predicate\u003cCharacter\u003e quotePred) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.str \u003d str;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.delimPred \u003d delimPred;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.quotePred \u003d quotePred;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.nextIndex \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Returns true if there are still non-delimiter characters in the string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public boolean hasNextToken() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // gobble up all the delims"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "        while (nextIndex \u003c str.length() \u0026\u0026 delimPred.test(str.charAt(nextIndex))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "            ++nextIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return nextIndex \u003c str.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Consume the next string token."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public String nextString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return nextString(ch -\u003e true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Consume the next string token."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param validPred A predicate that returns false if the given character is not allowed in this token."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *                  If such a character is encountered, the token would be considered to have ended"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *                  just before that character.  It is only used for unquoted strings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public String nextString(Predicate\u003cCharacter\u003e validPred) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (!hasNextToken()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new NoSuchElementException(\"Reached end of string while reading delimiter!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "        int startLocation \u003d nextIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (quotePred.test(str.charAt(nextIndex))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "            // starts with quote"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "            char quote \u003d str.charAt(nextIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "            boolean hasEndedWithQuote \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "            for (++nextIndex; nextIndex \u003c str.length(); ++nextIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "                char ch \u003d str.charAt(nextIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (quote \u003d\u003d ch) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    // matching quote, break"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    hasEndedWithQuote \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    ++nextIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (hasEndedWithQuote) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // successful read of quoted string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": "                assert quotePred.test(str.charAt(startLocation)) \u0026\u0026 quotePred.test(str.charAt(nextIndex - 1))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    : \"String did not start or end with quotes!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // remove leading/trailing quote before returning"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return str.substring(startLocation + 1, nextIndex - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // bad, we ran out of characters"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // rollback nextIndex"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": "                nextIndex \u003d startLocation;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "                // throw an exception"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new InputMismatchException(\"Reached end of string while reading quoted string!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": "            // does not start with quote"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "            // there should be no quotes within this string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "            for (; nextIndex \u003c str.length(); ++nextIndex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "                char ch \u003d str.charAt(nextIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (delimPred.test(ch)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } else if (quotePred.test(ch)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    // rollback nextIndex"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    nextIndex \u003d startLocation;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    // throw an exception"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    throw new InputMismatchException(\"Quotes encountered in the middle of unquoted string!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } else if (!validPred.test(ch)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    // invalid character -\u003e next token"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btzy"
        },
        "content": "            if (startLocation \u003d\u003d nextIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new InputMismatchException(\"Input is invalid!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return str.substring(startLocation, nextIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Consume the next token specified with the regex."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public String nextPattern(Pattern pattern) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (!hasNextToken()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new NoSuchElementException(\"Reached end of string while reading delimiter!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "        CharSequence tmp \u003d str.subSequence(nextIndex, str.length());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(tmp);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (!matcher.find() || matcher.start() !\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InputMismatchException(\"The next token does not match the given pattern!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btzy"
        },
        "content": "        nextIndex +\u003d matcher.end();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return matcher.group();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Try to consume the next token specified with the regex."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Returns null if no token available."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @throws NoSuchElementException if the string has reached the end."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public String tryNextPattern(Pattern pattern) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return nextPattern(pattern);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Gets all the tokens from this tokenizer."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public List\u003cString\u003e toList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btzy"
        },
        "content": "        ArrayList\u003cString\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btzy"
        },
        "content": "        while (hasNextToken()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btzy"
        },
        "content": "            items.add(nextString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskCollectionParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.AttachmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCollectionParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        case AttachmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return new AttachmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "sidhant007": 4,
      "-": 89,
      "sijie123": 8,
      "btzy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/BooleanExpressionParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Represents an exception that is caused by parsing a boolean expression."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": " * This exception is thrown by methods in BooleanExpressionParser."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class BooleanExpressionParseException extends ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public BooleanExpressionParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public BooleanExpressionParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DuplicateImportConflictResolver.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * The DuplicateImportConflictResolver class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * This class will resolve import conflicts by duplicating entries, i.e. after the resolver is complete,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * both entries from the existing and imported TaskCollection will be saved."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class DuplicateImportConflictResolver extends ImportConflictResolver {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void resolve(Consumer\u003cTask\u003e addTask, Consumer\u003cTask\u003e removeTask, Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        //Ignore task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        LOGGER.info(\"Duplicating task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        addTask.accept(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IgnoreImportConflictResolver.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * The DuplicateImportConflictResolver class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * This class will resolve import conflicts by ignoring the incoming entry, i.e. after the resolver is complete,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * the existing entry in the TaskCollection will remain."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class IgnoreImportConflictResolver extends ImportConflictResolver {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void resolve(Consumer\u003cTask\u003e addTask, Consumer\u003cTask\u003e removeTask, Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        //Ignore task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        LOGGER.info(\"Ignoring task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ImportConflictResolver.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * The base ImportConflictResolver class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Instantiates a logger for child classes to use."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Has a single abstract method resolve, which takes in the add and remove methods to be applied to a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public abstract class ImportConflictResolver {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    protected static final Logger LOGGER \u003d LogsCenter.getLogger(ImportConflictResolver.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    abstract void resolve(Consumer\u003cTask\u003e addTask, Consumer\u003cTask\u003e removeTask, Task task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportDataAvailableEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void resetData(ReadOnlyTaskCollection newData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the TaskCollection"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    ReadOnlyTaskCollection getTaskCollection();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the deadline manager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Deletes the given task. The task must exist in the deadline manager."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds the given task. {@code task} must not already exist in the deadline manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}. {@code target} must exist in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the deadline manager. The task identity of {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * existing task in the deadline manager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    void updateTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Updates the sorted order of the tasks according by the given {@code comparator}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    void updateSortedTaskList(Comparator\u003cTask\u003e comparator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the model has previous deadline manager states to restore."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    boolean canUndoTaskCollection();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the model has undone deadline manager states to restore."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    boolean canRedoTaskCollection();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Restores the model\u0027s deadline manager to its previous state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void undoTaskCollection();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Restores the model\u0027s deadline manager to its previously undone state."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void redoTaskCollection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves the current deadline manager state for undo/redo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void commitTaskCollection();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Exports current deadline manager to file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void exportTaskCollection(String filename, boolean shouldOverwrite);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Imports tasks from file to the current deadline manager."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void importTaskCollection(String filename, ImportConflictResolver mode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Handler for the return result from Storage, when import data has been read."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param event the import data event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void handleImportDataAvailableEvent(ImportDataAvailableEvent event);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 33,
      "sidhant007": 12,
      "-": 49,
      "sijie123": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ExportRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ImportRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportDataAvailableEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents the in-memory model of the deadline manager data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * An enum representing the possible conflict resolvers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private final VersionedTaskCollection versionedTaskCollection;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String lastError;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private ImportConflictResolver conflictResolver;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Initializes a ModelManager with the given taskCollection and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public ModelManager(ReadOnlyTaskCollection taskCollection, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireAllNonNull(taskCollection, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.fine("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"Initializing with deadline manager: \" + taskCollection + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection \u003d new VersionedTaskCollection(taskCollection);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskCollection.getTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        lastError \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this(new TaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void resetData(ReadOnlyTaskCollection newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public ReadOnlyTaskCollection getTaskCollection() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return versionedTaskCollection;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private void indicateTaskCollectionChanged() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        raise(new TaskCollectionChangedEvent(versionedTaskCollection));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return versionedTaskCollection.hasTask(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.removeTask(target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.addTask(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateSortedTaskList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.sort(comparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * {@code versionedTaskCollection}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean canUndoTaskCollection() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return versionedTaskCollection.canUndo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean canRedoTaskCollection() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return versionedTaskCollection.canRedo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undoTaskCollection() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.undo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redoTaskCollection() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.redo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        indicateTaskCollectionChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void commitTaskCollection() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        versionedTaskCollection.commit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return versionedTaskCollection.equals(other.versionedTaskCollection)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dImport/Export\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void exportTaskCollection(String filename, boolean shouldOverwrite) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d getFilteredTaskList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        TaskCollection exportCollection \u003d new TaskCollection();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        exportCollection.setTasks(lastShownList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        raise(new ExportRequestEvent(exportCollection, filename, shouldOverwrite));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void importTaskCollection(String filename, ImportConflictResolver mode) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        conflictResolver \u003d mode;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        raise(new ImportRequestEvent(filename));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleImportDataAvailableEvent(ImportDataAvailableEvent event) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        //Handle merge conflict and what not"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ReadOnlyTaskCollection importData \u003d event.data;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        for (Task task: importData.getTaskList()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            resolveImportConflict(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Use the appropriate import conflict handler to resolve a conflict."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * If there is no conflict, simply add it to the current TaskCollection."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param task the task to deconflict"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private void resolveImportConflict(Task task) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        if (!hasTask(task)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            addTask(task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (conflictResolver \u003d\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        conflictResolver.resolve(this::addTask, this::deleteTask, task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 29,
      "sidhant007": 38,
      "-": 101,
      "sijie123": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OverwriteImportConflictResolver.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * The OverwriteImportConflictResolver class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * This class will resolve import conflicts by overwriting entries, i.e. after the resolver is complete,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * the newly imported Task will overwrite the existing task in the TaskCollection."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class OverwriteImportConflictResolver extends ImportConflictResolver {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void resolve(Consumer\u003cTask\u003e addTask, Consumer\u003cTask\u003e removeTask, Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        //Ignore task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        LOGGER.info(\"Updating task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        removeTask.accept(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        addTask.accept(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Unmodifiable view of an deadline manager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public interface ReadOnlyTaskCollection {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an unmodifiable view of the tasks list. This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCollection implements ReadOnlyTaskCollection {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCollection() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "        tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates an TaskCollection using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCollection(ReadOnlyTaskCollection toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this(); // delegating construction to non-parameterized constructor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}. {@code tasks} must not contain"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * duplicate tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Resets the existing data of this {@code TaskCollection} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void resetData(ReadOnlyTaskCollection newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the deadline manager."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds a task to the deadline manager. The task must not already exist in the deadline manager."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}. {@code target}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * must exist in the deadline manager. The task identity of {@code editedTask} must not be the same"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * as another existing task in the deadline manager."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "        int index \u003d tasks.indexOf(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "        tasks.set(index, editedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Removes {@code key} from this {@code TaskCollection}. {@code key} must exist in the address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Sorts the ObservableList by custom comparator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void sort(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        FXCollections.sort(tasks, comparator);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return tasks.size() + \" tasks\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            || (other instanceof TaskCollection // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 tasks.equals(((TaskCollection) other).tasks));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 33,
      "sidhant007": 8,
      "-": 67,
      "btzy": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Path deadlineManagerFilePath \u003d Paths.get(\"data\", \"deadlinemanager.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Path getDeadlineManagerFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return deadlineManagerFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setDeadlineManagerFilePath(Path deadlineManagerFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.deadlineManagerFilePath \u003d deadlineManagerFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 Objects.equals(deadlineManagerFilePath, o.deadlineManagerFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return Objects.hash(guiSettings, deadlineManagerFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + deadlineManagerFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTaskCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * {@code TaskCollection} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class VersionedTaskCollection extends TaskCollection {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final List\u003cReadOnlyTaskCollection\u003e taskCollectionStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public VersionedTaskCollection(ReadOnlyTaskCollection initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollectionStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollectionStateList.add(new TaskCollection(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves a copy of the current {@code TaskCollection} state at the end of the state list. Undone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollectionStateList.add(new TaskCollection(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollectionStateList.subList(currentStatePointer + 1, taskCollectionStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Restores the deadline manager to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        resetData(taskCollectionStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Restores the deadline manager to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        resetData(taskCollectionStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if {@code undo()} has deadline manager states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if {@code redo()} has deadline manager states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return currentStatePointer \u003c taskCollectionStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof VersionedTaskCollection)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection otherVersionedTaskCollection \u003d (VersionedTaskCollection) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return super.equals(otherVersionedTaskCollection)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 taskCollectionStateList.equals(otherVersionedTaskCollection.taskCollectionStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTaskCollection.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            super(\"Current state pointer at start of taskCollectionState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            super(\"Current state pointer at end of taskCollectionState list, unable to redo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 26,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attachment/Attachment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.attachment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a Attachment in the deadline manager. Guarantees: immutable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class Attachment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTACHMENT_NAME \u003d \"There cannot be more than one attachment\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        + \"with the same file name. Please rename one of them.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Attachment.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public final File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Attachment(File file) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Copies the file from file to a specified location, overwriting the file at destination if a file exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param savePath path to save the attachment to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public File saveTo(String savePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File destination \u003d new File(savePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (destination.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(\"Attachment destination %s will be overwritten.\", destination.getAbsolutePath()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File copiedFile \u003d Files.copy(file.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING).toFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return copiedFile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return Name of the attachment, which is the file name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return file.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            || (other instanceof Attachment // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 file.getAbsolutePath().equals(((Attachment) other).file.getAbsolutePath())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return file.getAbsolutePath().hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return file.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a Tag in the deadline manager. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateTestPhraseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Represents a Task\u0027s deadline in the deadline manager. Guarantees: immutable; represents a valid date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \"Deadline has to be a valid date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static DateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M/y\", new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public Deadline(Date deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.value \u003d deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "            this.value \u003d dateFormatter.parse(deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS, e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Constructs a predicate from the given operator and test phrase."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param operator   The operator for this predicate."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param testPhrase The test phrase for this predicate."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static Predicate\u003cDeadline\u003e makeFilter(FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throws InvalidPredicateException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Deadline testDeadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "            testDeadline \u003d new Deadline(testPhrase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateTestPhraseException(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return deadline -\u003e deadline.equals(testDeadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case CONVENIENCE: // convenience operator, works the same as \"\u003c\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case LESS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return deadline -\u003e deadline.compareTo(testDeadline) \u003c\u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case GREATER:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return deadline -\u003e deadline.compareTo(testDeadline) \u003e\u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateOperatorException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return dateFormatter.format(value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "            || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": "            \u0026\u0026 value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public int compareTo(Deadline other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return this.value.compareTo(other.value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc97ble": 2,
      "btzy": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/FilterOperator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Represents an operator used for the filter predicate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "public enum FilterOperator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "    CONVENIENCE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "    EQUAL,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "    LESS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "    GREATER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Parses a string into a filter operator."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param str The string to parse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static FilterOperator parse(String str) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "        switch(str) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case \":\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return CONVENIENCE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case \"\u003d\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return EQUAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case \"\u003c\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return LESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case \"\u003e\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return GREATER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new ParseException(\"Invalid filter operator!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Frequency.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateTestPhraseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " * Represents a Task\u0027s frequency in the deadline manager. Guarantees: immutable; is valid as declared"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " * in {@link #isValidFrequency(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "public class Frequency implements Comparable\u003cFrequency\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String MESSAGE_FREQUENCY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \"Frequency should only be a non negative number\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String FREQUENCY_VALIDATION_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String NO_FREQUENCY \u003d \"0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Constructs a {@code Frequency}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @param frequency A valid frequency."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Frequency(String frequency) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        requireNonNull(frequency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        checkArgument(isValidFrequency(frequency), MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.value \u003d Integer.parseInt(frequency);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Frequency(int frequency) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        checkArgument(isValidFrequency(frequency), MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.value \u003d frequency;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Returns true if a given string is a valid frequency number."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static boolean isValidFrequency(int test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Returns true if a given string is a valid frequency number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static boolean isValidFrequency(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return test.matches(FREQUENCY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Constructs a predicate from the given operator and test phrase."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @param operator   The operator for this predicate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @param testPhrase The test phrase for this predicate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static Predicate\u003cFrequency\u003e makeFilter(FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        throws InvalidPredicateException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Frequency tmpFrequency;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            tmpFrequency \u003d new Frequency(testPhrase);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new InvalidPredicateTestPhraseException(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return frequency -\u003e frequency.equals(tmpFrequency);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        case LESS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return frequency -\u003e frequency.compareTo(tmpFrequency) \u003c\u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        case CONVENIENCE: // convenience operator, works the same as \"\u003e\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        case GREATER:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return frequency -\u003e frequency.compareTo(tmpFrequency) \u003e\u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new InvalidPredicateOperatorException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            || (other instanceof Frequency // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 value \u003d\u003d ((Frequency) other).value); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public int compareTo(Frequency other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        int booleanCompareResult \u003d Boolean.compare(this.value \u003e 0, other.value \u003e 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (booleanCompareResult !\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            return booleanCompareResult;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return Integer.compare(other.value, this.value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc97ble": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a Task\u0027s name in the deadline manager. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Constructs a predicate from the given operator and test phrase."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param operator   The operator for this predicate."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param testPhrase The test phrase for this predicate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static Predicate\u003cName\u003e makeFilter(FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throws InvalidPredicateOperatorException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return name -\u003e name.value.equals(testPhrase);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case LESS:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return name -\u003e StringUtil.containsFragmentIgnoreCase(testPhrase, name.value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case CONVENIENCE: // convenience operator, works the same as \"\u003e\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case GREATER:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return name -\u003e StringUtil.containsFragmentIgnoreCase(name.value, testPhrase);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateOperatorException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "            \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return this.value.compareTo(other.value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "sidhant007": 6,
      "-": 48,
      "btzy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "                .containsWordIgnoreCase(task.getName().value, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 25,
      "btzy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateTestPhraseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " * Represents a Task\u0027s priority in the deadline manager. Guarantees: immutable; is valid as declared"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " * in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class Priority implements Comparable\u003cPriority\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \"Priority should only be 0, 1, 2, 3, or 4\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[01234]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String NO_PRIORITY \u003d \"0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final int LARGEST_PRIORITY_VALUE \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.value \u003d Integer.parseInt(priority);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public Priority(int priority) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.value \u003d priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Returns true if a given string is a valid priority number."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static boolean isValidPriority(int test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d LARGEST_PRIORITY_VALUE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Returns true if a given string is a valid priority number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Constructs a predicate from the given operator and test phrase."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param operator   The operator for this predicate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param testPhrase The test phrase for this predicate."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static Predicate\u003cPriority\u003e makeFilter(FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "        throws InvalidPredicateException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Priority tmpPriority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "            tmpPriority \u003d new Priority(testPhrase);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateTestPhraseException(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return priority -\u003e priority.equals(tmpPriority);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case LESS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return priority -\u003e priority.compareTo(tmpPriority) \u003c\u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case CONVENIENCE: // convenience operator, works the same as \"\u003e\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "        case GREATER:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return priority -\u003e priority.compareTo(tmpPriority) \u003e\u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateOperatorException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "            \u0026\u0026 value \u003d\u003d ((Priority) other).value); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public int compareTo(Priority other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "        int booleanCompareResult \u003d Boolean.compare(this.value \u003e 0, other.value \u003e 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (booleanCompareResult !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return booleanCompareResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return Integer.compare(other.value, this.value);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 6,
      "kc97ble": 48,
      "btzy": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a Task in the deadline manager. Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private final Frequency frequency;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Set\u003cAttachment\u003e attachments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Task(Name name, Priority priority, Frequency frequency, Deadline deadline,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                Set\u003cTag\u003e tags, Set\u003cAttachment\u003e attachments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        requireAllNonNull(name, priority, deadline, tags, attachments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.attachments.addAll(attachments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Convenience constructor. Tasks are initialized without any attachments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Task(Name name, Priority priority, Frequency frequency, Deadline deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this(name, priority, frequency, deadline, tags, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Convenience constructor, to be removed eventually"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Task(Name name, Priority priority, Frequency frequency, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this(name, priority, frequency, new Deadline(\"1/10/2018\"), tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an immutable attachment set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Set\u003cAttachment\u003e getAttachments() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return Collections.unmodifiableSet(attachments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * notion of equality between two tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 otherTask.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 otherTask.getTags().equals(getTags())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "            \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 otherTask.getAttachments().equals(getAttachments());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return Objects.hash(name, priority, frequency, tags, deadline, attachments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .append(\" Priority: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .append(getPriority())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .append(\" Frequency: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .append(getFrequency())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .append(\" Deadline: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .append(getDeadline())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        builder.append(\" Attachments: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        getAttachments().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 33,
      "-": 59,
      "kc97ble": 25,
      "btzy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls. A task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * updating of tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueTaskList. However, the removal of a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * task uses Task#equals(Object) so as to ensure that the task with exactly the same fields will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds a task to the list. The task must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}. {@code target} must"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * exist in the list. The task identity of {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * existing task in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (!target.equals(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Removes the equivalent task from the list. The task must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}. {@code tasks} must not contain"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * duplicate tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (tasks.get(i).equals(tasks.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 44,
      "-": 85,
      "btzy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidPredicateException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Signals that the predicate is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class InvalidPredicateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateException(Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidPredicateOperatorException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Signals that the predicate operator is invalid in the context of a particular field."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class InvalidPredicateOperatorException extends InvalidPredicateException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateOperatorException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateOperatorException(Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidPredicateTestPhraseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Signals that the predicate test phrase is invalid in the context of a particular field."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class InvalidPredicateTestPhraseException extends InvalidPredicateException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateTestPhraseException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public InvalidPredicateTestPhraseException(Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Contains utility methods for populating {@code TaskCollection} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"CS2101 Oral Presentation\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"1\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"5\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"12/10/2018\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                getTagSet(\"project\", \"cs2101\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"CS2106 Lab 4\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"2\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"10\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"25/10/2018\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                getTagSet(\"programming\", \"easy\", \"cs2106\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"CS2103T Tutorial\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"3\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"15\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"10/10/2018\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                getTagSet(\"cs2103t\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"Dinner at MBS\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"3\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"20\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"27/10/2018\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"PS4\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"2\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"25\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"12/10/2018\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                getTagSet(\"cs2040c\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new Task(new Name(\"Badminton\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Priority(\"3\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                new Frequency(\"30\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new Deadline(\"12/10/2018\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                getTagSet(\"friends\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static ReadOnlyTaskCollection getSampleTaskCollection() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection sampleAb \u003d new TaskCollection();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a attachment set containing the list of attachments given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static Set\u003cAttachment\u003e getAttachmentSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(File::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(Attachment::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 36,
      "-": 29,
      "kc97ble": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SetUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.StringTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.FilterOperator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateOperatorException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidPredicateTestPhraseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Contains utility methods for manipulating Sets."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": " * It is currently used to make filters for tags and attachments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class SetUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Constructs a predicate from the given operator and test phrase."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Test phrase should be a comma-separated list of values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param klass      The class that this filter is being made for."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param operator   The operator for this predicate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param testPhrase The test phrase for this predicate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static \u003cT\u003e Predicate\u003cSet\u003cT\u003e\u003e makeFilter(Class\u003cT\u003e klass, FilterOperator operator, String testPhrase)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "        throws InvalidPredicateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "            // comma-separated quotable tokenizer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "            StringTokenizer tokenizer \u003d new StringTokenizer(testPhrase,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "                ch -\u003e ch \u003d\u003d \u0027,\u0027, ch -\u003e ch \u003d\u003d \u0027\\\u0027\u0027 || ch \u003d\u003d \u0027\\\"\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "            Set\u003cT\u003e items \u003d tokenizer.toList().stream().map(String::trim).map(token -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "                if (token.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    throw new IllegalArgumentException(\"Tag cannot be empty\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    return klass.getDeclaredConstructor(String.class).newInstance(token);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "                } catch (NoSuchMethodException | InstantiationException | IllegalAccessException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    | InvocationTargetException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "                    throw new IllegalArgumentException(\"Class does not support construction from a single string\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "            switch (operator) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return set -\u003e set.equals(items);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "            case LESS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return set -\u003e set.stream().allMatch(item -\u003e items.contains(item));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "            case CONVENIENCE: // convenience operator, works the same as \"\u003e\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "            case GREATER:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "                return set -\u003e items.stream().allMatch(item -\u003e set.contains(item));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "                throw new InvalidPredicateOperatorException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new InvalidPredicateTestPhraseException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ImportExportStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Represents a storage for {@link TaskCollection}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public interface ImportExportStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Path getTaskCollectionFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Returns TaskCollection data as a {@link ReadOnlyTaskCollection}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * if import file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filePath location of import file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Optional\u003cReadOnlyTaskCollection\u003e importTaskCollection(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskCollection} to the path specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param taskCollection cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filePath location of export file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void exportTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath, boolean shouldOverwrite)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ExportRequestEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ImportRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public interface Storage extends ImportExportStorage, TaskCollectionStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    String MESSAGE_WRITE_FILE_EXISTS_ERROR \u003d \"Save file already exists.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            + \" Please rename or force export with the r/overwrite flag.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    String MESSAGE_READ_FILE_MISSING_ERROR \u003d \"File does not exist.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            + \" Double check your import file.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    String MESSAGE_READ_FILE_SAME_ERROR \u003d \"Cannot import from the current working file.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Path getTaskCollectionFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void saveTaskCollection(ReadOnlyTaskCollection taskCollection) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Imports a task collection from an external save file. The file must exist, otherwise an IOException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * will be thrown."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filePath file to import"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @return The task collection wrapped in an Optional class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Optional\u003cReadOnlyTaskCollection\u003e importTaskCollection(Path filePath)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Exports the current view of task collection to a path specified. The path must not already exist,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * otherwise an IOException will be thrown"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param taskCollection A view of the task collection to be exported"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filePath The file to export to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void exportTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath, boolean shouldOverwrite)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throws IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves the current version of the deadline manager to the hard disk. Creates the data file if it"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * is missing. Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void handleTaskCollectionChangedEvent(TaskCollectionChangedEvent abce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void handleExportRequestEvent(ExportRequestEvent ere);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void handleImportRequestEvent(ImportRequestEvent ire);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 33,
      "sijie123": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ExportRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.ImportRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportDataAvailableEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportExportExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Manages storage of TaskCollection data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private TaskCollectionStorage privateTaskCollectionStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public StorageManager(TaskCollectionStorage privateTaskCollectionStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        this.privateTaskCollectionStorage \u003d privateTaskCollectionStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskCollection methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Path getTaskCollectionFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return privateTaskCollectionStorage.getTaskCollectionFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return readTaskCollection(privateTaskCollectionStorage.getTaskCollectionFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection(Path filePath)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return privateTaskCollectionStorage.readTaskCollection(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void saveTaskCollection(ReadOnlyTaskCollection taskCollection) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        saveTaskCollection(taskCollection, privateTaskCollectionStorage.getTaskCollectionFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void saveTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        privateTaskCollectionStorage.saveTaskCollection(taskCollection, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Optional\u003cReadOnlyTaskCollection\u003e importTaskCollection(Path filePath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (!fileExists(filePath)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new IOException(MESSAGE_READ_FILE_MISSING_ERROR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        TaskCollectionStorage importExportStorage \u003d new XmlTaskCollectionStorage(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        logger.fine(\"Attempting to import from file: \" + filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return importExportStorage.readTaskCollection(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void exportTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath, boolean shouldOverwrite)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        if (!shouldOverwrite \u0026\u0026 fileExists(filePath)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new IOException(MESSAGE_WRITE_FILE_EXISTS_ERROR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        TaskCollectionStorage importExportStorage \u003d new XmlTaskCollectionStorage(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        logger.fine(\"Attempting to export to file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        importExportStorage.saveTaskCollection(taskCollection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleTaskCollectionChangedEvent(TaskCollectionChangedEvent event) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            saveTaskCollection(event.data);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleExportRequestEvent(ExportRequestEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Exporting file\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            exportTaskCollection(event.data, getPathFromFileName(event.filename), event.overwrite);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            raise(new ImportExportExceptionEvent(e));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleImportRequestEvent(ImportRequestEvent event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Importing file\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            ReadOnlyTaskCollection data \u003d importTaskCollection(getPathFromFileName(event.filename)).get();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            raise(new ImportDataAvailableEvent(data));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            raise(new ImportExportExceptionEvent(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Helper function to determine whether file exists."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param filePath File to be inspected"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @return true if file exists, false otherwise"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private static boolean fileExists(Path filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        File file \u003d new File(filePath.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return file.exists() \u0026\u0026 file.isFile();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private Path getPathFromFileName(String fileName) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return Paths.get(fileName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 69,
      "sijie123": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskCollectionStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a storage for {@link TaskCollection}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public interface TaskCollectionStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Path getTaskCollectionFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns TaskCollection data as a {@link ReadOnlyTaskCollection}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @see #getTaskCollectionFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskCollection} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @param taskCollection cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    void saveTaskCollection(ReadOnlyTaskCollection taskCollection) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * @see #saveTaskCollection(ReadOnlyTaskCollection)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void saveTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 11,
      "-": 31,
      "sijie123": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAttachment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * JAXB-friendly adapted version of Attachment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlAdaptedAttachment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs an XmlAdaptedAttachment. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedAttachment() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs a {@code XmlAdaptedAttachment} with the given {@code filePath}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedAttachment(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Converts a given Attachment into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedAttachment(Attachment source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        filePath \u003d source.file.getAbsolutePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                               task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Attachment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //TODO: Check if attachment file exists"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new Attachment(new File(filePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof XmlAdaptedAttachment)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return filePath.equals(((XmlAdaptedAttachment) other).filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs an XmlAdaptedTag. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedTag() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                               task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private String frequency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private List\u003cXmlAdaptedAttachment\u003e attachments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs an XmlAdaptedTask. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public XmlAdaptedTask(String name, String priority, String frequency, String deadline,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedAttachment\u003e attachments) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (attachments !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.attachments \u003d new ArrayList\u003c\u003e(attachments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTask"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        frequency \u003d source.getFrequency().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachments \u003d source.getAttachments().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(XmlAdaptedAttachment::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                               task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (frequency \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Frequency.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        if (!Frequency.isValidFrequency(frequency)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            throw new IllegalValueException(Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        final Frequency modelFrequency \u003d new Frequency(frequency);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btzy"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Deadline modelDeadline;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "            modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS, e);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final List\u003cAttachment\u003e taskAttachments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (XmlAdaptedAttachment attachment : attachments) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskAttachments.add(attachment.toModelType());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final Set\u003cAttachment\u003e modelAttachments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cString\u003e attachmentNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (Attachment attachment : taskAttachments) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (attachmentNames.contains(attachment.getName())) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new IllegalValueException(Attachment.MESSAGE_DUPLICATE_ATTACHMENT_NAME);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                modelAttachments.add(attachment);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                attachmentNames.add(attachment.getName());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Task(modelName, modelPriority, modelFrequency,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            modelDeadline, modelTags, modelAttachments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask otherPerson \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 Objects.equals(priority, otherPerson.priority)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 Objects.equals(frequency, otherPerson.frequency)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 attachments.equals(otherPerson.attachments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 56,
      "-": 68,
      "kc97ble": 32,
      "btzy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Stores deadline manager data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Saves the given deadline manager data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableTaskCollection taskCollection)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            XmlUtil.saveDataToFile(file, taskCollection);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns deadline manager in the file or an empty deadline manager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static XmlSerializableTaskCollection loadDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTaskCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * An Immutable TaskCollection that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "@XmlRootElement(name \u003d \"taskcollection\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlSerializableTaskCollection {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates an empty XmlSerializableTaskCollection. This empty constructor is required for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlSerializableTaskCollection() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlSerializableTaskCollection(ReadOnlyTaskCollection src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        tasks.addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Converts this Task Collection into the model\u0027s {@code TaskCollection} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *                               the {@code XmlAdaptedTask}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCollection toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection taskCollection \u003d new TaskCollection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (XmlAdaptedTask p : tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Task task \u003d p.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (taskCollection.hasTask(task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollection.addTask(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return taskCollection;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof XmlSerializableTaskCollection)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return tasks.equals(((XmlSerializableTaskCollection) other).tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 28,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTaskCollectionStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A class to access TaskCollection data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlTaskCollectionStorage implements TaskCollectionStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTaskCollectionStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public XmlTaskCollectionStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Path getTaskCollectionFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return readTaskCollection(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Similar to {@link #readTaskCollection()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public Optional\u003cReadOnlyTaskCollection\u003e readTaskCollection(Path filePath)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            logger.info(\"TaskCollection file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection xmlDeadlineManager \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return Optional.of(xmlDeadlineManager.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void saveTaskCollection(ReadOnlyTaskCollection taskCollection) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        saveTaskCollection(taskCollection, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "     * Similar to {@link #saveTaskCollection(ReadOnlyTaskCollection)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void saveTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        requireNonNull(taskCollection);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTaskCollection(taskCollection));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 15,
      "-": 61,
      "sijie123": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void loadTaskPage(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + task.getName().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void handleTaskPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        loadTaskPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 66,
      "btzy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.ExecuteCommandEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        commandTextField.textProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot}, if there exists a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot}, if there exists a next"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * input in {@code historySnapshot}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and positions the caret to the end of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the {@code text}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void handleExecuteCommandEvent(ExecuteCommandEvent event) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        replaceText(event.commandText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        handleCommandEntered();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.SelectFileSaveEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getDeadlineManagerFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void handleSelectFileSaveEvent(SelectFileSaveEvent event) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        fileChooser.setTitle(\"Save File as ...\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File saveDestination \u003d fileChooser.showSaveDialog(primaryStage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        event.fileReceiver.accept(saveDestination);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 22,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TODO: change clock to an instance variable. We leave it as a static variable because manual"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * dependency injection will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void handleTaskCollectionChangedEvent(TaskCollectionChangedEvent abce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logger.info(LogsCenter"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 76,
      "sijie123": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.ExecuteCommandEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.SelectFileSaveEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.AttachmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String DEADLINE_FORMAT \u003d \"Due %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String PRIORITY_FORMAT \u003d \"Priority %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String FREQUENCY_FORMAT \u003d \"Frequency %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCollection level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private Label frequency;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private FlowPane attachments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "        name.setText(task.getName().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        priority.setText(String.format(PRIORITY_FORMAT, task.getPriority().value));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        frequency.setText(String.format(FREQUENCY_FORMAT, task.getFrequency().value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deadline.setText(String.format(DEADLINE_FORMAT, task.getDeadline().toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        task.getAttachments().forEach(attachment -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            attachments.getChildren().add(buildAttachmentLabel(attachment, displayedIndex)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Helper method to construct a label for each attachment."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds a mouse click handler to invoke the attachment get command when the label is clicked"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param attachment the attachment"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param index index of the attachmentin the current list/UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return label with mouse click handler"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Label buildAttachmentLabel(Attachment attachment, int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Label label \u003d new Label(attachment.getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        label.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            raise(new SelectFileSaveEvent(file -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                String commandText \u003d String.format(\"%s %d %s %s%s %s%s\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    AttachmentCommand.COMMAND_WORD, index,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    AttachmentCommand.COMMAND_GET_ACTION,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    PREFIX_FILENAME, attachment.getName(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    PREFIX_FILEPATH, file.getPath()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                raise(new ExecuteCommandEvent(commandText));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 57,
      "-": 46,
      "kc97ble": 6,
      "btzy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    raise(new TaskPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 27,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Stops the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                               Throwable cause) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                String contentText) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                               String headerText,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            event.exception);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 16,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 15,
      "-": 97
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "               onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "#attachments {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "#attachments .label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-color: #a9a9a9;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-padding: 1 3 1 17;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-image: url(\u0027blank-file.png\u0027);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-size: 12px 12px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    -fx-background-position: 3px;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 19,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                  text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                          SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "               nodeOrientation\u003d\"RIGHT_TO_LEFT\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u003cLabel fx:id\u003d\"frequency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$frequency\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"attachments\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 11,
      "-": 28,
      "kc97ble": 2
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "  \"deadlineManagerFilePath\": \"deadlinemanager.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "  \"deadlineManagerFilePath\": \"deadlinemanager.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableTaskCollectionTest/invalidTaskInTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003c!-- Task with invalid priority field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003ea\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e1/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 2,
      "kc97ble": 2,
      "btzy": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableTaskCollectionTest/typicalTasksInTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c!-- TaskCollection save file which contains the same Task values as in TypicalTasks#getTypicaltaskcollection() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e200\u003c/frequency\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e1/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003eworld.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e205\u003c/frequency\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e1/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003eworld.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e210\u003c/frequency\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e31/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003eworld.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e4\u003c/priority\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e215\u003c/frequency\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e2/1/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e220\u003c/frequency\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e2/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e225\u003c/frequency\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e2/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003eworld.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency\u003e230\u003c/frequency\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline\u003e2/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 25,
      "-": 12,
      "kc97ble": 14,
      "btzy": 7
    }
  },
  {
    "path": "src/test/data/XmlTaskCollectionStorageTest/invalidAndValidTaskInTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c!-- Valid Task --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003c!-- Task with invalid phone and invalid priority field --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003ea\u003c/priority\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 3,
      "kc97ble": 3
    }
  },
  {
    "path": "src/test/data/XmlTaskCollectionStorageTest/invalidTaskInTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c!-- Task with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 2,
      "kc97ble": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidTaskField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "\u003c!-- Task with an invalid priority field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cpriority\u003ea\u003c/priority\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cfrequency\u003eb\u003c/frequency\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 3,
      "kc97ble": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingTaskField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c!-- Task with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cfrequency\u003e7\u003c/frequency\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 2,
      "kc97ble": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTask.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    \u003cfrequency\u003e7\u003c/frequency\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "    \u003cdeadline\u003e1/12/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 3,
      "kc97ble": 2,
      "btzy": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTaskCollection.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003ctaskcollection\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e100\u003c/frequency\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e1/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \u003cattachments\u003ehello.txt\u003c/attachments\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e105\u003c/frequency\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e1/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e110\u003c/frequency\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e10/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e4\u003c/priority\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e115\u003c/frequency\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e1/5/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e120\u003c/frequency\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e31/1/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e125\u003c/frequency\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e1/2/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e130\u003c/frequency\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e30/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e4\u003c/priority\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e135\u003c/frequency\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e5/10/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        \u003cfrequency isPrivate\u003d\"false\"\u003e140\u003c/frequency\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        \u003cdeadline isPrivate\u003d\"false\"\u003e15/5/2020\u003c/deadline\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/taskcollection\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 21,
      "-": 10,
      "kc97ble": 18,
      "btzy": 9
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Robot used to simulate user actions on the GUI. Extends {@link FxRobot} by adding some customized"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * examine the effects of the test. This method will be disabled when the GUI tests are executed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * in headless mode to avoid unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               milliseconds."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .equals(stageTitle))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * title. The order that the windows are searched are as follows (proximity): current target"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * window, children of the target window, rest of the windows."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Stage.class::cast)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 13,
      "-": 109
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * recent {@code rememberUrl()} call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * page."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 60
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated with the menu bar in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code MainWindow}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final TaskListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        personListPanel \u003d new TaskListPanelHandle("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * by the most recent {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * remembered by the most recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 68
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.TaskCard.DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.ui.TaskCard.FREQUENCY_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.TaskCard.PRIORITY_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String FREQUENCY_FIELD_ID \u003d \"#frequency\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String ATTACHMENTS_FIELD_ID \u003d \"#attachments\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private final Label priorityLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private final Label frequencyLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final List\u003cLabel\u003e attachmentLabels;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        frequencyLabel \u003d getChildNode(FREQUENCY_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Region attachmentsContainer \u003d getChildNode(ATTACHMENTS_FIELD_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachmentLabels \u003d attachmentsContainer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return priorityLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public String getFrequency() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return frequencyLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public List\u003cString\u003e getAttachments() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return attachmentLabels"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return getName().equals(task.getName().value)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 getPriority().equals(String.format(PRIORITY_FORMAT, task.getPriority().value))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \u0026\u0026 getFrequency().equals(String.format(FREQUENCY_FORMAT, task.getFrequency().value))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 getDeadline().equals(String.format(DEADLINE_FORMAT, task.getDeadline().toString()))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .collect(Collectors.toList())))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getAttachments())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .equals(ImmutableMultiset.copyOf(task.getAttachments().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .map(attachment -\u003e attachment.getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 40,
      "-": 56,
      "kc97ble": 16,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}. A maximum of 1 item can be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * selected at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Selects the {@code TaskCard} at {@code index} in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the task card handle of a task associated with the {@code index} in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns all card nodes in the scene graph. Card nodes that are visible in the listview are"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * definitely in the scene graph, while some nodes that are not visible in the listview may also"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * be in the scene graph."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * most recent {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 45,
      "-": 117
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * successfully loaded."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void waitUntilBrowserLoaded(BrowserPanelHandle browserPanelHandle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlSerializableTaskCollection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected Supplier\u003cReadOnlyTaskCollection\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTaskCollection\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            createDataFileWithData(new XmlSerializableTaskCollection(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        userPrefs.setDeadlineManagerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a defensive copy of the deadline manager data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCollection readStorageTaskCollection() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new TaskCollection(storage.readTaskCollection().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new AssertionError(\"Data is not in the TaskCollection format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        return storage.getTaskCollectionFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTaskCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 13,
      "sidhant007": 2,
      "-": 103,
      "sijie123": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Deadline Manager\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Version.fromString(versionString));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Index#fromOneBased(int)} (if it is one based), and confirms that an {@code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                       String word,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                       Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlAdaptedAttachment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlAdaptedTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlSerializableTaskCollection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTaskCollection.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .resolve(\"missingTaskField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .resolve(\"invalidTaskField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTask.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .getFilePathInSandboxFolder(\"tempTaskCollection.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"a\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_FREQUENCY \u003d \"b\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_FREQUENCY \u003d \"7\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"10/1/2019\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final List\u003cXmlAdaptedAttachment\u003e VALID_ATTACHMENTS \u003d Collections"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .singletonList(new XmlAdaptedAttachment(\"hello.txt\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlUtil.getDataFromFile(null, TaskCollection.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, TaskCollection.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, TaskCollection.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection dataFromFile \u003d XmlUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getDataFromFile(VALID_FILE, XmlSerializableTaskCollection.class).toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(9, dataFromFile.getTaskList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MISSING_PERSON_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask expectedPerson \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            null, VALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE, VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            INVALID_PERSON_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask expectedPerson \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            VALID_NAME, INVALID_PRIORITY, INVALID_FREQUENCY, VALID_DEADLINE, VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            VALID_PERSON_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask expectedPerson \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            VALID_NAME, VALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE, VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlUtil.saveDataToFile(null, new TaskCollection());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new TaskCollection());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection dataToWrite \u003d new XmlSerializableTaskCollection(new TaskCollection());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection dataFromFile \u003d XmlUtil"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getDataFromFile(TEMP_FILE, XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskManagerBuilder builder \u003d new TaskManagerBuilder(new TaskCollection());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        dataToWrite \u003d new XmlSerializableTaskCollection("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            builder.withPerson(new TaskBuilder().build()).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code XmlAdaptedTask} objects."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @XmlRootElement(name \u003d \"task\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 48,
      "-": 102,
      "kc97ble": 7,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value of {@code"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value of {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value of {@code"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following {@code pointer#next()}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following {@code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following {@code"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 15,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correct. Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * is correct."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * exception is thrown, and also confirms that the following two parts of the LogicManager"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * object\u0027s state are as expected:\u003cbr\u003e - the internal model manager data are same as those in"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the {@code expectedModel} \u003cbr\u003e - {@code expectedModel}\u0027s deadline manager was saved to the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * storage file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                \"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 28,
      "sidhant007": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskInList \u003d model.getTaskCollection().getTaskList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 10,
      "sidhant007": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ModelStubWithPerson(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return this.task.equals(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return tasksAdded.contains(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public void commitTaskCollection() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public ReadOnlyTaskCollection getTaskCollection() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return new TaskCollection();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 31,
      "sidhant007": 4,
      "-": 100,
      "btzy": 1,
      "sijie123": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttachmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Contains unit tests for AttachmentCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class AttachmentCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static File nonExistentFile \u003d new File(\"blabla/not-here1827364.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates a temporary file for use in testing Attachment Command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return Temporary file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private File createTestFile() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            File file \u003d File.createTempFile(\"deadline-manager-attachment-test-\", \".zip\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return file;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void deleteTestFile(File file) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(file.delete());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates a copy of the provided task with additional attachments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param task        The original task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @param attachments Attachments to be added to the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Task addAttachmentToTask(Task task, Attachment... attachments) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cAttachment\u003e attachmentSet \u003d new HashSet\u003c\u003e(task.getAttachments());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cAttachment\u003e newAttachments \u003d Arrays.asList(attachments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachmentSet.addAll(new HashSet\u003c\u003e(newAttachments));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task modifiedTask \u003d new TaskBuilder(task).withAttachments(attachmentSet).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return modifiedTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TODO:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * - Add attachment"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * - Delete attachment"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * - List attachment"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * - Get attachment"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_addAttachmentFileNotFound_error() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String nonExistentFilePath \u003d nonExistentFile.getPath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.AddAttachmentAction(nonExistentFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.AddAttachmentAction.MESSAGE_ADD_NOT_A_FILE, nonExistentFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_addAttachmentFile_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File tempFile \u003d createTestFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String filePath \u003d tempFile.getAbsolutePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.AddAttachmentAction.MESSAGE_SUCCESS, tempFile.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task expectedTask \u003d addAttachmentToTask("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new Attachment(tempFile));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), expectedTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(attachmentCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(tempFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_addAttachmentFileDuplicatedFile_error() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File tempFile \u003d createTestFile();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Construct a file with one attachment"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task task \u003d addAttachmentToTask("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new Attachment(tempFile));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model modelStub \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        modelStub.updateTask(model.getFilteredTaskList().get(0), task);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        modelStub.commitTaskCollection();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //Attempt to add it again using absolute path -\u003e should fail"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String filePath \u003d tempFile.getAbsolutePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d Attachment.MESSAGE_DUPLICATE_ATTACHMENT_NAME;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, modelStub, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //Attempt to add it using relative path --\u003e should fail"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        filePath \u003d tempFile.getPath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        action \u003d new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, modelStub, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //Attempt to add a non-existing file with duplicated name --\u003e should show file not exists"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        filePath \u003d tempFile.getName();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        action \u003d new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.AddAttachmentAction.MESSAGE_ADD_NOT_A_FILE, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, modelStub, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(tempFile);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_addAttachmentMultipleFiles_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        int numberOfFiles \u003d 25;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File[] tempFiles \u003d new File[numberOfFiles];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfFiles; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            tempFiles[i] \u003d createTestFile();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String filePath \u003d tempFiles[i].getAbsolutePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new AttachmentCommand.AddAttachmentAction(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                AttachmentCommand.AddAttachmentAction.MESSAGE_SUCCESS, tempFiles[i].getName());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Task expectedTask \u003d addAttachmentToTask(task, new Attachment(tempFiles[i]));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            expectedModel.updateTask(task, expectedTask);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assertCommandSuccess(attachmentCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            task \u003d expectedTask;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfFiles; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            deleteTestFile(tempFiles[i]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_deleteAttachmentInvalid_error() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String nonExistentFileName \u003d nonExistentFile.getName();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.DeleteAttachmentAction(nonExistentFileName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.DeleteAttachmentAction.MESSAGE_NAME_NOT_FOUND, nonExistentFileName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_deleteAttachment_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File tempFile \u003d createTestFile();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Construct a file with one attachment"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task originalTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskWithAttachment \u003d addAttachmentToTask(originalTask, new Attachment(tempFile));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model modelStub \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        modelStub.updateTask(originalTask, taskWithAttachment);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        modelStub.commitTaskCollection();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model baseModel \u003d new ModelManager(new TaskCollection(modelStub.getTaskCollection()),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //Attempt to remove it from attachments"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String fileName \u003d tempFile.getName();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.DeleteAttachmentAction(fileName);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.DeleteAttachmentAction.MESSAGE_SUCCESS, fileName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(modelStub.getTaskCollection()),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        expectedModel.updateTask(taskWithAttachment, originalTask);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(attachmentCommand, baseModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(tempFile);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_listAttachment_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d new AttachmentCommand.ListAttachmentAction();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cAttachment\u003e attachments \u003d task.getAttachments();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.ListAttachmentAction.MESSAGE_TOTAL_ATTACHMENTS, attachments.size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        int indexCounter \u003d 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (Attachment attachment : attachments) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            indexCounter++;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedMessage +\u003d String.format("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                AttachmentCommand.ListAttachmentAction.MESSAGE_LIST_ATTACHMENT_DETAILS, indexCounter,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                attachment.toString());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(attachmentCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_getAttachmentInvalid_error() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String nonExistentFileName \u003d nonExistentFile.getName();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.GetAttachmentAction(nonExistentFileName, nonExistentFileName);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.GetAttachmentAction.MESSAGE_NAME_NOT_FOUND, nonExistentFileName);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(attachmentCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_getAttachment_success() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File tempFile \u003d createTestFile();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Construct a file with one attachment"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Task originalTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskWithAttachment \u003d addAttachmentToTask(originalTask, new Attachment(tempFile));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Model modelStub \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        modelStub.updateTask(originalTask, taskWithAttachment);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        modelStub.commitTaskCollection();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File outputFile \u003d createTestFile();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(outputFile);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //Attempt to get it from attachments"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String fileName \u003d tempFile.getName();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String outputPath \u003d outputFile.getPath();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand.AttachmentAction action \u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AttachmentCommand.GetAttachmentAction(fileName, outputPath);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AttachmentCommand attachmentCommand \u003d new AttachmentCommand(INDEX_FIRST_TASK, action);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            AttachmentCommand.GetAttachmentAction.MESSAGE_SUCCESS, fileName, outputPath);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Model expectedModel \u003d modelStub;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(attachmentCommand, modelStub, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //TODO: Upgrade to check contents of the file"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        //assertTrue(Arrays.equals(Files.readAllBytes(tempFile.toPath()), Files.readAllBytes(outputFile.toPath())));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(tempFile);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteTestFile(outputFile);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 276,
      "sijie123": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_emptyTaskCollection_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_nonEmptyTaskCollection_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.resetData(new TaskCollection());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 13,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String VALID_PRIORITY_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String VALID_PRIORITY_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String VALID_FREQUENCY_AMY \u003d \"5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String VALID_FREQUENCY_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String VALID_DEADLINE_AMY \u003d \"1/10/2018\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String VALID_DEADLINE_BOB \u003d \"1/11/2018\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String FREQUENCY_DESC_AMY \u003d \" \" + PREFIX_FREQUENCY + VALID_FREQUENCY_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String FREQUENCY_DESC_BOB \u003d \" \" + PREFIX_FREQUENCY + VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String DEADLINE_DESC_AMY \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String DEADLINE_DESC_BOB \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \" \" + PREFIX_PRIORITY + \"a\"; // \u0027a\u0027 not allowed in priorities"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String INVALID_FREQUENCY_DESC \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \" \" + PREFIX_FREQUENCY + \"a\"; // \u0027a\u0027 not allowed in priorities"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "            \" \" + PREFIX_DEADLINE + \"a\"; // \u0027a\u0027 not allowed in deadlines"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DESC_AMY \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withPriority(VALID_PRIORITY_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withFrequency(VALID_FREQUENCY_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DESC_BOB \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - the result message matches {@code"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e - the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - a {@code CommandException} is thrown"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * \u003cbr\u003e - the CommandException message matches {@code expectedMessage} \u003cbr\u003e - the deadline manager"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * and the filtered task list in the {@code actualModel} remain unchanged \u003cbr\u003e - {@code"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        TaskCollection expectedTaskCollection \u003d new TaskCollection(actualModel.getTaskCollection());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            assertEquals(expectedTaskCollection, actualModel.getTaskCollection());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * in the {@code model}\u0027s deadline manager."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": "        final String[] splitName \u003d task.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateFilteredTaskList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s deadline manager."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.commitTaskCollection();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 30,
      "sidhant007": 10,
      "-": 83,
      "kc97ble": 18,
      "btzy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of deadline manager list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskCollection().getTaskList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // undo -\u003e reverts taskcollection back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // execution failed -\u003e deadline manager state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // single deadline manager state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list. 2. Undo the deletion. 3. The unfiltered list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * should be shown now. Verify that the index of the previously deleted task in the unfiltered"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * list is different from the index at the filtered list. 4. Redo the deletion. This ensures"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // undo -\u003e reverts taskcollection back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertNotEquals(taskToDelete,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 60,
      "sidhant007": 18,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Preserve attachments as editedTask should have the same attachment"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            .withAttachments(model.getFilteredTaskList().get(0).getAttachments())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d taskInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditCommand.EditTaskDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(1), firstTask);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * deadline manager"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of deadline manager list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskCollection().getTaskList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withAttachments(taskToEdit.getAttachments())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // undo -\u003e reverts taskcollection back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // execution failed -\u003e deadline manager state not added into model"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // single deadline manager state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 1. Edits a {@code Task} from a filtered list. 2. Undo the edit. 3. The unfiltered list should"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * be shown now. Verify that the index of the previously edited task in the unfiltered list is"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * different from the index at the filtered list. 4. Redo the edit. This ensures {@code"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * RedoCommand} edits the task object regardless of indexing."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withAttachments(taskToEdit.getAttachments())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskCollection(model.getTaskCollection()),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.commitTaskCollection();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // undo -\u003e reverts taskcollection back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskToEdit);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // redo -\u003e edits same second task in unfiltered task list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_AMY);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor copyDescriptor \u003d new EditCommand.EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_AMY)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_BOB)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 110,
      "sidhant007": 24,
      "-": 131,
      "kc97ble": 1,
      "btzy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptorWithSameValues \u003d new EditCommand.EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // different frequency -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withFrequency(VALID_FREQUENCY_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 41,
      "kc97ble": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportExportExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final String temporaryFilePath \u003d \"dummySaveFile\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String defaultFile \u003d \"fakeDefaultPath\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void execute_exportOnExistingFile_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        IOException expectedException \u003d new IOException(StorageManager.MESSAGE_WRITE_FILE_EXISTS_ERROR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ExportCommand testCommand \u003d new ExportCommand(defaultFile, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ModelStubWithExportAddressBook modelStub \u003d new ModelStubWithExportAddressBook(defaultFile, testCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertCommandFailure(testCommand, modelStub, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(ExportCommand.MESSAGE_EXPORT_ERROR, expectedException.toString()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void execute_exportNewFile_exportSuccessful() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ExportCommand testCommand \u003d new ExportCommand(temporaryFilePath, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ModelStubWithExportAddressBook modelStub \u003d new ModelStubWithExportAddressBook(defaultFile, testCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertCommandSuccess(testCommand, modelStub, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                 String.format(ExportCommand.MESSAGE_SUCCESS, temporaryFilePath), modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void execute_overwriteExportOnExistingFile_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ExportCommand testCommand \u003d new ExportCommand(defaultFile, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ModelStubWithExportAddressBook modelStub \u003d new ModelStubWithExportAddressBook(defaultFile, testCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertCommandSuccess(testCommand, modelStub, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(ExportCommand.MESSAGE_SUCCESS, defaultFile), modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private class ModelStubWithExportAddressBook extends ModelStub {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        private String filename \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        private ExportCommand testCommand \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public ModelStubWithExportAddressBook(String defaultFile) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            filename \u003d defaultFile;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public ModelStubWithExportAddressBook(String defaultFile, ExportCommand importCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            this(defaultFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            testCommand \u003d importCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public TaskCollection getTaskCollection() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new TaskCollection();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return FXCollections.unmodifiableObservableList(new TaskCollection().getTaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public void exportTaskCollection(String filename, boolean shouldOverwrite) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            if (shouldOverwrite) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                //No error."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            if (filename.equals(this.filename)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                Exception fileExistException \u003d new IOException(Storage.MESSAGE_WRITE_FILE_EXISTS_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                testCommand.handleImportExportExceptionEvent(new ImportExportExceptionEvent(fileExistException));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            //No error otherwise."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 2,
      "sijie123": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.FilterCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameSubstring_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n\u003eMeier\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameSuperstring_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n\u003c\u0027Carl Kurz Test\u0027\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(CARL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameQuotedDouble_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n\u003e\\\"Carl K\\\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(CARL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameQuotedSingle_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n\u003e\\\u0027Carl K\\\u0027\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(CARL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameConvenience_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n:Meier\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameExact_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"n:\u0027Benson Meier\u0027\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameLongform_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"name:\u0027Benson Meier\u0027\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_nameSpaced_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"n: Meier\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"n : Meier\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"n :Meier\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"n  :   Meier\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueExact_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"d\u003d1/10/2018\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueEarlier_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"d\u003c2/10/2018\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueLater_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"d\u003e1/11/2018\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueConvenience_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"d:2/10/2018\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueLongform_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command \u003d ensureParseSuccess(\"due:2/10/2018\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void execute_dueSpaced_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btzy"
        },
        "content": "        FilterCommand command;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"due: 2/10/2018\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"due : 2/10/2018\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"due :2/10/2018\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command \u003d ensureParseSuccess(\"due  :   2/10/2018\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btzy"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Throws an assertion error if parsing fails, or else returns the successfully parsed FilterCommand."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @param predicate The string to parse as a predicate."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * @return The filter command, on success."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private FilterCommand ensureParseSuccess(String predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btzy"
        },
        "content": "            return new FilterCommandParser().parse(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btzy"
        },
        "content": "            throw new AssertionError(\"ParseException was thrown.\", e);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 10,
      "sidhant007": 20,
      "btzy": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 14,
      "sidhant007": 4,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportExportExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ImportConflictResolver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final String temporaryFilePath \u003d \"dummySaveFile\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public final String doesNotExistPath \u003d \"doesNotExist\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private String defaultFile \u003d \"fakeDefaultPath\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void execute_importMissingFile_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        IOException expectedException \u003d new IOException(StorageManager.MESSAGE_READ_FILE_MISSING_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ImportCommand testCommand \u003d new ImportCommand(doesNotExistPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ModelStubWithImportAddressBook modelStub \u003d new ModelStubWithImportAddressBook(defaultFile, testCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertCommandFailure(testCommand, modelStub, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(ImportCommand.MESSAGE_IMPORT_ERROR, expectedException.toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void execute_importExistingFile_importSuccessful() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ImportCommand testCommand \u003d new ImportCommand(temporaryFilePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ModelStubWithImportAddressBook modelStub \u003d new ModelStubWithImportAddressBook(defaultFile, testCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertCommandSuccess(testCommand, modelStub, commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                String.format(ImportCommand.MESSAGE_SUCCESS, temporaryFilePath), modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private class ModelStubWithImportAddressBook extends ModelStub {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        private String filename \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        private ImportCommand testCommand \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public ModelStubWithImportAddressBook(String defaultFile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            filename \u003d defaultFile;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public ModelStubWithImportAddressBook(String defaultFile, ImportCommand importCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            this(defaultFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            testCommand \u003d importCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public TaskCollection getTaskCollection() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return new TaskCollection();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            return FXCollections.unmodifiableObservableList(new TaskCollection().getTaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        public void importTaskCollection(String filename, ImportConflictResolver conflictMode) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            if (filename.equals(temporaryFilePath)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                //No error."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            if (filename.equals(this.filename)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                Exception fileRepeatException \u003d new IOException(Storage.MESSAGE_READ_FILE_SAME_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                testCommand.handleImportExportExceptionEvent(new ImportExportExceptionEvent(fileRepeatException));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            if (filename.equals(doesNotExistPath)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                Exception fileMissingException \u003d new IOException(Storage.MESSAGE_READ_FILE_MISSING_ERROR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                testCommand.handleImportExportExceptionEvent(new ImportExportExceptionEvent(fileMissingException));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new AssertionError(\"Should not use this filename\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 2,
      "sijie123": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "sidhant007": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.storage.ImportDataAvailableEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ImportConflictResolver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ModelStub extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void resetData(ReadOnlyTaskCollection newData) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public ReadOnlyTaskCollection getTaskCollection() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateSortedTaskList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean canUndoTaskCollection() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public boolean canRedoTaskCollection() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undoTaskCollection() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redoTaskCollection() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void commitTaskCollection() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void exportTaskCollection(String filename, boolean shouldOverwrite) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void importTaskCollection(String filename, ImportConflictResolver conflictMode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void handleImportDataAvailableEvent(ImportDataAvailableEvent event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "sidhant007": 8,
      "sijie123": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.undoTaskCollection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.undoTaskCollection();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.redoTaskCollection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index lastTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionSuccess(lastTaskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of deadline manager list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTaskCollection().getTaskList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * JumpToListRequestEvent} is raised with the correct index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .format(SelectCommand.MESSAGE_SELECT_TASK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getMostRecent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * CommandException} is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 33,
      "sidhant007": 2,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.parser.SortCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sidhant007"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_nameAscending_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"n\u003c\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_nameDescending_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"n\u003e\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_dueAscendingNameAscending_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"d\u003c n\u003c\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, FIONA, GEORGE, CARL, BENSON, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_dueDescendingNameAscending_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"due\u003e  n\u003c \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, BENSON, CARL, ELLE, FIONA, GEORGE, ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_priorityAscendingNameAscending_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"priority\u003c n\u003c\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, CARL, GEORGE, BENSON, FIONA, ALICE, ELLE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_priorityDescendingNameAscending_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"p\u003e  name\u003c\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, ELLE, BENSON, FIONA, CARL, GEORGE, DANIEL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void execute_frequencyAscendingNameAscending_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"frequency\u003c n\u003c\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void execute_frequencyDescendingNameAscending_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"f\u003e  name\u003c\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_tagAscendingNameDescending_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"tag\u003c{owesMoney friend} n\u003e\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, GEORGE, FIONA, ELLE, DANIEL, CARL, ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void execute_tagDescendingNameDescending_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        SortCommand command \u003d ensureParseSuccess(\"t\u003e{owesMoney friend} n\u003e\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, GEORGE, FIONA, ELLE, DANIEL, CARL, ALICE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Throws an assertion error if parsing fails, or else returns the successfully parsed SortCommand."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * @param comparator The string to parse as a comparator."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * @return The sort command, on success."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private SortCommand ensureParseSuccess(String comparator) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            return new SortCommandParser().parse(comparator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            throw new AssertionError(\"ParseException was thrown.\", e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 10,
      "sidhant007": 93,
      "kc97ble": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskCollections(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.undoTaskCollection();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 14,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FREQUENCY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Frequency.NO_FREQUENCY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Priority.NO_PRIORITY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            PREAMBLE_WHITESPACE + NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + DEADLINE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIORITY_DESC_AMY + PRIORITY_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // multiple frequencies - last frequency accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + DEADLINE_DESC_AMY + DEADLINE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // zero tags, no priority, no frequency"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withTags()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(NO_PRIORITY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(NO_FREQUENCY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            NAME_DESC_AMY + DEADLINE_DESC_AMY,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + VALID_DEADLINE_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PRIORITY_BOB + VALID_FREQUENCY_BOB + VALID_DEADLINE_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            INVALID_NAME_DESC + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            NAME_DESC_BOB + INVALID_PRIORITY_DESC + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // invalid frequency"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            NAME_DESC_BOB + PRIORITY_DESC_BOB + INVALID_FREQUENCY_DESC + DEADLINE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + INVALID_DEADLINE_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btzy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            INVALID_NAME_DESC + INVALID_PRIORITY_DESC + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 21,
      "-": 70,
      "kc97ble": 52,
      "btzy": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                       String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertPreamblePresent(argMultimap,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                          Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FREQUENCY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Priority.MESSAGE_PRIORITY_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FREQUENCY_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Frequency.MESSAGE_FREQUENCY_CONSTRAINTS); // invalid frequency"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // valid priority followed by invalid priority. The test case for invalid priority followed by valid priority"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRIORITY_DESC_BOB + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // valid frequency followed by invalid frequency. The test case for invalid frequency followed by valid"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // frequency is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseFailure(parser, \"1\" + FREQUENCY_DESC_BOB + INVALID_FREQUENCY_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \"1\" + INVALID_NAME_DESC + INVALID_PRIORITY_DESC + INVALID_FREQUENCY_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + TAG_DESC_HUSBAND + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // frequency"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withFrequency(VALID_FREQUENCY_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        //priority"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            targetIndex.getOneBased() + PRIORITY_DESC_AMY + TAG_DESC_FRIEND + PRIORITY_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + TAG_DESC_FRIEND + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // frequency"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            targetIndex.getOneBased() + FREQUENCY_DESC_AMY + TAG_DESC_FRIEND + FREQUENCY_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + TAG_DESC_FRIEND + FREQUENCY_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 38,
      "-": 131,
      "kc97ble": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Test scope: Export command parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Tests for valid and invalid filenames."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_noFile_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" ab\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" r/all\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/all r/\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" a*b\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidFileName_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a/b\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n//all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/b/\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a-b\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/ \", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/文件\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_validFileName_returnsExportCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/ab\", new ExportCommand(\"ab\", false));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/a_b\", new ExportCommand(\"a_b\", false));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/veryverylongname\", new ExportCommand(\"veryverylongname\", false));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/fullstop.txt\", new ExportCommand(\"fullstop.txt\", false));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/filename_xml.txt\", new ExportCommand(\"filename_xml.txt\", false));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidFileNameParameters_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/ab c/what\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a*b r/all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/   r/all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/file r/override\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/file r/invalid\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/wrongCommand r//all\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_validFileNameParameters_returnsExportCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/ab r/overwrite\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ExportCommand(\"ab\", true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/a_b\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ExportCommand(\"a_b\", false));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/filename_xml.txt r/overwrite\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ExportCommand(\"filename_xml.txt\", true));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btzy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btzy"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btzy"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void parse_validArgs_doesNotThrow() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c1/10/2018\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"due\u003c1/10/2018\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003d1/10/2018\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003e1/10/2018\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c01/02/19\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c\\\"01/02/19\\\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d \u003c \\\"01/02/19\\\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d \u003c 01/02/19\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d \u003c01/02/19\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c 01/02/19\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c01/02/19\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"d:01/02/19\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003eHello\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003e\\\"Hello\\\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003e\\\"Hello World\\\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003d\\\"Hello World\\\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:\\\"Hello World\\\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003c\\\"Hello World\\\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Test\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p\u003e1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p\u003c1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p\u003d1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:0\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:3\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:4\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"p:\\\"3\\\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:CS2101,CS2103\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:CS2101\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:\\\"CS2101,CS2103\\\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:\\\u0027CS2101,CS2103\\\u0027\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:\\\u0027CS2101, CS2103\\\u0027\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t :  \\\u0027CS2101, CS2103\\\u0027\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t\u003d\\\"CS2101,CS2103\\\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t\u003c\\\"CS2101,CS2103\\\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t\u003e\\\"CS2101,CS2103\\\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t\u003e\\\"CS2101,\\\u0027CS2103\\\u0027\\\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"t:\\\"CS2101,,CS2103\\\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello \u0026 n:World\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello \u0026\u0026 n:World\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello \u0026\u0026n:World\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello\u0026\u0026 n:World\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello\u0026n:World\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello\u0026\u0026n:World\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello | n:World\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello || n:World\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello ||n:World\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello|| n:World\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello|n:World\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n:Hello||n:World\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"!n:Hello\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"!n:Hello||!n:World\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(!n:Hello||!n:World)\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello||n:World)\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(((n:Hello||n:World)))\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(( (n:Hello   || n:World)) )\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello||n:World)\u0026\u0026n:Test\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello||n:World) \u0026\u0026 n:Test\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || n:World) \u0026\u0026 n:Test\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:CS2103\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n\u003eHello || d:1/10/2018) \u0026\u0026 t:CS2103\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n\u003cHello || d:1/10/2018) \u0026\u0026 t:CS2103\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n\u003dHello || d:1/10/2018) \u0026\u0026 t:CS2103\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"n\u003dHello || d:1/10/2018 \u0026\u0026 t:CS2103\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:CS2103,CS2101\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:\\\"CS2103,CS2101\\\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:\\\u0027CS2103,CS2101\\\u0027\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:\\\"CS2103, CS2101\\\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:\\\u0027CS2103   ,  CS2101\\\u0027\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello || d:1/10/2018) \u0026\u0026 t:\\\u0027CS2103   ,  CS2101\\\u0027\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \" \u0026\u0026 (!n:World || ((!t:CS1231 || t:CS3230) \u0026\u0026 d:1/11/2018))\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseSuccess(parser, \"(n:Hello||d:1/10/2018)\u0026\u0026t:CS2103,CS2101\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "            + \"\u0026\u0026(!n:World||((!t:CS1231||t:CS3230)\u0026\u0026d:1/11/2018))\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c\\\"1/10/2018\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c1/10/2018\\\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c\\\u00271/10/2018\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c\\\u002730/9/17\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003e\\\u002730/9/17\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c\\\u0027\\\u002730/9/17\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c30/9/17\\\u0027\\\u0027\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003c\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003d\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003e\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"d\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"p:5\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"p:b\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"\u003d\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \":\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"-\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"test\u003dtest\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"\u003dtest\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"name\u003e\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"name\u003c\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"name~\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"name:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"t:\\\"CS2101,CS2103\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"(t:\\\"CS2101,CS2103\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"t:CS2101,CS2103 \u0026\u0026 \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"t:CS2101,CS2103 \u0026\u0026 )\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"t:CS2101,CS2103 \u0026\u0026 n:Hello)\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"(\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \")\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"\u0026\u0026 n:Hello\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertParseThrowsException(parser, \"|| n:Hello\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Asserts that the parse was successful."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private void assertParseSuccess(FilterCommandParser parser, String str) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btzy"
        },
        "content": "            FilterCommand command \u003d parser.parse(str);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btzy"
        },
        "content": "            assertNotNull(\"Expected not null\", command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btzy"
        },
        "content": "            fail(\"Expected no parse error\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Asserts that the parse throws a ParseException."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private void assertParseThrowsException(FilterCommandParser parser, String str) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btzy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btzy"
        },
        "content": "            parser.parse(str);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btzy"
        },
        "content": "            fail(\"Expected a parse error\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btzy"
        },
        "content": "        } catch (ParseException ignore) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btzy"
        },
        "content": "            // Do not do anything, because we just want to make sure that an exception is thrown"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btzy": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijie123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.DuplicateImportConflictResolver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.IgnoreImportConflictResolver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.model.OverwriteImportConflictResolver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Test scope: Import command parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijie123"
        },
        "content": " * Tests for valid and invalid filenames, as well as valid and invalid command arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijie123"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_noFile_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" ab\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" r/all\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/all r/\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" a*b\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidFileName_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a/b\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n//all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/b/\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a-b\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/ \", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/文件\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_validFileName_returnsImportCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/ab\", new ImportCommand(\"ab\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/a_b\", new ImportCommand(\"a_b\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/veryverylongname\", new ImportCommand(\"veryverylongname\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/fullstop.txt\", new ImportCommand(\"fullstop.txt\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/filename_xml.txt\", new ImportCommand(\"filename_xml.txt\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_invalidFileNameParameters_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/ab c/what\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/a*b r/all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/   r/all\", ParserUtil.MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/file r/override\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/file r/invalid\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseFailure(parser, \" n/wrongCommand r//all\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void parse_validFileNameParameters_returnsImportCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/ab r/all\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ImportCommand(\"ab\", new DuplicateImportConflictResolver()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/a_b\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ImportCommand(\"a_b\", new IgnoreImportConflictResolver()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/veryverylongname r/overwrite\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ImportCommand(\"veryverylongname\", new OverwriteImportConflictResolver()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/fullstop.txt r/all\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ImportCommand(\"fullstop.txt\", new DuplicateImportConflictResolver()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertParseSuccess(parser, \" n/filename_xml.txt r/skip\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            new ImportCommand(\"filename_xml.txt\", new IgnoreImportConflictResolver()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijie123": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"c\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_FREQUENCY \u003d \"d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_FREQUENCY \u003d \"10\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parseFrequency_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFrequency(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parseFrequency_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFrequency(INVALID_FREQUENCY));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parseFrequency_validValueWithoutWhitespace_returnsFrequency() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Frequency expectedFrequency \u003d new Frequency(VALID_FREQUENCY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(expectedFrequency, ParserUtil.parseFrequency(VALID_FREQUENCY));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void parseFrequency_validValueWithWhitespace_returnsTrimmedFrequency() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String frequencyWithWhitespace \u003d WHITESPACE + VALID_FREQUENCY + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Frequency expectedFrequency \u003d new Frequency(VALID_FREQUENCY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(expectedFrequency, ParserUtil.parseFrequency(frequencyWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 147,
      "kc97ble": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 5,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void parse_validArgs_doesNotThrow() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"name\u003e\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"d\u003c  name\u003e\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"d\u003e d\u003c\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"p\u003c due\u003e\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseSuccess(parser, \"p\u003c tag\u003c{cs2103t  cs2030 easy}\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"d\u003d\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"dues\u003c\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"name\u003e\u003e\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"name\u003e\u003e  due\u003c\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"name~\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"p\u003c tag\u003c{ cs2103t  cs2030 easy}\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertParseThrowsException(parser, \"p\u003c tag\u003c{ cs2103t  cs2030 easy}}\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Asserts that the parse was successful."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private void assertParseSuccess(SortCommandParser parser, String str) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            SortCommand command \u003d parser.parse(str);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            assertNotNull(\"Expected not null\", command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            fail(\"Expected no parse error\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     * Asserts that the parse throws a ParseException."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    private void assertParseThrowsException(SortCommandParser parser, String str) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            parser.parse(str);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            fail(\"Expected a parse error\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        } catch (ParseException ignore) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            // Do not do anything, because we just want to make sure that an exception is thrown"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskCollectionParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCollectionParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final TaskCollectionParser parser \u003d new TaskCollectionParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expectMessage("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 27,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertFalse(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        modelManager.addTask(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection taskCollection \u003d new TaskManagerBuilder().withPerson(ALICE).withPerson(BENSON)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection differentTaskCollection \u003d new TaskCollection();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        modelManager \u003d new ModelManager(taskCollection, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taskCollection, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different taskCollection -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTaskCollection, userPrefs)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "        String[] keywords \u003d ALICE.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        modelManager.updateFilteredTaskList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskCollection, userPrefs)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        differentUserPrefs.setDeadlineManagerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(taskCollection, differentUserPrefs)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "sidhant007": 6,
      "-": 62,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCollectionTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final TaskCollection taskCollection \u003d new TaskCollection();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(Collections.emptyList(), taskCollection.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void resetData_withValidReadOnlyTaskCollections_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection newData \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(newData, taskCollection);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void resetData_withDuplicateTasks_doesNotThrow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollectionStub newData \u003d new TaskCollectionStub(newTasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btzy"
        },
        "content": "        // make sure no exception gets thrown"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.hasTask(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void hasPerson_personNotInTaskCollections_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(taskCollection.hasTask(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void hasPerson_personInTaskCollections_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.addTask(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(taskCollection.hasTask(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.getTaskList().remove(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * A stub ReadOnlyTaskCollection whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static class TaskCollectionStub implements ReadOnlyTaskCollection {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollectionStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 33,
      "-": 67,
      "kc97ble": 5,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTaskCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class VersionedTaskCollectionTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final ReadOnlyTaskCollection taskCollectionsWithAmy \u003d new TaskManagerBuilder().withPerson(AMY)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final ReadOnlyTaskCollection taskCollectionWithBob \u003d new TaskManagerBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final ReadOnlyTaskCollection taskCollectionWithCarl \u003d new TaskManagerBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPerson(CARL).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final ReadOnlyTaskCollection emptyTaskCollection \u003d new TaskManagerBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void commit_singleTaskCollection_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(emptyTaskCollection);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(emptyTaskCollection),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void commit_multipleTaskCollectionPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Arrays.asList(emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionWithBob,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void commit_multipleTaskCollectionPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(emptyTaskCollection),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canUndo_multipleTaskCollectionPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canUndo_multipleTaskCollectionPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canUndo_singleTaskCollection_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(emptyTaskCollection);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canUndo_multipleTaskCollectionPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canRedo_multipleTaskCollectionPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canRedo_multipleTaskCollectionPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canRedo_singleTaskCollection_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(emptyTaskCollection);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void canRedo_multipleTaskCollectionPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undo_multipleTaskCollectionPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(emptyTaskCollection),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionsWithAmy,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(taskCollectionWithBob));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undo_multipleTaskCollectionPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Arrays.asList(taskCollectionsWithAmy, taskCollectionWithBob));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undo_singleTaskCollection_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(emptyTaskCollection);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertThrows(VersionedTaskCollection.NoUndoableStateException.class,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection::undo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void undo_multipleTaskCollectionPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertThrows(VersionedTaskCollection.NoUndoableStateException.class,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection::undo);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redo_multipleTaskCollectionPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Arrays.asList(emptyTaskCollection, taskCollectionsWithAmy),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionWithBob,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redo_multipleTaskCollectionPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        versionedTaskCollection.redo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTaskCollectionListStatus(versionedTaskCollection,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(emptyTaskCollection),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionsWithAmy,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(taskCollectionWithBob));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redo_singleTaskCollection_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(emptyTaskCollection);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertThrows(VersionedTaskCollection.NoRedoableStateException.class,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void redo_multipleTaskCollectionPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            emptyTaskCollection, taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertThrows(VersionedTaskCollection.NoRedoableStateException.class,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection::redo);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d prepareTaskCollectionList(taskCollectionsWithAmy,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionWithBob);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection copy \u003d prepareTaskCollectionList(taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.equals(copy));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(versionedTaskCollection.equals(versionedTaskCollection));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.equals(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.equals(1));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection differentTaskCollectionList \u003d prepareTaskCollectionList(taskCollectionWithBob,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionWithCarl);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.equals(differentTaskCollectionList));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection differentCurrentStatePointer \u003d prepareTaskCollectionList("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskCollectionsWithAmy, taskCollectionWithBob);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskCollection, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code versionedTaskCollection} is currently pointing at {@code"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedCurrentState}, states before {@code versionedTaskCollection#currentStatePointer} is"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * equal to {@code expectedStatesBeforePointer}, and states after {@code"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * versionedTaskCollection#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertTaskCollectionListStatus(VersionedTaskCollection versionedTaskCollection,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                             List\u003cReadOnlyTaskCollection\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                             ReadOnlyTaskCollection expectedCurrentState,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                             List\u003cReadOnlyTaskCollection\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(new TaskCollection(versionedTaskCollection), expectedCurrentState);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        while (versionedTaskCollection.canUndo()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.undo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (ReadOnlyTaskCollection expectedTaskCollection : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assertEquals(expectedTaskCollection, new TaskCollection(versionedTaskCollection));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.redo();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (ReadOnlyTaskCollection expectedTaskCollection : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.redo();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assertEquals(expectedTaskCollection, new TaskCollection(versionedTaskCollection));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(versionedTaskCollection.canRedo());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTaskCollection.undo());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Creates and returns a {@code VersionedTaskCollection} with the {@code addressBookStates} added"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * into it, and the {@code VersionedTaskCollection#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private VersionedTaskCollection prepareTaskCollectionList(ReadOnlyTaskCollection... addressBookStates) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        VersionedTaskCollection versionedTaskCollection \u003d new VersionedTaskCollection(addressBookStates[0]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.commit();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return versionedTaskCollection;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Shifts the {@code versionedTaskCollection#currentStatePointer} by {@code count} to the left of"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * its list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTaskCollection versionedTaskCollection,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                                   int count) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            versionedTaskCollection.undo();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 168,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attachment/AttachmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.attachment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class AttachmentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Attachment(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void equality_relativeAndRelativeFilePath() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File dummyFileRelativePath \u003d new File(\"hello.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        File dummyFileAbsolutePath \u003d new File(dummyFileRelativePath.getAbsolutePath());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Attachment relativeAttachment \u003d new Attachment(dummyFileRelativePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Attachment absoluteAttachment \u003d new Attachment(dummyFileAbsolutePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(relativeAttachment, absoluteAttachment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // Keywords match priority, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // Keywords match frequency, but does not match name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"5\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withFrequency(\"5\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 20,
      "-": 57,
      "kc97ble": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority((String) null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Integer invalidPriorityInteger \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriorityInteger));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // null priority number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // invalid priority numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"5\")); // not 1, 2, 3, or 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // valid priority numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\")); // 1, 2, 3, or 4"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\")); // 1, 2, 3, or 4"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"4\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sidhant007"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    public void isValidComparison() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Priority a \u003d new Priority(\"3\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Priority b \u003d new Priority(\"4\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Priority c \u003d new Priority(3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertTrue(a.compareTo(b) \u003d\u003d 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertTrue(b.compareTo(a) \u003d\u003d -1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(a.compareTo(c) \u003d\u003d 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sidhant007": 11,
      "kc97ble": 38,
      "btzy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        task.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(ALICE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        // different frequency -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withFrequency(VALID_FREQUENCY_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 16,
      "-": 54,
      "kc97ble": 10,
      "btzy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(null, ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedUniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTask(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 85,
      "-": 92,
      "kc97ble": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        userPrefs.setDeadlineManagerFilePath(Paths.get(\"deadlinemanager.xml\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 11,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlTaskCollectionStorage addressBookStorage \u003d new XmlTaskCollectionStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * {@link XmlTaskCollectionStorage} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTaskCollectionStorageTest} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        storageManager.saveTaskCollection(original);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ReadOnlyTaskCollection retrieved \u003d storageManager.readTaskCollection().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(original, new TaskCollection(retrieved));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertNotNull(storageManager.getTaskCollectionFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new XmlTaskCollectionStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        storage.handleTaskCollectionChangedEvent(new TaskCollectionChangedEvent(new TaskCollection()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void exportOnExistingFile_exceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        // Exporting with file name equal to the working file should throw IllegalValueException."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        storageManager.saveTaskCollection(original);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Assert.assertThrows(IOException.class, Storage.MESSAGE_WRITE_FILE_EXISTS_ERROR, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                storageManager.exportTaskCollection(original, storageManager.getTaskCollectionFilePath(), false));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void exportNewFile_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            storageManager.exportTaskCollection(original, getTempFilePath(\"exportNewNonExistent\"), false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new AssertionError(\"Export on non-existent file should not throw.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void overwriteExportOnExistingFile_success() throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        // Exporting with file name equal to the working file should throw IllegalValueException."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        storageManager.saveTaskCollection(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            storageManager.exportTaskCollection(original, storageManager.getTaskCollectionFilePath(), true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new AssertionError(\"Export on non-existent file should not throw.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void importNonExistingFile_exceptionThrown() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Assert.assertThrows(IOException.class, Storage.MESSAGE_READ_FILE_MISSING_ERROR, () -\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                storageManager.importTaskCollection(getTempFilePath(\"nonExistent\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void importExistingFile_success() throws DataConversionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            storageManager.saveTaskCollection(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            ReadOnlyTaskCollection read \u003d storageManager"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                    .importTaskCollection(storageManager.getTaskCollectionFilePath()).get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new AssertionError(\"Import on existent file should not throw.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    public void addressBookExportImport() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijie123"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijie123"
        },
        "content": "         * {@link XmlTaskCollectionStorage} class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijie123"
        },
        "content": "         * More extensive testing of importing exporting is done in {@link XmlTaskCollectionStorageTest} class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijie123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        storageManager.exportTaskCollection(original, getTempFilePath(\"dummyExport\"), false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ReadOnlyTaskCollection retrieved \u003d storageManager.importTaskCollection(getTempFilePath(\"dummyExport\"))"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                                                         .get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        assertEquals(original, new TaskCollection(retrieved));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        Assert.assertThrows(IOException.class, Storage.MESSAGE_WRITE_FILE_EXISTS_ERROR, () -\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            storageManager.exportTaskCollection(original, getTempFilePath(\"dummyExport\"), false));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            storageManager.exportTaskCollection(original, storageManager.getTaskCollectionFilePath(), true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            throw new AssertionError(\"Export on non-existent file should not throw.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    class XmlTaskCollectionStorageExceptionThrowingStub extends XmlTaskCollectionStorage {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public XmlTaskCollectionStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        public void saveTaskCollection(ReadOnlyTaskCollection taskCollection, Path filePath)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 20,
      "-": 87,
      "sijie123": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"b\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String INVALID_FREQUENCY \u003d \"d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"1002\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_PRIORITY \u003d BENSON.getPriority().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final String VALID_FREQUENCY \u003d BENSON.getFrequency().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btzy"
        },
        "content": "    private static final String VALID_DEADLINE \u003d BENSON.getDeadline().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final List\u003cXmlAdaptedAttachment\u003e VALID_ATTACHMENTS \u003d BENSON.getAttachments()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .map(XmlAdaptedAttachment::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(INVALID_NAME, VALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE, VALID_TAGS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(null, VALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(VALID_NAME, INVALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_PRIORITY_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(VALID_NAME, null, VALID_FREQUENCY, VALID_DEADLINE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void toModelType_invalidFrequency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, INVALID_FREQUENCY, VALID_DEADLINE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String expectedMessage \u003d Frequency.MESSAGE_FREQUENCY_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public void toModelType_nullFrequency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, null, VALID_DEADLINE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Frequency.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btzy"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_FREQUENCY, INVALID_DEADLINE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "                VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btzy"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_DEADLINE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_FREQUENCY, null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btzy"
        },
        "content": "            VALID_TAGS, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btzy"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btzy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_FREQUENCY, VALID_DEADLINE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                invalidTags, VALID_ATTACHMENTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "-": 45,
      "kc97ble": 47,
      "btzy": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTaskCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlSerializableTaskCollectionTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"XmlSerializableTaskCollectionTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .resolve(\"typicalTasksInTaskCollection.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .resolve(\"invalidTaskInTaskCollection.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection taskCollectionFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection typicalTasksTaskCollection \u003d TypicalTasks.getTypicalTaskCollections();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(taskCollectionFromFile, typicalTasksTaskCollection);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 18,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlTaskCollectionStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class XmlTaskCollectionStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"XmlTaskCollectionStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskCollection\u003e readAddressBook(String filePath)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return new XmlTaskCollectionStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijie123"
        },
        "content": "            .readTaskCollection(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        readAddressBook(\"NotXmlFormatTaskCollection.xml\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        readAddressBook(\"invalidTaskInTaskCollection.xml\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        readAddressBook(\"invalidAndValidTaskInTaskCollection.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection original \u003d getTypicalTaskCollections();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlTaskCollectionStorage xmlAddressBookStorage \u003d new XmlTaskCollectionStorage(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        xmlAddressBookStorage.saveTaskCollection(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        ReadOnlyTaskCollection readBack \u003d xmlAddressBookStorage.readTaskCollection(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(original, new TaskCollection(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        original.addTask(HOON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        original.removeTask(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        xmlAddressBookStorage.saveTaskCollection(original, filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readTaskCollection(filePath).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(original, new TaskCollection(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        original.addTask(IDA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        xmlAddressBookStorage.saveTaskCollection(original); //file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijie123"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readTaskCollection().get(); //file path not specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(original, new TaskCollection(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void saveAddressBook(ReadOnlyTaskCollection addressBook, String filePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            new XmlTaskCollectionStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijie123"
        },
        "content": "                .saveTaskCollection(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        saveAddressBook(new TaskCollection(), null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 31,
      "-": 94,
      "sijie123": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * call {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead. {@see"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * assertThrows(Class \u003c ? extends Throwable \u003e, VoidCallable }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                    String expectedMessage,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    \"Expected message thrown: %s, actual: %s\", expectedMessage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                    actualException.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 11,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private EditCommand.EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.setFrequency(task.getFrequency());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor.setDeadline(task.getDeadline());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Sets the {@code Frequency} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public EditTaskDescriptorBuilder withFrequency(String frequency) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.setFrequency(new Frequency(frequency));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public EditCommand.EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 26,
      "-": 35,
      "kc97ble": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the {@code event} has been posted to all subscribers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.attachment.Attachment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btzy"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"1/10/2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public static final String DEFAULT_FREQUENCY \u003d \"20\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private Frequency frequency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Set\u003cAttachment\u003e attachments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        frequency \u003d new Frequency(DEFAULT_FREQUENCY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        frequency \u003d taskToCopy.getFrequency();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deadline \u003d taskToCopy.getDeadline();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        attachments \u003d new HashSet\u003c\u003e(taskToCopy.getAttachments());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btzy"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btzy"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btzy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btzy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     * Sets the {@code Frequency} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    public TaskBuilder withFrequency(String frequency) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        this.frequency \u003d new Frequency(frequency);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the {@code attachments} into a {@code Set\u003cAttachment\u003e} and set it to the {@code Task} that we are"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withAttachments(Set\u003cAttachment\u003e attachments) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.attachments \u003d attachments;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Parses the {@code attachments} into a {@code Set\u003cAttachment\u003e} and set it to the {@code Task} that we are"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskBuilder withAttachments(String... attachments) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.attachments \u003d SampleDataUtil.getAttachmentSet(attachments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        return new Task(name, priority, frequency, deadline, tags, attachments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 42,
      "-": 39,
      "kc97ble": 26,
      "btzy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskManagerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A utility class to help with building Addressbook objects. Example usage: \u003cbr\u003e {@code TaskCollection"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * ab \u003d new TaskManagerBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskManagerBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private TaskCollection taskCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskManagerBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection \u003d new TaskCollection();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskManagerBuilder(TaskCollection taskCollection) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        this.taskCollection \u003d taskCollection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskCollection} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskManagerBuilder withPerson(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCollection.addTask(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskCollection build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return taskCollection;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 15,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btzy"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btzy"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriority().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        sb.append(PREFIX_FREQUENCY + task.getFrequency().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        sb.append(PREFIX_DEADLINE + task.getDeadline().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        descriptor.getName()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.getPriority()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        descriptor.getFrequency()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            .ifPresent(frequency -\u003e sb.append(PREFIX_FREQUENCY).append(frequency.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btzy"
        },
        "content": "        descriptor.getDeadline()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE).append(deadline.toString()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 13,
      "-": 39,
      "kc97ble": 6,
      "btzy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static Task getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "sidhant007": 3,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task ALICE \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(\"1/10/2018\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withPriority(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"200\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"hello.txt\", \"world.txt\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task BENSON \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(\"1/11/2018\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withPriority(\"2\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"205\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"hello.txt\", \"world.txt\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task CARL \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(\"31/10/2018\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withPriority(\"3\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"210\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"world.txt\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task DANIEL \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withPriority(\"4\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"215\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(\"2/1/2019\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task ELLE \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(\"1\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"220\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withDeadline(\"2/10/2018\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task FIONA \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(\"2\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"225\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withDeadline(\"2/10/2018\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"hello.txt\", \"world.txt\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task GEORGE \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(\"George Best\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(\"3\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"230\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withDeadline(\"2/10/2018\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"hello.txt\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task HOON \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(\"4\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"55\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withDeadline(\"2/10/2018\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withAttachments(\"world.txt\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task IDA \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withPriority(\"1\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(\"60\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withDeadline(\"2/10/2018\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task AMY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(VALID_PRIORITY_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(VALID_FREQUENCY_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(VALID_DEADLINE_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static final Task BOB \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        .withFrequency(VALID_FREQUENCY_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btzy"
        },
        "content": "        .withDeadline(VALID_DEADLINE_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private TypicalTasks() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns an {@code TaskCollection} with all the typical tasks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static TaskCollection getTypicalTaskCollections() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCollection ab \u003d new TaskCollection();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 56,
      "-": 32,
      "kc97ble": 30,
      "btzy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private TaskPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectionChangedEventStub \u003d new TaskPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // associated web page of a task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        URL expectedPersonUrl \u003d new URL("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btzy"
        },
        "content": "            BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 42,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e - the text remains \u003cbr\u003e - the command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e - the text is cleared \u003cbr\u003e - the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedCommand}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A GUI unit test class for TaskCollection."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * initialized."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * pressing the \u0027X\u0027 button on the {@code MainWindow} or closing the app through the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * taskbar)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            guiRobot.interact(() -\u003e stage"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 14,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \"Stub\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijie123"
        },
        "content": "import seedu.address.commons.events.model.TaskCollectionChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijie123"
        },
        "content": "    private static final TaskCollectionChangedEvent EVENT_STUB \u003d new TaskCollectionChangedEvent("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        new TaskCollection());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // after deadline manager is updated"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the sync"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 70,
      "sijie123": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskWithNoTags \u003d new TaskBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCardDisplay(taskCard, taskWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task taskWithTags \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskCard \u003d new TaskCard(taskWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCardDisplay(taskCard, taskWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // same task, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCard copy \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(taskCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertTrue(taskCard.equals(taskCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(taskCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(taskCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // different task, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // same task, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(task, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * matches {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // verify task details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCardDisplaysTask(expectedTask, taskCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.storage.XmlSerializableTaskCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 5000;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Task expectedTask \u003d TYPICAL_TASKS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assertCardDisplaysTask(expectedTask, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCardHandle expectedTask \u003d taskListPanelHandle"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskCardHandle selectedTask \u003d taskListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCardEquals(expectedTask, selectedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Verifies that creating and deleting large number of tasks in {@code TaskListPanel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * requires lesser than {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        }, \"Creation and deletion of task cards exceeded time limit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a list of tasks containing {@code taskCount} tasks that is used to populate the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int taskCount) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithTasks(taskCount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        XmlSerializableTaskCollection xmlDeadlineManager \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableTaskCollection.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return FXCollections.observableArrayList(xmlDeadlineManager.toModelType().getTaskList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a .xml file containing {@code taskCount} tasks. This file will be deleted when"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the JVM terminates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Path createXmlFileWithTasks(int taskCount) throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        builder.append(\"\u003ctaskcollection\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            builder.append(\"\u003ctasks\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            builder.append(\"\u003cpriority\u003e1\u003c/priority\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            builder.append(\"\u003cfrequency\u003e5\u003c/frequency\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btzy"
        },
        "content": "            builder.append(\"\u003cdeadline\u003e1/10/2018\u003c/deadline\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            builder.append(\"\u003c/tasks\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        builder.append(\"\u003c/taskcollection\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Path manyTasksFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyTasks.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        FileUtil.createFile(manyTasksFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        FileUtil.writeToFile(manyTasksFile, builder.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        manyTasksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return manyTasksFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Initializes {@code taskListPanelHandle} with a {@code TaskListPanel} backed by {@code"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * backingList}. Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 56,
      "-": 67,
      "kc97ble": 3,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.TaskCard.DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.ui.TaskCard.FREQUENCY_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.ui.TaskCard.PRIORITY_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertCardEquals(TaskCardHandle expectedCard,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                        TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertEquals(expectedTask.getName().value, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedPriority \u003d String.format(PRIORITY_FORMAT, expectedTask.getPriority().value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedPriority, actualCard.getPriority());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        String expectedFrequency \u003d String.format(FREQUENCY_FORMAT, expectedTask.getFrequency().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertEquals(expectedFrequency, actualCard.getFrequency());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedDeadline \u003d String.format(DEADLINE_FORMAT, expectedTask.getDeadline().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedDeadline, actualCard.getDeadline());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            actualCard.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedTask.getAttachments().stream().map(attachment -\u003e attachment.getName())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            actualCard.getAttachments());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                          Task... tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                          List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        int numberOfPeople \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                           String expected) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 36,
      "-": 46,
      "kc97ble": 3,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FREQUENCY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Frequency.NO_FREQUENCY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.model.task.Priority.NO_PRIORITY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.IDA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class AddCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: add a task without tags to a non-empty deadline manager,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         *    command with leading spaces and trailing spaces  -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \" \" + PRIORITY_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + \" \" + FREQUENCY_DESC_AMY + \" \" + DEADLINE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: add a task with all fields same as another task in the deadline manager except name -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        toAdd \u003d new TaskBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + DEADLINE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: add a task with all fields same as another task in the deadline manager except priority"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        toAdd \u003d new TaskBuilder(AMY).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: add a task with all fields same as another task in the deadline manager except frequency"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        toAdd \u003d new TaskBuilder(AMY).withFrequency(VALID_FREQUENCY_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: add to empty deadline manager -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteAllTests();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + DEADLINE_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: add a task, missing tags -\u003e added */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filters the task list before adding -\u003e added */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* ------------------------ Perform add operation while a task card is selected --------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* ---------------------- Perform add operation with duplicate task (should succeed) ----------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: add a duplicate task except with different priority -\u003e added normally */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        toAdd \u003d new TaskBuilder(HOON).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: add a duplicate task except with different frequency -\u003e added normally */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        toAdd \u003d new TaskBuilder(HOON).withFrequency(VALID_FREQUENCY_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* Case: add a duplicate task except with different tags -\u003e added normally */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        toAdd \u003d new TaskBuilder(HOON).withTags(\"friends\").build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* Case: add a duplicate task -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* Case: missing deadline -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d \"adds \" + TaskUtil.getTaskDetails(toAdd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: invalid priority -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PRIORITY_DESC + FREQUENCY_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandFailure(command, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: invalid frequency -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_AMY + PRIORITY_DESC_AMY + INVALID_FREQUENCY_DESC + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandFailure(command, Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btzy"
        },
        "content": "        /* Case: invalid deadline -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_AMY + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btzy"
        },
        "content": "        assertCommandFailure(command, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_AMY + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + DEADLINE_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* ------------------------- Perform add operations where optional fields are blank ------------------------- */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: missing priority, frequency -\u003e success */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DEADLINE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        toAdd \u003d new TaskBuilder(AMY).withPriority(NO_PRIORITY).withFrequency(NO_FREQUENCY).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kc97ble"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the,\u003cbr\u003e 1. Command box displays an empty string.\u003cbr\u003e 2. Command box has the default style"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * class.\u003cbr\u003e 3. Result display box displays the success message of executing {@code AddCommand}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * with the details of {@code toAdd}.\u003cbr\u003e 4. {@code Storage} and {@code TaskListPanel} equal"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * to the corresponding components in the current model added with {@code toAdd}.\u003cbr\u003e 5. Browser"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * url and selected card remain unchanged.\u003cbr\u003e 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * (String,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task toAddWithoutAttachment \u003d new TaskBuilder(toAdd)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withAttachments()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(TaskUtil.getAddCommand(toAddWithoutAttachment), toAddWithoutAttachment);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command} instead."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task toAddWithoutAttachments \u003d new TaskBuilder(toAdd)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withAttachments()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.addTask(toAddWithoutAttachments);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAddWithoutAttachments);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * that the,\u003cbr\u003e 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e 2. {@code"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Storage} and {@code TaskListPanel} equal to the corresponding components in {@code"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e 1. Command box displays {@code"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command}.\u003cbr\u003e 2. Command box has the error style class.\u003cbr\u003e 3. Result display box displays"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code expectedResultMessage}.\u003cbr\u003e 4. {@code Storage} and {@code TaskListPanel} remain"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * unchanged.\u003cbr\u003e 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * (String,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 79,
      "sidhant007": 2,
      "-": 119,
      "kc97ble": 58,
      "btzy": 12
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class ClearCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: clear non-empty deadline manager, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: undo clearing deadline manager -\u003e original deadline manager restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: redo clearing deadline manager -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: selects first card in task list and clears deadline manager -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original deadline manager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filters the task list before clearing -\u003e entire deadline manager cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original deadline manager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: clear empty deadline manager -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * result display box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * components equal to an empty model. These verifications are done by {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e Also"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * verifies that the command box has the default style class and the status bar\u0027s sync status"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to {@code"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedModel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * result display box displays {@code expectedResultMessage} and the model related components"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * equal to the current model. These verifications are done by {@code"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e Also"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * verifies that the browser url, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * box has the error style."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 34,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test. Before the test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * starts, the rule replaces the clock in the status bar with a fixed clock. At the end of the test,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class DeleteCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task deletedTask \u003d removePerson(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: delete the last task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: undo deleting the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: redo deleting the last task in the list -\u003e last task deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: delete the middle task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of deadline manager and task list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of deadline manager but out of bounds of task list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        int invalidIndex \u003d getModel().getTaskCollection().getTaskList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* --------------------- Performing delete operation while a task card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: delete the selected task -\u003e task list panel selects the task before the deleted task */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectTask(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deletedTask \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            getModel().getTaskCollection().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s deadline manager."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @return the removed task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private Task removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task targetTask \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.deleteTask(targetTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return targetTask;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * toDelete} and performs the same verification as {@code assertCommandSuccess(String, Model,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String)}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task deletedTask \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedResultMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays an"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * empty string.\u003cbr\u003e 2. Asserts that the result display box displays {@code"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedResultMessage}.\u003cbr\u003e 3. Asserts that the browser url and selected card remains"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * unchanged.\u003cbr\u003e 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e 5. Asserts that the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command box has the default style class.\u003cbr\u003e Verifications 1 and 2 are performed by {@code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedResultMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * that the browser url and selected card are expected to update accordingly depending on the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays {@code"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command}.\u003cbr\u003e 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e 4."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the command box has the error style.\u003cbr\u003e Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 71,
      "sidhant007": 4,
      "-": 128
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FREQUENCY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btzy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FREQUENCY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREQUENCY_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btzy"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Frequency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class EditCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"   \" + NAME_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + \"  \" + PRIORITY_DESC_BOB + \"  \" + FREQUENCY_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + DEADLINE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task uneditedTask \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task bobWithOriginalAttachments \u003d new TaskBuilder(BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withAttachments(uneditedTask.getAttachments())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(bobWithOriginalAttachments)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: undo editing the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: redo editing the last task in the list -\u003e last task edited again */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        model.updateTask("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: edit a task with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, bobWithOriginalAttachments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: edit a task with new values same as another task\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(getModel().getTaskCollection().getTaskList().contains(bobWithOriginalAttachments));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertNotEquals(getModel().getFilteredTaskList().get(index.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PRIORITY_DESC_BOB + FREQUENCY_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedTask \u003d new TaskBuilder(bobWithOriginalAttachments).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: edit a task with new values same as another task\u0027s values"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedTask \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            new TaskBuilder(bobWithOriginalAttachments)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withPriority(VALID_PRIORITY_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .withFrequency(VALID_FREQUENCY_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, edit index within bounds of deadline manager and task list -\u003e edited */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        editedTask \u003d new TaskBuilder(taskToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, edit index within bounds of deadline manager but out of bounds of task list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        int invalidIndex \u003d getModel().getTaskCollection().getTaskList().size();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* --------------------- Performing edit operation while a task card is selected -------------------------- */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: selects first card in the task list, edit a task -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectTask(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            + PRIORITY_DESC_AMY + FREQUENCY_DESC_AMY + DEADLINE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        // browser\u0027s url is updated to reflect the new task\u0027s name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task amyWithAttachments \u003d new TaskBuilder(AMY)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            .withAttachments(getModel().getFilteredTaskList().get(index.getZeroBased()).getAttachments())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, index, amyWithAttachments, index);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: invalid priority -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: invalid frequency -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "                + INVALID_FREQUENCY_DESC,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "            Frequency.MESSAGE_FREQUENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kc97ble"
        },
        "content": "        /* Case: invalid deadline -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btzy"
        },
        "content": "                + INVALID_DEADLINE_DESC,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btzy"
        },
        "content": "            Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Task, Index)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * except that the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedTask, null);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * and in addition,\u003cbr\u003e 1. Asserts that result display box displays the success message of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * executing {@code EditCommand}.\u003cbr\u003e 2. Asserts that the model related components are updated"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * to reflect the task at index {@code toEdit} being updated to values specified {@code"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * editedTask}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        expectedModel.updateTask(expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            editedTask);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * except that the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedResultMessage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays an"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * empty string.\u003cbr\u003e 2. Asserts that the result display box displays {@code"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedResultMessage}.\u003cbr\u003e 3. Asserts that the browser url and selected card update"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * accordingly depending on the card at {@code expectedSelectedCardIndex}.\u003cbr\u003e 4. Asserts that"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the status bar\u0027s sync status changes.\u003cbr\u003e 5. Asserts that the command box has the default"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * style class.\u003cbr\u003e Verifications 1 and 2 are performed by {@code TaskCollectionSystemTest"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * #assertApplicationDisplaysExpected(String,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                      String expectedResultMessage,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays {@code"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command}.\u003cbr\u003e 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e 4."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the command box has the error style.\u003cbr\u003e Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 109,
      "sidhant007": 12,
      "-": 141,
      "kc97ble": 29,
      "btzy": 6
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class ErrorDialogGuiTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            alertDialog.getContentText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class FindCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find multiple tasks in deadline manager, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: repeat previous find command where task list is displaying the tasks we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task where task list is not displaying the task we are finding -\u003e 1 task found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find multiple tasks in deadline manager, 2 keywords -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find multiple tasks in deadline manager, 2 keywords in reversed order -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find multiple tasks in deadline manager, 2 keywords with 1 repeat -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find multiple tasks in deadline manager, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find same tasks in deadline manager after deleting 1 of them -\u003e 1 task found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertFalse(getModel().getTaskCollection().getTaskList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task in deadline manager, keyword is same as name but of different case -\u003e 1 task found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task in deadline manager, keyword is substring of name -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task in deadline manager, name is substring of keyword -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task not in deadline manager -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find tags of task in deadline manager -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find while a task is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btzy"
        },
        "content": "            .equals(DANIEL.getName().value));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: find task in empty deadline manager -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteAllTests();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * result display box displays {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * of people in the filtered list, and the model related components equal to {@code"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedModel}. These verifications are done by {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * (String,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String, Model)}.\u003cbr\u003e Also verifies that the status bar remains unchanged, and the command box"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * has the default style class, and the selected card updated accordingly, depending on {@code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * cardStatus}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_TASKS_LISTED_OVERVIEW, expectedModel.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * result display box displays {@code expectedResultMessage} and the model related components"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * equal to the current model. These verifications are done by {@code"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e Also"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * verifies that the browser url, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * box has the error style."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 49,
      "sidhant007": 1,
      "-": 134,
      "btzy": 1
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class HelpCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 7,
      "sidhant007": 1,
      "-": 101
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public static void setFilteredList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 9,
      "-": 31
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class SampleDataTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected TaskCollection getInitialData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Path filePath \u003d TestUtil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 8,
      "-": 45
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public class SelectCommandSystemTest extends TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: select the first card in the task list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: select the last card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: select the middle card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, select index within bounds of deadline manager but out of bounds of task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        int invalidIndex \u003d getModel().getTaskCollection().getTaskList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: filtered task list, select index within bounds of deadline manager and task list -\u003e selected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        /* Case: select from empty deadline manager -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        deleteAllTests();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e 1. Command box displays an empty"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * string.\u003cbr\u003e 2. Command box has the default style class.\u003cbr\u003e 3. Result display box displays"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the success message of executing select command with the {@code expectedSelectedCardIndex} of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * the selected task.\u003cbr\u003e 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * accordingly.\u003cbr\u003e 6. Status bar remains unchanged.\u003cbr\u003e Verifications 1, 3 and 4 are performed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * by {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            MESSAGE_SELECT_TASK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e 1. Command box displays {@code"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * command}.\u003cbr\u003e 2. Command box has the error style class.\u003cbr\u003e 3. Result display box displays"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * {@code expectedResultMessage}.\u003cbr\u003e 4. {@code Storage} and {@code TaskListPanel} remain"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * unchanged.\u003cbr\u003e 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by {@code TaskCollectionSystemTest#assertApplicationDisplaysExpected"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * (String,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 44,
      "sidhant007": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.ReadOnlyTaskCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTaskCollection\u003e addressBook,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                    Path saveFileLocation) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 6,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/TaskCollectionSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.model.TaskCollection;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * A system test class for TaskCollection, which provides access to handles of GUI components and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": " * helper methods for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "public abstract class TaskCollectionSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        .asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected TaskCollection getInitialData() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        return TypicalTasks.getTypicalTaskCollections();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    public TaskListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}. Method returns after UI"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * components have been updated."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Displays all tasks in the deadline manager."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(getModel().getTaskCollection().getTaskList().size(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "            getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * (case-insensitive)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getTaskCollection()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            .getTaskList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected void selectTask(Index index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Deletes all tasks in the deadline manager."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected void deleteAllTests() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(0, getModel().getTaskCollection().getTaskList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * ResultDisplay} displays {@code expectedResultMessage}, the storage contains the same task"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * objects as {@code expectedModel} and the task list panel displays the tasks in the model"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * correctly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                                                     String expectedResultMessage,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertEquals(new TaskCollection(expectedModel.getTaskCollection()),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            testApp.readStorageTaskCollection());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code TaskListPanelHandle} and {@code"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * StatusBarFooterHandle} to remember their current state."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        getPersonListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * displaying the details of the previously selected task."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * panel at {@code expectedSelectedCardIndex}, and only the card at {@code"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            expectedUrl \u003d new URL("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "                BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the task list panel remain"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * unchanged."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedTaskCardChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of {@code"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "     * ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sidhant007"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "            getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 55,
      "sidhant007": 7,
      "-": 246
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ranaldmiao"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ranaldmiao": 1,
      "-": 6
    }
  }
]
