[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d HeartÂ²"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "_Enterprise Wedding Management System_"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-F10-3/main[image:https://travis-ci.org/CS2103-AY1819S1-F10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/liaujianjie/main[image:https://ci.appveyor.com/api/projects/status/ycx5vnhfck9tp9ae?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-F10-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-F10-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/liaujianjie/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-F10-3/main\u0026utm_campaign\u003dBadge_Grade\"[image:https://api.codacy.com/project/badge/Grade/cd2ccc2fc61c4afdac9c3f89a3345a65[Codacy Badge]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* This is a desktop Wedding Planner application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* This Wedding Planner application is intended for Wedding Planner companies."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* It matches clients with their service providers based on various client requests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* This application was adapted from a SE-EDU initiative: https://github.com/se-edu/[AddressBook-Level4]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "eehooi": 8,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"githubId\": \"dongsiji\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"displayName\": \"DON...IJI\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"authorNames\": [\"dongsiji\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"githubId\": \"NightYeti\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"displayName\": \"GAN C...N YAO\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"authorNames\": [\"NightYeti\", \"Gan Chin Yao\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"githubId\": \"liaujianjie\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"displayName\": \"LIAU ...N JIE\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"authorNames\": [\"liaujianjie\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"githubId\": \"wailunlim\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"displayName\": \"LIM W...I LUN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"authorNames\": [\"wailunlim\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"githubId\": \"eehooi\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"displayName\": \"NG EE... HOOI\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "      \"authorNames\": [\"eehooi\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u0027site-name\u0027: \u0027main\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-F10-3/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 245
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² was developed by the F10-3 team of NUS School of Computing AY18/19. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Dong SiJi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::dongsiji.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "{empty}[https://github.com/dongsiji[github]] [\u003c\u003cdongsiji#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Component: listing, searching"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Gan Chin Yao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::nightyeti.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "{empty}[http://github.com/NightYeti[github]] [\u003c\u003cganchinyao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Component: login, autocomplete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Liau Jian Jie"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::liaujianjie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "{empty}[http://github.com/liaujianjie[github]] [\u003c\u003cliaujianjie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Role: Code quality +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Component: services, matching"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Lim Wai Lun"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::wailunlim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "{empty}[http://github.com/wailunlim[github]] [\u003c\u003climwailun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Component: add, update and delete"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Ng Ee Hooi"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::eehooi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "{empty}[http://github.com/eehooi[github]] [\u003c\u003cngeehooi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Component: UI, matching"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 26,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Email us* : You can reach out to our Team Lead at `gan@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d HeartÂ² - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": ":toc-title: What\u0027s in this Developer Guide:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": ":toc-placement: macro"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F10-3/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::guidefordevelopers.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "By: `Team HeartÂ²` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Welcome to *_HeartÂ²_*! _HeartÂ²_ is a desktop software intended to make the job of wedding planning agencies simpler."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "It provides simple yet powerful features to efficiently manage clients\u0027 and agency companies\u0027 profiles."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Users can find suitable wedding service providers for couples using just a few keystrokes with our enterprise featureset."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "This developer guide is a self-contained resource designed to align all developers around a common vision. It helps"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "developers of all levels learn more about the workings behind the scenes and how to make use of them effectively."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "So if you want to know how to make _HeartÂ²_ even better, here\u0027s where you start!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::calloutpic.png[width\u003d\"256\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Callouts are a rectangular box with icon and words to point out some information. Below are the 3 callouts that will be used consistently throughout this document:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This represents a *note*. A note is information that is important, but may not be applicable to you. Be sure to read a note and see if it is applicable to you."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This represents a *tip*. A tip is something that is often handy, and good for you to know. Tip is often not crucial, and you can choose to skip them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This represents a *warning*. You should be extremely cautious and read the warning statement carefully."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::settingup.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This section sets up your local computer and import all the necessary tools required to run this application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Read this section in detail and follow the configurations carefully. Otherwise, the application may not work as expected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::designheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This section shows an overview of the design decisions for this application. It serves to allow you to better understand the various components linking this application together."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".Component interactions for `delete 1` command (part 1) +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".Component interactions for `delete 1` command (part 2) +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eehooi"
        },
        "content": "The UI consists of a `LoginWindow` and a `MainWindow`. The `MainWindow` is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* stores the Account data that was used to log in."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Account Storage component"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".Structure of the Account Storage Component"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::AccountStorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/AccountStorage.java[`AccountStorage.java`]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The `AccountStorage` component"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* can save the Account data in xml format and read it back."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* can populate a default root Account data in xml format if missing"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* can update existing Account password stored in the storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::implementationheader.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Before you start, you\u0027d need to find out how *_HeartÂ²_*\u0027s features work!"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Login Feature"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Before user can use *_HeartÂ²_*, they must first log in with a registered account."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Before logging in"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "eehooi"
        },
        "content": "User is presented with a login UI:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".The login screen when user launches the application."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "eehooi"
        },
        "content": "image::UiLoginDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "There are only 3 commands available for user to execute:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `login` : Login to the system with a username and password"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `help` : Shows the help panel"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `exit` : Quit the application"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d After logging in"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "eehooi"
        },
        "content": "The `LoginWindow` would direct to open the `MainWindow` upon successful login, by parsing in the current `stage`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eehooi"
        },
        "content": "User can execute any commands available, provided the user-account is given the correct privilege. However, user cannot execute the `login` command again since he is already logged in."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When to show the Login UI"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 1 (current choice):* Deploy the `LoginWindow` only upon launch."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: Similar to existing applications, easier for users to use"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Cons: Difficult to implement"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 2:* Incorporate `LoginWindow` within `MainWindow`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Cons: Users are able to see the main UI before login"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Account creation"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Account is created for the purpose of logging in and authenticating the user, before the user is allowed to use the application. This protects the confidentiality and data integrity of the application."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "User can only register for an account via an existing account with `SUPER_USER` privilege. It may sound counter-intuitive to require an account before registering a new account. We make this requirement as only authorised personal should be given an account. Ideally, the owner of the application should dictate the account given to employees by helping them register an account."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Types of account"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "There are 2 types of account:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `SUPER_USER` : A user that is capable of executing all commands available in the application."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `READ_ONLY_USER` : A user that is capable of executing all commands except registering new account, adding, editing, and deleting entries in the database."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "These 2 types of accounts are referred as Role and facilitated by the `Role` enum."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The restrictions of a `READ_ONLY_USER` is enforced by the methods found in `Account` class, specifically:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `boolean hasWritePrivilege()`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `boolean hasDeletePrivilege()`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* `boolean hasAccountCreationPrivilege()`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Commands that prevents a `READ_ONLY_USER` from executing is checked with a condition as such:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "if (!account.hasWritePrivilege()) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Should the privilege be tied to Role enum or Account class?"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 1 (current choice):* Account class contains the privileges methods such has `hasWritePrivilege`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: This makes sense as the type of privilege is tied to the account."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 2:* Role enum should contains the privileges methods"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: Since Role enum contains all the different roles such as `READ_ONLY_USER` and `SUPER_USER`, it is easy to reference all the different types of roles and the privileges in 1 file. This makes adding more roles and privileges in the future easy."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Cons: It sounds awkward to have privileges associated with Role rather than with an Account."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Account storage"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "All accounts are stored in a file call `/data/accountlist.xml`. This file is generated on the fly during first launch and populated with a root account. By default, a root account is hardcoded into the application with the username `rootUser` and password `rootPassword` with the role `SUPER_USER`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The diagram below shows what happen when a user launches the application:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".Activity diagram when user launches the application"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::accountstoragediagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Only a `SUPER_USER` is allowed to create a new account, either for himself, or on behalf of another person. The diagram below shows what happen when a user attempts to register a new account:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".Activity diagram when user registers an account"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::accountcreationdiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What file type to store user account as?"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 1 (current choice):* Store it as a `xml` file locally."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: The code to write and read xml file is already present for adding address book contact initially in the Address Book - level 4 app. Hence, adopting this code and modifying it for account storage is easier than coming up with code from scratch."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Cons: Relatively wordy and verbose with all the opening and closing tag. For the same amount of account information, compared to other format such as `json`, more data has to be stored to account for tag elements."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* *Alternative 2:* Store it as a `json` file locally."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: Simpler syntax than `xml` and hence less data is required to store the same amount of account information."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Pros: Can be parsed into a ready-to-use JavaScript object."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Cons: Not familiar with json, hence more effort is needed to write code to store account in json format, compared to the already given code for xml storage."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Security Considerations"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Database"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Currently, the list of accounts is stored locally on data/accountlist.xml. For security purposes, we may consider the following implementations in the future for v2.0:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* **Encrypt accountlist.xml:** This can prevent direct lookup of the file as the content is encrypted"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* **Store the file on a server:** Due to project restriction, we are unable to implement this at v1.4. Storing file on a server has an added advantage of utilising web security practises or employing third party services to help protect our account list in private servers."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storing password"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Username is stored in plaintext in accountlist.xml, as username is not private information. However, user password is hashed with `PBKDF2WithHmacSHA512` algorithm together with a `salt`, to prevent password from being visible in plaintext. `PBKDF2WithHmacSHA512` is deliberately chosen as it is a link:https://adambard.com/blog/3-wrong-ways-to-store-a-password/[slower] algorithm, thus slowing down brute-force attack for finding out user password. The hashing algorithm is present in `PasswordAuthentication` class and the implementation is based off this link:http://stackoverflow.com/a/2861125/3474[stackoverflow] answer."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d Add clients and service providers feature"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "*_HeartÂ²_* allows you to be able to distinguish between clients and service providers."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "When adding a new contact to *_HeartÂ²_*, you would have to specify whether the contact is a \u0027client\u0027 or a \u0027serviceprovider\u0027 by appending \u0027client\u0027 or \u0027serviceprovider\u0027 during adding:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027client add n/Wai Lun p/90463327 e/wailun@u.nus.edu a/PGP House\u0027"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027serviceprovider add n/Lun Wai p/72336409 e/lunwai@u.nus.edu a/RVRC\u0027"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The above commands adds a \u0027client\u0027 and a \u0027service provider\u0027 with the specified information respectively."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "This facilitates many other features of *_HeartÂ²_* for your convenience!"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The keyword \u0027client\u0027 or \u0027serviceprovider\u0027 is used to determine whether a \u0027Client\u0027 or a \u0027ServiceProvider\u0027 is instantiated before adding to the contact list. The contact list is a single list containing both \u0027Client\u0027 and \u0027ServiceProvider\u0027 objects. Filters are then applied based on subsequent commands to select only \u0027client\u0027 or \u0027serviceprovider\u0027 objects."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d Remove clients and service providers feature"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "*_HeartÂ²_* allows you to remove \u0027client\u0027 and \u0027serviceprovider\u0027 if you so wish to!"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "This can be easily done by specifying the \u0027client\u0027 or \u0027serviceprovider\u0027 at the front:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027client remove 1\u0027"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027serviceprovider remove 2\u0027"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The above commands removes the \u0027client\u0027 in index 1 of the \u0027client\u0027 list and the \u0027service provider\u0027 in index 2 of the \u0027serviceprovider\u0027 list respectively."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The keyword \u0027client\u0027 or \u0027serviceprovider\u0027 is used to determine the context of  whether a \u0027client\u0027 or \u0027serviceprovider\u0027 is to be deleted to select the appropriate contact based on the \u0027index\u0027 specified. The contact in question is then removed from the contact list."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d Edit clients and service provider feature"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "*_HeartÂ²_* allows you to make changes to existing \u0027client\u0027 and \u0027serviceprovider\u0027 too!"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "With the list of \u0027client\u0027 or \u0027serviceprovider\u0027 shown on the GUI, simply specify the index of the contact in question, followed by the field to be edited:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027edit 1 n/Wai Lua\u0027"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* \u0027edit 2 p/9046 3328\u0027"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The above commands will update the name of the first contact to Wai Lua and the phone number of the second contact to 9046 3328 respectively."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "The index specified determines the contact in question. The arguments following the index is parsed and used to create an EditContactDescriptor."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "This EditContactDescriptor is then used in conjunction with the earlier in contact in question to create a new contact. A check on whether the contact is a \u0027client\u0027 or \u0027serviceprovider\u0027 is first performed to create a correct replacement contact, before updating the contact list."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d Viewing Search Results [Coming in v2.0]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "eehooi"
        },
        "content": "After the user entered the command into the `CommandBox`, the `BrowserPanel` would be deployed to list the search results in a tabular form:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "eehooi"
        },
        "content": "image::Ui.png[width\"800\"]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d\u003d Profile"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "eehooi"
        },
        "content": "The client\u0027s profile would be displayed on the left, so as to facilitate the user in picking the service"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "eehooi"
        },
        "content": "providers while keeping the requirements in mind."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Data would be extracted from the client\u0027s `Contact` and the text would be set at their respective placeholders, with the"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "eehooi"
        },
        "content": "tags at the bottom left."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d\u003d Tabular View"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "eehooi"
        },
        "content": "The results would be listed from the most to the least relevant based on the client\u0027s needs."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Users can then scroll through the list to view the other results in decreasing relevancy."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display search results"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* *Alternative 1 (current choice):* Present in a table"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "eehooi"
        },
        "content": "** Pros: Provides a bird\u0027s-eye view of all plausible service providers for the client so that the user can pick"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "eehooi"
        },
        "content": "the combination that best suits the client easily"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "eehooi"
        },
        "content": "** Cons: May have performance issues in terms of extracting of data"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* *Alternative 2:* Present in a list"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "eehooi"
        },
        "content": "** Pros: More efficient performance"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "eehooi"
        },
        "content": "** Cons: Users need to scroll through the list for each service provider individually"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d List Feature"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "The user can use the `list` command to list out the various contacts, be it a service provider or a client."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".The UI showing the list command"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::ListCommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Furthermore, the user is also able to add keywords after the list to do filtering, be it categorised or not, and only contacts which contains all of the keywords will be shown."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".The UI showing list filtering"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "image::ListCommandPhoneNumber.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "The keywords from the command to be used for filtering is parsed and passed to a `Predicate` that is implemented as `EntryContainsKeyWordsPredicate`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "We then use a `FilteredList` using the `Predicate` to filter out the contacts."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Substring matching"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Instead of doing an exact match for keywords, we will search for a substring match in the contacts instead by using the `contains()` method in `String`."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "This is done so that users do not need to type in the exact keyword when they want to filter the list of contacts and it saves time for the user as well if they make a mistake."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Tags"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Currently, the `list` command does not take into account of the tags for each contact, and the tags could be used to list different types of clients or service providers, and it is an upcoming feature in v2.0."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding matches between clients and service providers"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "The application boasts matchmaking features that reduces the (once-laborious) task of matching service providers a single command."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d High level design"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".High level overview of how matchmaking works"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "image::matchmaking.png[width:\"800\"]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "1. On invocation, the matchmaking algorithm functionally maps all service requirements from a Client into predicates for performing the first step of filtering the Service Providers."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "2. The service providers are then sorted by a fair ranking algorithm to ensure even distribution of jobs between Service Providers."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to fairly distribute jobs between service providers"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (current choice):* Pure random matching"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Fair at every selection round, easy implementation"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Even job distribution not guaranteed"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2:* Round robin"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Even job distribution guaranteed"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires keeping count of jobs allocated for each service provider"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 3:* Review/ranking-based distribution"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Fair and rewards good performance"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Difficult to fine-tune ranking algorithm"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::documentationheader.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::testingheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Tests ensure that your code runs as expected. This section shows how you can run tests to test this application thoroughly."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::devopsheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "DevOps is an approach to include automation and event monitoring at all steps of the software build. This section documents the tools and methods we used to ensure a high quality code production."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixaheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixbheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* has a need to plan for events (weddings)"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "* has a need to link contacts together"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "*Value proposition*: simplify the process of wedding management for the user, his clients and service providers"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixcheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |on-task project manager |add new clients with the type of services they request for |get the required service providers for the event accordingly"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |thoughtful project manager |add new service providers with the type of services they can offer and their costs |match the service providers to the clients accordingly"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |efficient project manager |search the database for the service provider that best suits the requirements based on filters |find the most suitable service provider for my clients"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |goal-driven project manager |be able to set individual checkpoints and reminders for the many components that a project may have |have a clearer picture on the progress of all the different projects"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |flexible project manager |update the database of service providersâ data |have an up-to-date database that accurately reflects my service providers"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |busy project manager |easily see all unserviced clients |I can quickly complete assigning service providers to them"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |organised project manager |view the availability of my service providers |I will not assign service providers to clients when they are unavailable"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |responsible project head |provide authentication for the project managers and staff |our clientsâ and service providersâ data are only accessible by those who has access to them"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* * *` |organised project manager |be able to archive previous projects in a separate location |they would not clutter my workspace but would still be available for review in the future"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* *` |organised project manager|access clients and service providers separately |I can look through their data more efficiently"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`* *` |modular project manager|offer packages to clients |clients with no particular preferences can be attended to efficiently"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`*` |efficient project manager |create templates |I can easily serve customers of similar request types"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`*` |customer-first project manager |have a ratings and feedback system given by clients for the service providers |I can sieve out the better service providers for future clients"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "|`*` |profit-motivated marketing head |calculate the rough estimate of the cost of each project |source for service providers that would maximise my profits"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixdheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "eehooi"
        },
        "content": "(For all use cases below, the *System* is the *_HeartÂ²_* application, and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Add Client/Service Provider"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to add a new Client/Service Provider"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System adds the new Client/Service Provider into the database"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. The new Client/Service Provider\u0027s syntax is not entered correct."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. System shows a feedback to the user that the Client/Service Provider was not entered correctly."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Update Client/Service Provider"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to update an existing Client/Service Provider"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System updates the existing Client/Service Provider according to the User\u0027s requests"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. The Client/Service Provider does not exist."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. System shows a feedback to the user that the Client/Service Provider does not exist."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Client/Service Provider"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to delete an existing Client/Service Provider"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System deletes the Client/Service Provider specified"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. The Client/Service Provider does not exist."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. System shows a feedback to the user that the Client/Service Provider does not exist"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Login"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to log in with his username and password"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System validates the information entered and allows the user access to the System"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "3.  User is successfully logged in"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. User enters an incorrect username"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. The system display an error message and prompts the user to re-enter his username"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Use case resumes from step 1."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1b. User enters an incorrect password"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1b1. The system will request the user to re-enter his password"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1b2. The user attempts to enter his password"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*** 1b2.1 The system determines that the password is incorrect and provides the option for user to retrieve his forgotten password"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Steps 1b1 and 1b2 are repeated until the user enters his correct password"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** Use case resumes from step 3."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Logout"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to logout from the System"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System logs User out"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "3.  User is successfully logged out"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: List all the Clients or Service Providers"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User enters the list command and requests to view either all the Clients, or all the Service Providers"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System returns either a list with all the Clients\u0027 names and contact numbers, or all the Service Providers\u0027 names and contact numbers"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 2a. There is no Client or no Service Provider available"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 2a1. System returns a message to feedback to User that no Client or no Service Provider exist"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Filter and show a specific Clientâs or Service Providerâs info"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User requests to view either a specific Clientâs or the Service Providerâs info"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  The System displays the info related to the party back to the user"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. User enters a Client or Service Provider that does not exist"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. System prompts the User that such a Client or Service Provider does not exist"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Match the most suitable Service Provider to a Client\u0027s needs"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User attempts to match a Client\u0027s need to an available Service Provider"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "3.  System matches a Service Provider that it deemed the most suitable to the Client"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 1a. The Client has no need. That is to say, the Client is not looking for any Service Provider"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 1a1. System recognises that the Client has no need, and return a message to feedback to the User"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 2a. There is no Service Provider available that matches the Client\u0027s need"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 2a1. System feedback to the User that no Service Provider is available for the current Client\u0027s need"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Use case: Auto-complete typed command"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "1.  User types a letter (or letters) into the command line"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "2.  System suggests a list of commands that starts with the letter(s) that the User has typed"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* 2a. There is no command that starts with the letter(s) that the User has typed"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "** 2a1. System does not suggest anything to the User"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "+"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixeheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Availability"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should only be available for Wedding Managers with login credentials"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be available 24hrs everyday without down time"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Data stored into the Application should be available to Users without corruption"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Performance"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be able to hold up to 1000 Clients and 1000 Service Providers without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Usability"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be intuitive and easy to use for users after following the User Guide"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  A user without any technical knowledge should be able to use the program efficiently with the help of the user guide."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Reliability"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be able to match Service Provider to Client\u0027s needs correctly."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be able to perform all the commands without fail."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Scalability"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Application should be able to scale automatically even after reaching 1000 Clients or 1000 Service Providers."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Huge number of Clients and Service Providers\u0027s data may cause some waiting time for commands to process, but Application should still be able to execute all the commands without fail."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d\u003d Data Integrity"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  Only authorized Users with specific login credentials should be able to add, update, or delete data directly from the Application."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ".  All monetary amounts should be accurate to 2 decimal places."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixfheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[[client]] Client::"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The Client is the primary receiver and the party that requires the services of the Project Manager and Service Providers. The Client puts up requests to the Project Manager to handle their wedding event."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[[service-provider]] Service Provider::"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The Service Providers are what the Project Manager needs to connect his Clients to, to fulfil the Clients\u0027 needs and wants. Service Providers provide goods and services required for the clientsâ weddings and they depend on the Project Manager to look for suitable Clients."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[[project-manager]] Project Manager::"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The User of the application; the Project Manager of a wedding planning company that needs to engage his Clients with his Service Providers, managing a large amount of wedding requests at a time."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[[event]] Event::"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "A single request related to the wedding that the Client expects. The Project Manager plans for and provide this request from a Service Provider. The event encapsulates many different services, such as: wedding photography, formal wedding attire rental, banquet catering, invitation printing, and many others."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixgheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "(This section is to be filled in later)"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::appendixhheader.png[width\u003d\"320\"]"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 418,
      "wailunlim": 70,
      "dongsiji": 32,
      "liaujianjie": 2,
      "eehooi": 56,
      "-": 965
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d HeartÂ² - Enterprise Wedding Management System"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F10-3/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::userguide.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "By: `Team HeartÂ²`      Since: `Aug 2018`      Last updated: `November 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::intropicture.png[width\u003d\"256\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Welcome to *_HeartÂ²_*! _HeartÂ²_ is a desktop software for wedding planning agencies to efficiently manage clients\u0027 and agency companies\u0027 profiles."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "You can find suitable wedding service providers for couples using just a few keystrokes with our enterprise featureset. Jump over to \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This section provides a quick overview to get you started with the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": ".  Download the latest `heart2.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Wedding Planner."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The following format is consistent for all the commands listed in this section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::format.png[width\u003d\"256\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â¦`â after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* Parameters can be in any order. E.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "* Example: An example image shows the source code format for a particular command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`login u/rootUser p/rootPassword`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::commands.png[width\u003d\"256\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "The following section documents all the commands available in this application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Logging in : `login`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Securely logs you in to access the system. By default, a root account with `SUPER_USER` privilege is provided, using the username `rootUser` and password `rootPassword`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Format: `login u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`login u/rootUser p/rootPassword`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Logging out : `logout`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Securely logs you out of the system."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Registering a new account : `register account`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Register a new account for this application. You can only register a new account via an account with `SUPER_USER` privilege. By default, `rootUser` is a default account with `SUPER_USER` privilege."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "It may sound counter-intuitive to require an account before registering a new account. We make this requirement as only authorised personal should be given an account. Ideally, the owner of the application should dictate the account given to employees by helping them register an account."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Format: `register account u/USERNAME p/PASSWORD r/ROLE`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "`r/ROLE`:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "either"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "`r/superuser`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " or `r/readonlyuser` to create a `SUPER_USER` account or `READ_ONLY_USER` account respectively."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`register account u/myNewUsername p/p@ssw0rd r/superuser`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003d\u003d\u003d Change the current password : `change password`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Change your current account password from an old password to a new password."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Condition: your old password is typed in correctly, and new password should not be the same as old password."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Make sure your new password is typed correctly. There is no confirmation prompt once you execute the command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "Format: `change password o/YOUR_OLD_PASSWORD n/YOUR_NEW_PASSWORD`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`change password o/jf3nv n/j9y3nd`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manipulating all clients: `client`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a client"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can register a client and his/her particulars into the database."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `client add n/FULL_NAME p/PHONE_NUMBER e/EMAIL_ADDRESS a/HOME_ADDRESS`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`client add n/John Doe p/87654321 e/johndoe@gmail.com a/123 Lorem Street, #45-67, Singapore 890123`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Listing and searching for clients"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can list all clients in the database if no parameters are provided, otherwise lists all clients matching all of the search parameters."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `client list [n/FULL_NAME] [p/PHONE_NUMBER] [e/EMAIL_ADDRESS] [a/HOME_ADDRESS]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|* `client list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * `client list n/John Doe`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d Manipulating a specific client: `client#id`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a client"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can view the detailed information about a specific client by his/her id."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `client#id view`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`client#123 view`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a client"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can delete a client by his/her id."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `client#id delete`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`client#123 delete`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating a client profile"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can update a client profile by his/her id with new particulars."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `client#id updateprofile [n/FULL_NAME] [p/PHONE_NUMBER] [e/EMAIL_ADDRESS] [a/HOME_ADDRESS]`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|* `client#123 updateprofile p/98765432` (updates `client#123`\u0027s phone number)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": " * `client#123 updateprofile n/Jane Doe e/janedoe@gmail.com` (updates `client#123`\u0027s name and email address)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a service requirement for a client"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eehooi"
        },
        "content": "You can add a service requirement for a client by the client\u0027s id."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eehooi"
        },
        "content": "You must specify the cost which will be in _Singapore Dollars (SGD)_."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Please exclude spacing and symbols (e.g. \u0027$\u0027 \u0027,\u0027) when entering the cost"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Format: `client#id addservice s/SERVICE_TYPE c/SERVICE_COST_BUDGET`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Available Service Types `SERVICE_TYPE`:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `photography`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* `hotel`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* `catering`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* `dress`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* `ring`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* `transport`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eehooi"
        },
        "content": "* `invitation`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eehooi"
        },
        "content": "|* `client#123 addservice s/photography c/2000`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * `client#123 addservice s/catering c/10000`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manipulating all service providers: `serviceprovider`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a service provider"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can register a service provider to the system with the necessary particulars."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `serviceprovider add n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL_ADDRESS a/OFFICE_ADDRESS`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`serviceprovider add n/Infinite Studios p/61234567 e/contact@infinitestudios.sg a/123 Infinite Loop`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003d\u003d\u003d Manipulating a specific service provider: `serviceprovider#id`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a service provider"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can view the detailed information of a service provider by its id."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `serviceprovider$id view`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`serviceprovider#123 view`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a service provider"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can delete a service provider by its id."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `serviceprovider#id delete`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|`serviceprovider#123 delete`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating a service provider profile"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "You can update the details of a service provider by its id with new particulars."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "Format: `serviceprovider#id updateprofile [n/COMPANY_NAME] [p/PHONE_NUMBER] [e/EMAIL_ADDRESS] [a/OFFICE_ADDRESS]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|* `serviceprovider#123 updateprofile p/98765432` (updates `serviceprovider#123`\u0027s phone number)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * `serviceprovider#123 updateprofile e/janedoe@gmail.com a/batcave` (updates `serviceprovider#123`\u0027s email address and office address)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a service type supported by service provider"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eehooi"
        },
        "content": "You can add a service type supported by the service provider by its id."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eehooi"
        },
        "content": "You must specify the cost which will be in _Singapore Dollars (SGD)_."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Please exclude spacing and symbols (e.g. \u0027$\u0027 \u0027,\u0027) when entering the cost"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eehooi"
        },
        "content": "Format: `serviceprovider#id addservice s/SERVICE_TYPE c/SERVICE_COST_ESTIMATE`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "[cols\u003d\"^,\u003c5a\", frame\u003dnone]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|image:exampleimage.png[width\u003d\"64\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eehooi"
        },
        "content": "|* `serviceprovider#123 addservice s/photography c/2000`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * `serviceprovider#123 addservice s/catering c/10000`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands: `history`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can list all the commands that you have entered in reverse chronological order."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Undo the previous command: \u0027undo\u0027"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can undo the most recent command."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d\u003d Redo the most recent command undone: \u0027redo\u0027"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "You can redo the most recent command that was undone by undo."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "There is no need for you to save manually."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "image::faqpicture.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*[red]#Q*#: [red]#How do I transfer my data to another Computer?# +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*[red]#Q*#: [red]#What platform is this application available on?# +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*A*: This application is cross-platform, and can be used on both Windows and Mac OS."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*[red]#Q*#: [red]#Is this application free-of-charge?# +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*A*: Yes, this application is open-source and can be use for free, even commercially."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*[red]#Q*#: [red]#How can I report an issue?# +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "*A*: You can raise an issue in the issue section and our team will get back to you as soon as possbile."
      }
    ],
    "authorContributionMap": {
      "NightYeti": 117,
      "wailunlim": 15,
      "dongsiji": 26,
      "eehooi": 23,
      "-": 159
    }
  },
  {
    "path": "docs/team/dongsiji.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d Dong SiJi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d PROJECT: HeartÂ²"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² is a desktop wedding application used for matching service providers to clients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 39
    }
  },
  {
    "path": "docs/team/ganchinyao.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d Gan Chin Yao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d PROJECT: HeartÂ²"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² is a desktop wedding application used for matching service providers to clients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 39
    }
  },
  {
    "path": "docs/team/liaujianjie.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d Liau Jian Jie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d PROJECT: HeartÂ²"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² is a desktop wedding application used for matching service providers to clients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 39
    }
  },
  {
    "path": "docs/team/limwailun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d Lim Wai Lun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d PROJECT: HeartÂ²"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² is a desktop wedding application used for matching service providers to clients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 39
    }
  },
  {
    "path": "docs/team/ngeehooi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d Ng Ee Hooi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d PROJECT: HeartÂ²"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "HeartÂ² is a desktop wedding application used for matching service providers to clients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlAccountStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    protected static final Logger LOGGER \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing HeartÂ² ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        initAccountStorage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                LOGGER.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(\"Starting HeartÂ² \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping HeartÂ² ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LOGGER.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LOGGER.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The main entry of the application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param args not accepting arguments"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Initialize the storage used and populate default root password if file does not exist."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static void initAccountStorage() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountStorage.populateRootAccountIfMissing(Account.getRootAccount());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 34,
      "eehooi": 1,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private String appTitle \u003d \"HeartÂ²\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the LOGGER with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Creates a LOGGER with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code LOGGER}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Remove all the handlers from {@code LOGGER}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code LOGGER}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            logger.warning(\"Error adding file handler for LOGGER.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 6,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public static final String MESSAGE_LIST_ALL_PERSON \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "dongsiji": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return \"number of persons \" + data.getContactList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/LogoutRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * An event requesting to logout."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class LogoutRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a selection change in the Client List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Contact newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Contact newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contact getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Returns the contactType of the contact that is different between the 2 lists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @param list1 First list to compare."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @param list2 Second list to compare."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @return ContactType of the different contact between the 2 lists."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public static ContactType compareListOfContacts(List\u003cContact\u003e list1, List\u003cContact\u003e list2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e diffList \u003d list1.stream().filter(contact -\u003e !list2.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                .anyMatch(contactToCheck -\u003e contactToCheck.equals(contact))).collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if (diffList.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            diffList \u003d list2.stream().filter(contact -\u003e !list1.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                    .anyMatch(contactToCheck -\u003e contactToCheck.equals(contact))).collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if (diffList.get(0) instanceof Client) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            return ContactType.CLIENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            return ContactType.SERVICE_PROVIDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 29,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code substring}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   Ignores case, but a full substring match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"ABcd\") \u003d\u003d false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @param substring cannot be null, cannot be empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public static boolean containsIgnoreCase(String sentence, String substring) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        requireNonNull(substring);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String preppedSubstring \u003d substring.trim().replaceAll(\" +\", \" \").toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        checkArgument(!preppedSubstring.isEmpty(), \"Substring parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return preppedSentence.contains(preppedSubstring);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlSerializableAccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Update the user with the {@code currentAccount} to the new password."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param file The valid xml file containing the account list stored."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param username The associated username of which the password is to be changed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param newPassword The new password to change to"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IllegalValueException Thrown if duplicated account was found in the account list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws JAXBException Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * into xml and writing to the file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws FileNotFoundException Thrown if the account list file cannot be found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static void updatePasswordInFile(Path file, String username, String newPassword)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throws IllegalValueException, JAXBException, FileNotFoundException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(newPassword);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // read old file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList currentList \u003d (XmlSerializableAccountList) um.unmarshal(file.toFile());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // update password"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d currentList.toModelType();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.updatePassword(username, newPassword);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList newUpdatedList \u003d new XmlSerializableAccountList(accountList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // overwrite old file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        m.marshal(newUpdatedList, file.toFile());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 41,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws LackOfPrivilegeException If the user account does not have the privilege to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * execute that command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, LackOfPrivilegeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, LackOfPrivilegeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            Command command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (model.isUserLoggedIn()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                command \u003d addressBookParser.parseCommandBeforeLoggedIn(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return model.getFilteredContactList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 8,
      "wailunlim": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Adds a contact to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Contact toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Contact}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Contact contact) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d contact;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LackOfPrivilegeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!model.getUserAccount().hasWritePrivilege()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (model.hasContact(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.addContact(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 6,
      "wailunlim": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddServiceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Adds a service and budget under a client."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class AddServiceCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addservice\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a service to the  contact identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + \"by the index number used in the displayed client/serviceprovider list. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + PREFIX_SERVICE + \"SERVICE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + PREFIX_COST + \"COST (excluding \u0027$\u0027) \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + \"Example: \" + \"client#3 \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + PREFIX_SERVICE + \"photographer \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + PREFIX_COST + \"1000 \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + Service.MESSAGE_SERVICE_NAME_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            + Service.MESSAGE_SERVICE_COST_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_ADD_SERVICE_SUCCESS \u003d \"New service added for : %1$s \\n\" + \"Service: %2$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SERVICE \u003d \"This service has already been added\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final Service service;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates an AddServiceCommand to add the specified service and budget."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param index of the contact in the filtered contact list to add service to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param service service to add"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param contactType specifies if contact is a client or service provider"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public AddServiceCommand(Index index, Service service, ContactType contactType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireNonNull(service);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            LackOfPrivilegeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!model.getUserAccount().hasWritePrivilege()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // id is unique"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        model.updateFilteredContactList(contactType.getFilter().and(contact -\u003e contact.getId() \u003d\u003d index.getOneBased()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        List\u003cContact\u003e filteredList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (filteredList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            // filtered list size is 0, meaning there is no such contact"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Contact contactToEdit \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Contact editedContact;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (contactToEdit.hasService(service)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SERVICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            editedContact \u003d createContactWithService(contactToEdit, service);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        model.updateContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_SERVICE_SUCCESS, contactToEdit.getName(), service));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates a new contact with the newly added service"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param contact Current contact to add service to"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param service Service to be added"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @return New contact with newly added service"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Contact createContactWithService(Contact contact, Service service) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        UpdateCommand.EditContactDescriptor editContactDescriptor \u003d new UpdateCommand.EditContactDescriptor();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setName(contact.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setPhone(contact.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setAddress(contact.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setEmail(contact.getEmail());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setTags(contact.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.setServices(contact.getServices());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        editContactDescriptor.addService(service);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return UpdateCommand.createEditedContact(contact, editContactDescriptor, contactType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!(other instanceof AddServiceCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        AddServiceCommand e \u003d (AddServiceCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws LackOfPrivilegeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!model.getUserAccount().hasDeletePrivilege()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 7,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws LackOfPrivilegeException If user account does not possess the required privilege"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * to execute that command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LackOfPrivilegeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public DeleteCommand(Index targetIndex, ContactType contactType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LackOfPrivilegeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!model.getUserAccount().hasDeletePrivilege()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(contactType.getFilter()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .and(contact -\u003e contact.getId() \u003d\u003d targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cContact\u003e filteredList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (filteredList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            // filtered list size is 0, meaning there is no such contact"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // filtered list size is 1 (unique ID for client/serviceprovider)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 8,
      "wailunlim": 18,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlAccountStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Edit the password of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class EditPasswordCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"change password\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_OLDPASSWORD \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_NEWPASSWORD \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit your current account password. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_OLDPASSWORD + \"OLD_PASSWORD \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_NEWPASSWORD + \"NEW_PASSWORD \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_OLDPASSWORD + \"thisIsMyOldPassw0rd \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_NEWPASSWORD + \"thisIsMyNewPassw0rd\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password changed successfully.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE_PASSWORDWRONG \u003d \"Failed to change your password. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Old password was not correct.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE_FILENOTFOUND \u003d \"Failed to change your password. Unable to find\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"your current account file path.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE_SAMEPASSWORD \u003d \"Failed to change your password. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Your old password and new password is the same.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to change your password.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String userTypedOldPassword;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String userTypedNewPassword;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Path accountListPath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public EditPasswordCommand(String userTypedOldPassword, String userTypedNewPassword) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(userTypedOldPassword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(userTypedNewPassword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userTypedOldPassword \u003d userTypedOldPassword;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userTypedNewPassword \u003d userTypedNewPassword;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public EditPasswordCommand(String userTypedOldPassword, String userTypedNewPassword, Path accountListPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(userTypedOldPassword);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(userTypedNewPassword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userTypedOldPassword \u003d userTypedOldPassword;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userTypedNewPassword \u003d userTypedNewPassword;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d accountListPath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account currentAccount \u003d model.getUserAccount();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String username \u003d currentAccount.getUserName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String actualOldPassword \u003d currentAccount.getPassword();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!passwordAuthentication.authenticate(userTypedOldPassword.toCharArray(), actualOldPassword)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_PASSWORDWRONG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (userTypedOldPassword.equals(userTypedNewPassword)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_SAMEPASSWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d accountListPath \u003d\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ? new XmlAccountStorage()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                : new XmlAccountStorage(accountListPath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            String hashedNewPassword \u003d PasswordAuthentication.getHashedPasswordFromPlainText(userTypedNewPassword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.updateAccountPassword(username, hashedNewPassword);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            model.commiteUserChangedPasswordSuccessfully(hashedNewPassword);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_FILENOTFOUND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || (other instanceof EditPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 userTypedOldPassword.equals(((EditPasswordCommand) other).userTypedOldPassword)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 userTypedNewPassword.equals(((EditPasswordCommand) other).userTypedNewPassword));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * Finds and lists all contacts in address book which contain all of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all contacts which contain all of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            + \"Parameters: n/[KEYWORD] p/[KEYWORD] e/[KEYWORD] a/[KEYWORD] t/[KEYWORD] ...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private final ContactContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final Predicate\u003cContact\u003e contactFilter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ListCommand(ContactContainsKeywordsPredicate predicate, Predicate\u003cContact\u003e contactFilter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactFilter \u003d contactFilter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if (predicate.equals(new ContactContainsKeywordsPredicate())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            model.updateFilteredContactList(contactFilter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_LIST_ALL_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(contact -\u003e contactFilter.test(contact) \u0026\u0026 predicate.test(contact));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredContactList().size()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 7,
      "dongsiji": 15,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlAccountStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Log user in with his username and password to gain admin access to the system."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_USERNNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Log in with your username and password. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_USERNNAME + \"USERNAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_USERNNAME + \"heartsquare \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_PASSWORD + \"H3artSquar3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully logged in.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Login failed. Please check your username or password and try again.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Path accountListPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create a new LoginCommand with default path to AccountList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public LoginCommand(String username, String password) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create a new Login Command with the path to AccountList specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public LoginCommand(String username, String password, Path accountListPath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d accountListPath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d accountListPath \u003d\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ? new XmlAccountStorage()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                : new XmlAccountStorage(accountListPath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            AccountList accountList \u003d accountStorage.getAccountList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (accountList.hasUsernameAndPassword(username, password)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                Role userAccountRole \u003d accountList.getAccountRole(username);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                Account accountToCommit \u003d new Account(username, password, userAccountRole);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                accountToCommit.transformToHashedAccount();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                model.commitUserLoggedInSuccessfully(accountToCommit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            logger.warning(\"Data file not in the correct format\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException e2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            logger.warning(\"Problem while reading from the file containing all the accounts\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 username.equals(((LoginCommand) other).username)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 password.equals(((LoginCommand) other).password));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 98,
      "eehooi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.LogoutRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Log the user out of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Log out of the application. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully logged out.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        model.commitUserLoggedOutSuccessfully();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        EventsCenter.getInstance().post(new LogoutRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 21,
      "eehooi": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MatchMakeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "public class MatchMakeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"matchmake\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private final String contactType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private final String contactId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public MatchMakeCommand(String contactType, String contactId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        this.contactId \u003d contactId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        // Update filtered contact list to contain all contacts and get the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        model.updateFilteredContactList(x -\u003e true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        model.getFilteredContactList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        // Find the contact for which we are going to find matches for"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        int contactId \u003d Integer.parseInt(this.contactId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        Contact contact;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            contact \u003d model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .getAddressBook()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .getContactList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .filter(c -\u003e (contactType.equals(\"client\") \u0026\u0026 c instanceof Client)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                            || (contactType.equals(\"serviceprovider\") \u0026\u0026 c instanceof ServiceProvider))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .filter(c -\u003e c.getId() \u003d\u003d contactId)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                    .get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        } catch (NoSuchElementException exception) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            throw new CommandException(String.format(\"Non-existent entity %s#%s.\", contactType, contactId));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (contact instanceof Client) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            Collection\u003cService\u003e servicesRequired \u003d contact.getServices().values();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            model.updateFilteredContactList(c -\u003e (c instanceof ServiceProvider"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                   \u0026\u0026 serviceProviderCanFulfilAtLeastOneService((ServiceProvider) c, servicesRequired)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        } else if (contact instanceof ServiceProvider) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            Collection\u003cService\u003e servicesProvided \u003d contact.getServices().values();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            model.updateFilteredContactList(c -\u003e (c instanceof Client"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                   \u0026\u0026 clientRequiresServices((Client) c, servicesProvided)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            // We should never arrive here. If we do, it means there\u0027s a Contact subclass that is not handled here."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            throw new CommandException(\"Unknown entity, neither client nor service provider found in database.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredContactList().size()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Utility function to check if a {@code serviceProvider} can fulfil a particular {@code serviceRequired}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param serviceProvider The service provider."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param serviceRequired The service required."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return Returns true if the service provider can fulfil the service."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static boolean serviceProviderCanFulfilService(ServiceProvider serviceProvider, Service serviceRequired) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return serviceProvider"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .getServices()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .values()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceProvided -\u003e serviceRequired.isSameServiceTypeAs(serviceProvided))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceProvided -\u003e serviceRequired.getCost() \u003e\u003d serviceProvided.getCost())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .count() \u003e 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Utility function to check if a {@code serviceProvider} can fulfil at least one {@code serviceRequired} from a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * collection of {@code Service}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param serviceProvider The service provider."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param servicesRequired The services required."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return Returns true if the service provider can fulfil at least one of the service."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static boolean serviceProviderCanFulfilAtLeastOneService(ServiceProvider serviceProvider,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                                                                     Collection\u003cService\u003e servicesRequired) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return servicesRequired"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceRequired -\u003e serviceProviderCanFulfilService(serviceProvider, serviceRequired))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .count() \u003e 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Utility function to check if a {@code client} requires and can afford a particular {@code serviceOffered}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param client The client."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param serviceOffered The service offered."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return Returns true if the client requires the service and can afford it."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static boolean clientRequiresService(Client client, Service serviceOffered) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return client"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .getServices()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .values()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceRequired -\u003e serviceRequired.isSameServiceTypeAs(serviceOffered))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceRequired -\u003e serviceRequired.getCost() \u003e\u003d serviceOffered.getCost())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .count() \u003e 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Utility function to check if a {@code client} requires and can afford a at least one of the services offered by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * the service provider in {@code serviceOffered}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param client The client."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param servicesOffered The services offered."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return Returns true if the client requires at least one of the service and can afford it."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static boolean clientRequiresServices(Client client, Collection\u003cService\u003e servicesOffered) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return servicesOffered"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .filter(serviceOffered -\u003e clientRequiresService(client, serviceOffered))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                .count() \u003e 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                || (other instanceof MatchMakeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                \u0026\u0026 contactType.equals(((MatchMakeCommand) other).contactType)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                \u0026\u0026 contactId.equals(((MatchMakeCommand) other).contactId)); // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e listBeforeRedo \u003d new ArrayList\u003c\u003e(model.getAddressBook().getContactList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e listAfterRedo \u003d model.getAddressBook().getContactList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactType toFilter \u003d CollectionUtil.compareListOfContacts(listAfterRedo, listBeforeRedo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        model.updateFilteredContactList(toFilter.getFilter());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlAccountStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Register a new account and save the account into database. Only a SUPER_USER account"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * can register a new account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class RegisterAccountCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register account\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_USERNNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Register a new account. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_USERNNAME + \"USERNAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_USERNNAME + \"newUserName \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_PASSWORD + \"newPassword \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + PREFIX_ROLE + \"superuser \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully registered the account.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to register the new account. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"Please make sure to use only \\\"r/superuser\\\" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"or r/readonlyuser\\\" for role.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE_FILENOTFOUND \u003d \"Failed to find the file to save account to.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_FAILURE_DUPLICATE \u003d \"Username is taken. Please try again with another username.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_INVALIDROLE \u003d \"Role should contains only\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            + \"\\\"superuser\\\" or \\\"readonlyuser\\\".\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Path accountListPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Creates a new RegisterAccountCommand with the account, and save the account to the default path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account to be registered."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public RegisterAccountCommand(Account account) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create  a new RegisterAccountCommand with the account, and save to the specified path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account to be registered"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param accountListPath The Path to save the account to."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public RegisterAccountCommand(Account account, Path accountListPath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.accountListPath \u003d accountListPath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LackOfPrivilegeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!model.getUserAccount().hasAccountCreationPrivilege()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d accountListPath \u003d\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ? new XmlAccountStorage()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                : new XmlAccountStorage(accountListPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (accountStorage.getAccountList().hasUserName(account.getUserName())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE_DUPLICATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.saveAccount(account);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (e instanceof FileNotFoundException) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE_FILENOTFOUND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || (other instanceof RegisterAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 account.equals(((RegisterAccountCommand) other).account));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Selects a client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            + \": Selects the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Client: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cContact\u003e filteredContactList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredContactList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e listBeforeUndo \u003d new ArrayList\u003c\u003e(model.getAddressBook().getContactList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e listAfterUndo \u003d model.getAddressBook().getContactList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactType toFilter \u003d CollectionUtil.compareListOfContacts(listAfterUndo, listBeforeUndo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        model.updateFilteredContactList(toFilter.getFilter());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Edits the details of an existing contact in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This client already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final EditContactDescriptor editContactDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @param index of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @param editContactDescriptor details to edit the contact with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @param contactType"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public UpdateCommand(Index index, EditContactDescriptor editContactDescriptor, ContactType contactType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        requireNonNull(editContactDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.editContactDescriptor \u003d new EditContactDescriptor(editContactDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            LackOfPrivilegeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!model.getUserAccount().hasWritePrivilege()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new LackOfPrivilegeException(COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // id is unique"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(contactType.getFilter().and(contact -\u003e contact.getId() \u003d\u003d index.getOneBased()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cContact\u003e filteredList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (filteredList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            // filtered list size is 0, meaning there is no such contact"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToEdit \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d createEditedContact(contactToEdit, editContactDescriptor, contactType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (!contactToEdit.isSameContact(editedContact) \u0026\u0026 model.hasContact(editedContact)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(contactType.getFilter());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedContact));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates and returns a {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @code Contact} with the details of {@code contactToEdit}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * edited with {@code editContactDescriptor}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static Contact createEditedContact(Contact contactToEdit, EditContactDescriptor editContactDescriptor,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                                               ContactType contactType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assert contactToEdit !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Name updatedName \u003d editContactDescriptor.getName().orElse(contactToEdit.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Phone updatedPhone \u003d editContactDescriptor.getPhone().orElse(contactToEdit.getPhone());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Email updatedEmail \u003d editContactDescriptor.getEmail().orElse(contactToEdit.getEmail());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Address updatedAddress \u003d editContactDescriptor.getAddress().orElse(contactToEdit.getAddress());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editContactDescriptor.getTags().orElse(contactToEdit.getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Map\u003cString, Service\u003e updatedServices \u003d editContactDescriptor.getServices().orElse(contactToEdit.getServices());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int id \u003d contactToEdit.getId();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO take a look at this below vvvvv"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        switch (contactType) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case CLIENT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    updatedServices, id);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case SERVICE_PROVIDER:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new ServiceProvider(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    updatedServices, id);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 editContactDescriptor.equals(e.editContactDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Stores the details to edit the contact with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * corresponding field value of the contact."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static class EditContactDescriptor {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        private Map\u003cString, Service\u003e services;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public EditContactDescriptor() {}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public EditContactDescriptor(EditContactDescriptor toCopy) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            setServices(toCopy.services);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, services);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * Sets {@code services} to this object\u0027s {@code services}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * A defensive copy of {@code services} is used internally."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        public void setServices(Map\u003cString, Service\u003e services) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            this.services \u003d (services !\u003d null) ? new HashMap\u003c\u003e(services) : null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * Returns an unmodifiable services map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code services} is null."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        public Optional\u003cMap\u003cString, Service\u003e\u003e getServices() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return (services !\u003d null) ? Optional.of(Collections.unmodifiableMap(services)) : Optional.empty();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * Adds the specified service."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         * @param service Service to be added."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        public void addService(Service service) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            this.services.put(service.getName(), service);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            if (!(other instanceof EditContactDescriptor)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            EditContactDescriptor e \u003d (EditContactDescriptor) other;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u0026\u0026 getServices().equals(e.getServices());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 8,
      "wailunlim": 61,
      "eehooi": 41,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/LackOfPrivilegeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Represents an error when a user whose account does not have certain privileges tries to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * execute certain commands meant for account with those privileges."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * See {@link seedu.address.model.account.Role}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LackOfPrivilegeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public LackOfPrivilegeException(String commandName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        super(\"You do not have privilege to access \\\u0027\" + commandName + \"\\\u0027 command.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public AddCommandParser(ContactType contactType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d createLegalArgumentMultimap(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return new AddCommand(createContact(name, phone, email, address, tagList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Creates either a client or a service provider contact given the name, phone, email, address and tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Contact createContact(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        switch (contactType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case CLIENT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new Client(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case SERVICE_PROVIDER:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new ServiceProvider(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            // should nvr come here"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new RuntimeException(\"No such Contact Type\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Creates a {@code ArgumentMultimap} using the arguments from the input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @param args The arguments from the input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @return the {@code ArgumentMultimap} generated using the input arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @throws ParseException If a legal {@code ArgumentMultimap} is not able to be created due to an invalid command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     *     format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected ArgumentMultimap createLegalArgumentMultimap(String args) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 41,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddServiceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.AddServiceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Parses input arguments and creates a new AddServiceCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class AddServiceCommandParser implements Parser\u003cAddServiceCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public AddServiceCommandParser(ContactType contactType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddServiceCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * and returns an AddServiceCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public AddServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERVICE, PREFIX_COST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, AddServiceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SERVICE, PREFIX_COST)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Optional\u003cString\u003e serviceName \u003d argMultimap.getValue(PREFIX_SERVICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Optional\u003cString\u003e serviceCost \u003d argMultimap.getValue(PREFIX_COST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (serviceName.isPresent() \u0026\u0026 serviceCost.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (!Service.isValidServiceName(serviceName.get())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                throw new ParseException(Service.MESSAGE_SERVICE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (!Service.isValidServiceCost(parseInt(serviceCost.get()))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                throw new ParseException(Service.MESSAGE_SERVICE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            Service service \u003d new Service(serviceName.get(), parseInt(serviceCost.get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new AddServiceCommand(index, service, contactType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            Pattern.compile(\"(?\u003cfirstWord\u003e[a-zA-Z]+)(?\u003cidentifier\u003e#[\\\\d\\\\w-]+)?(?\u003csecondWord\u003e[\\\\s]+(?!./)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                    + \"[a-zA-Z]+)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Parses user input into command for execution. This method is use before user has successfully logged in."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param userInput full user input string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Command parseCommandBeforeLoggedIn(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final String commandWord \u003d getCommandWord(matcher.group(\"firstWord\"), matcher.group(\"secondWord\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Combines the first and second words to form the command word."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private String getCommandWord(String firstWord, String secondWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String commandWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (secondWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            commandWord \u003d firstWord;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            commandWord \u003d String.format(\"%s %s\", firstWord, secondWord.trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Parses user input into command for execution. This method will only be called after"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * user has successfully log in."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            //TODO: update HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final String firstWord \u003d matcher.group(\"firstWord\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final String identifier \u003d matcher.group(\"identifier\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final String secondWord \u003d matcher.group(\"secondWord\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final String commandWord \u003d getCommandWord(firstWord, secondWord);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: do away with new String cases"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        case RegisterAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new RegisterAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        case EditPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new EditPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"select\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"client add\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new AddCommandParser(ContactType.CLIENT).parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"client delete\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new DeleteCommandParser(ContactType.CLIENT).parse(requireNonNull(identifier).substring(1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"client list\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new ListCommandParser(ContactType.CLIENT).parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"client update\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new UpdateCommandParser(ContactType.CLIENT)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                    .parse(String.format(\"%s %s\", requireNonNull(identifier).substring(1), arguments));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        case \"client addservice\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new AddServiceCommandParser(ContactType.CLIENT)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    .parse(String.format(\"%s %s\", requireNonNull(identifier).substring(1), arguments));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        case \"client matchmake\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        case \"serviceprovider matchmake\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            return new MatchMakeCommandParser().parse(firstWord + identifier);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"serviceprovider add\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new AddCommandParser(ContactType.SERVICE_PROVIDER).parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"serviceprovider delete\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new DeleteCommandParser(ContactType.SERVICE_PROVIDER)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                    .parse(requireNonNull(identifier).substring(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"serviceprovider list\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new ListCommandParser(ContactType.SERVICE_PROVIDER).parse(arguments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        case \"serviceprovider update\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new UpdateCommandParser(ContactType.SERVICE_PROVIDER)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                    .parse(String.format(\"%s %s\", requireNonNull(identifier).substring(1), arguments));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        case \"serviceprovider addservice\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new AddServiceCommandParser(ContactType.SERVICE_PROVIDER)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    .parse(String.format(\"%s %s\", requireNonNull(identifier).substring(1), arguments));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 38,
      "wailunlim": 64,
      "liaujianjie": 5,
      "eehooi": 8,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return argMultimap.size() \u003d\u003d 1 \u0026\u0026 getPreamble().equals(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final Prefix PREFIX_SERVICE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public DeleteCommandParser(ContactType contactType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            requireNonNull(args).substring(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            Index id \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return new DeleteCommand(id, contactType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        } catch (ParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 13,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Parses input arguments for editing user password."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class EditPasswordCommandParser implements Parser\u003cEditPasswordCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * and returns a LoginCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public EditPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.PREFIX_OLDPASSWORD, EditPasswordCommand.PREFIX_NEWPASSWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, EditPasswordCommand.PREFIX_OLDPASSWORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.PREFIX_NEWPASSWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e oldPassword \u003d argMultimap.getValue(EditPasswordCommand.PREFIX_OLDPASSWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e newPassword \u003d argMultimap.getValue(EditPasswordCommand.PREFIX_NEWPASSWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (oldPassword.isPresent() \u0026\u0026 newPassword.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new EditPasswordCommand(oldPassword.get(), newPassword.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NightYeti": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.ContactInformation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ListCommandParser(ContactType contactType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d createLegalArgumentMultimap(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Optional\u003cString\u003e name \u003d argMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Optional\u003cString\u003e phone \u003d argMultimap.getValue(PREFIX_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Optional\u003cString\u003e email \u003d argMultimap.getValue(PREFIX_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Optional\u003cString\u003e address \u003d argMultimap.getValue(PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cString\u003e tagList \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return new ListCommand(new ContactContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new ContactInformation(name, phone, email, address, tagList)), contactType.getFilter());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Creates a {@code ArgumentMultimap} using the arguments from the input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @param args The arguments from the input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @return the {@code ArgumentMultimap} generated using the input arguments."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * @throws ParseException If a legal {@code ArgumentMultimap} is not able to be created due to an invalid command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *     format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    protected ArgumentMultimap createLegalArgumentMultimap(String args) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 !argMultimap.isEmpty())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Returns true if at least one of the prefixes contains non-empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e !argumentMultimap.getValue(prefix).orElse(\"empty\").equals(\"\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 27,
      "dongsiji": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Parses input arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * and returns a LoginCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public LoginCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                LoginCommand.PREFIX_USERNNAME, LoginCommand.PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, LoginCommand.PREFIX_USERNNAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                LoginCommand.PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e username \u003d argMultimap.getValue(LoginCommand.PREFIX_USERNNAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e password \u003d argMultimap.getValue(LoginCommand.PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (username.isPresent() \u0026\u0026 password.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return new LoginCommand(username.get(), password.get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MatchMakeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.logic.commands.MatchMakeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " * Parses input arguments and creates a new MatchMakeCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "public class MatchMakeCommandParser implements Parser\u003cMatchMakeCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static final int ENTITY_TYPE \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private static final int ENTITY_ID \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MatchMakeCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * and returns an MatchMakeCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public MatchMakeCommand parse(String args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            return new MatchMakeCommand(null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        String[] entity \u003d trimmedArgs.split(\"#\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        String entityType \u003d entity[ENTITY_TYPE];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        String entityId \u003d entity[ENTITY_ID];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return new MatchMakeCommand(entityType, entityId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Parse input arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class RegisterAccountCommandParser implements Parser\u003cRegisterAccountCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * and returns a LoginCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public RegisterAccountCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                RegisterAccountCommand.PREFIX_USERNNAME, RegisterAccountCommand.PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                RegisterAccountCommand.PREFIX_ROLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, RegisterAccountCommand.PREFIX_USERNNAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                RegisterAccountCommand.PREFIX_PASSWORD, RegisterAccountCommand.PREFIX_ROLE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                    RegisterAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e username \u003d argMultimap.getValue(RegisterAccountCommand.PREFIX_USERNNAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e password \u003d argMultimap.getValue(RegisterAccountCommand.PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Optional\u003cString\u003e role \u003d argMultimap.getValue(RegisterAccountCommand.PREFIX_ROLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (username.isPresent() \u0026\u0026 password.isPresent() \u0026\u0026 role.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            String roleName \u003d role.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (roleName.equalsIgnoreCase(\"superuser\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                Account account \u003d new Account(username.get(), password.get(), Role.SUPER_USER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return new RegisterAccountCommand(account);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            } else if (roleName.equalsIgnoreCase(\"readonlyuser\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                Account account \u003d new Account(username.get(), password.get(), Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return new RegisterAccountCommand(account);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                throw new ParseException(RegisterAccountCommand.MESSAGE_INVALIDROLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ContactType contactType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public UpdateCommandParser(ContactType contactType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contactType \u003d contactType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor editPersonDescriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return new UpdateCommand(index, editPersonDescriptor, contactType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 17,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/security/PasswordAuthentication.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.security.spec.InvalidKeySpecException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.security.spec.KeySpec;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.crypto.SecretKeyFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.crypto.spec.PBEKeySpec;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Hash passwords for storage, and test passwords against password tokens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Instances of this class can be used concurrently by multiple threads."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * @author erickson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * @see \u003ca href\u003d\"http://stackoverflow.com/a/2861125/3474\"\u003eStackOverflow\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public final class PasswordAuthentication {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Each token produced by this class uses this identifier as a prefix."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String ID \u003d \"$31$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The minimum recommended cost, used by default"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final int DEFAULT_COST \u003d 16;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String ALGORITHM \u003d \"PBKDF2WithHmacSHA512\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final int SIZE \u003d 128;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Pattern layout \u003d Pattern.compile(\"\\\\$31\\\\$(\\\\d\\\\d?)\\\\$(.{43})\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private final SecureRandom random;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private final int cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public PasswordAuthentication() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this(DEFAULT_COST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create a password manager with a specified cost"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param cost the exponential computational cost of hashing a password, 0 to 30"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public PasswordAuthentication(int cost) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        int dummy \u003d iterations(cost); /* Validate cost */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.random \u003d new SecureRandom();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static String getHashedPasswordFromPlainText(String plainText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return passwordAuthentication.hash(plainText.toCharArray());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Conduct an iteration."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static int iterations(int cost) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if ((cost \u003c 0) || (cost \u003e 30)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalArgumentException(\"cost: \" + cost);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return 1 \u003c\u003c cost;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Hash a password for storage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return a secure authentication token to be stored for later authentication"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public String hash(char[] password) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] salt \u003d new byte[SIZE / 8];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        random.nextBytes(salt);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] dk \u003d pbkdf2(password, salt, 1 \u003c\u003c cost);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] hash \u003d new byte[salt.length + dk.length];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        System.arraycopy(salt, 0, hash, 0, salt.length);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        System.arraycopy(dk, 0, hash, salt.length, dk.length);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Base64.Encoder enc \u003d Base64.getUrlEncoder().withoutPadding();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return ID + cost + \u0027$\u0027 + enc.encodeToString(hash);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Hash a password in an immutable {@code String}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * \u003cp\u003ePasswords should be stored in a {@code char[]} so that it can be filled"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * with zeros after use instead of lingering on the heap and elsewhere."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public String hash(String password) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return hash(password.toCharArray());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Authenticate with a password and a stored password token."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if the password and token match"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean authenticate(char[] password, String token) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Matcher m \u003d layout.matcher(token);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!m.matches()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid token format\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        int iterations \u003d iterations(Integer.parseInt(m.group(1)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] hash \u003d Base64.getUrlDecoder().decode(m.group(2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] salt \u003d Arrays.copyOfRange(hash, 0, SIZE / 8);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        byte[] check \u003d pbkdf2(password, salt, iterations);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        int zero \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (int idx \u003d 0; idx \u003c check.length; ++idx) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            zero |\u003d hash[salt.length + idx] ^ check[idx];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return zero \u003d\u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Use the pbkdf2 algorithm provided by java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static byte[] pbkdf2(char[] password, byte[] salt, int iterations) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        KeySpec spec \u003d new PBEKeySpec(password, salt, iterations, SIZE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            SecretKeyFactory f \u003d SecretKeyFactory.getInstance(ALGORITHM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return f.generateSecret(spec).getEncoded();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (NoSuchAlgorithmException ex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalStateException(\"Missing algorithm: \" + ALGORITHM, ex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (InvalidKeySpecException ex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalStateException(\"Invalid SecretKeyFactory\", ex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.UniqueContactList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final UniqueContactList\u003cContact\u003e contacts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        contacts \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Creates an AddressBook using the Contacts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Replaces the contents of the contact list with {@code contacts}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.contacts.setContacts(contacts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        setContacts(newData.getContactList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //// contact-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return contacts.contains(contact);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Adds a contact to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void addContact(Contact p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        contacts.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Replaces the given contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing contact in the address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void updateContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedContact);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        contacts.setContact(target, editedContact);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void removeContact(Contact key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        contacts.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return contacts.asUnmodifiableObservableList().size() + \" contacts\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return contacts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 contacts.equals(((AddressBook) other).contacts));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return contacts.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 30,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ContactType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Specifies the different contact types. This enum includes the correct filter required to filter a specific"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * contact type from a list of contacts of different contact types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public enum ContactType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    CLIENT {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public Predicate\u003cContact\u003e getFilter() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return contact -\u003e contact instanceof Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    SERVICE_PROVIDER {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public Predicate\u003cContact\u003e getFilter() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return contact -\u003e contact instanceof ServiceProvider;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public abstract Predicate\u003cContact\u003e getFilter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //TODO: this predicate shows contacts only. javadocs is incorrect here but KIV first"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    Predicate\u003cContact\u003e PREDICATE_SHOW_ALL_PERSONS \u003d contact -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    boolean hasContact(Contact contact);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Deletes the given contact."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact must exist in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    void deleteContact(Contact target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Adds the given contact."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * {@code contact} must not already exist in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    void addContact(Contact contact);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Replaces the given contact {@code target} with {@code editedContact}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing contact in the address"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     *     book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    void updateContact(Contact target, Contact editedContact);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /** Returns an unmodifiable view of the filtered contact list */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Updates the filter of the filtered contact list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    void updateFilteredContactList(Predicate\u003cContact\u003e predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The user has logged in with an account successfully. Saves this account"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * into"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account user used to log in successfully"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void commitUserLoggedInSuccessfully(Account account);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Get the user account which he used to logged in to this application."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The account used to logged in to this application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    Account getUserAccount();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Return true if user has logged in successfully, false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if user has logged in successfully, false otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    boolean isUserLoggedIn();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The user has logged out of his account successfully."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void commitUserLoggedOutSuccessfully();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The user has changed his old password to {@code newPassword}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void commiteUserChangedPasswordSuccessfully(String newPassword);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 30,
      "wailunlim": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cContact\u003e filteredContacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Account userAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        filteredContacts \u003d new FilteredList\u003c\u003e(versionedAddressBook.getContactList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // initial: agreed to show client list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ModelManager(Account userAccount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userAccount \u003d userAccount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, Account userAccount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userAccount \u003d userAccount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return versionedAddressBook.hasContact(contact);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        versionedAddressBook.removeContact(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        versionedAddressBook.addContact(contact);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        updateFilteredContactList(contact.getType().getFilter());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void updateContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        versionedAddressBook.updateContact(target, editedContact);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredContacts);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredContacts.setPredicate(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void commitUserLoggedInSuccessfully(Account userAccount) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.userAccount \u003d userAccount;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Account getUserAccount() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(userAccount);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return userAccount;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean isUserLoggedIn() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return userAccount !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void commitUserLoggedOutSuccessfully() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        userAccount \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void commiteUserChangedPasswordSuccessfully(String newPassword) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        userAccount \u003d new Account(userAccount.getUserName(), newPassword, userAccount.getRole());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredContacts.equals(other.filteredContacts);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 38,
      "wailunlim": 16,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    ObservableList\u003cContact\u003e getContactList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Searchable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " * Searchable model"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "public interface Searchable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Filters a stream of Searchable for the specified query string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param searchableStream Source stream"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param queryString      Query string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    List\u003cSearchable\u003e search(Stream\u003cSearchable\u003e searchableStream, String queryString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Account.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * Account class represents a single Account that comprises of a username,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * password, and role associated with an account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String USERNAME_CONSTRAINT \u003d \"Username cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String PASSWORD_CONSTRAINT \u003d \"Password cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String ROLE_CONSTRAINT \u003d \"Role is not specified.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Account(String username, String password) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.role \u003d Role.READ_ONLY_USER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Account(String username, String password, Role role) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void setPassword(String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void transformToHashedAccount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d PasswordAuthentication.getHashedPasswordFromPlainText(password);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Write privilege refers to the ability to add or update contact."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * A user has write privilege if he is allowed to add and update existing contact."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if a user has write privilege, false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasWritePrivilege() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return role \u003d\u003d Role.SUPER_USER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Delete privilege refers to the ability to delete a single contact, or all contact"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * from the stored data. A user has delete privilege if he is allowed to delete"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * existing stored data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if a user has delete privilege, false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasDeletePrivilege() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return role \u003d\u003d Role.SUPER_USER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Account creation privilege refers to the ability to create a new account with a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * username, password, and specifying a role. A user has account creation privilege"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * if he is allowed to create a new account, either for himself, or for other people."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if a user has account creation privilege, false otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasAccountCreationPrivilege() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return role \u003d\u003d Role.SUPER_USER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * The root user account hardcoded."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static Account getRootAccount() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return new Account(\"rootUser\", \"rootPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * An Account is equal to another Account if both of them have the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * same username and password."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param other Other Account to compare"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if both Accounts are equal, false otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return otherAccount.getUserName().equalsIgnoreCase(this.username)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 otherAccount.getPassword().equals(this.password);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/AccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * AccountList represents the entire list of accounts that were created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * and stored in the local database. Currently, all username and password are"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * stored locally in a xml file without encryption."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class AccountList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private List\u003cAccount\u003e accountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public AccountList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public List\u003cAccount\u003e getList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.add(account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Read from the lists of account and compare the provided account\u0027s username with an account stored in the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * account list that has the same username. If a match is found, return the Role of the account as specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * in the account list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param username The account to get the privilege."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The role of the username specified in the account list file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IllegalArgumentException If the provided username is not found in the account list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Role getAccountRole(String username) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (account.getUserName().equalsIgnoreCase(username)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return account.getRole();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        throw new IllegalArgumentException(\"Account not found.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Update the user associated with the {@code currentAccount} to the given password."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param username The username to update the account."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param plainTextPassword The password to update the account"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePassword(String username, String plainTextPassword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (account.getUserName().equalsIgnoreCase(username)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                account.setPassword(plainTextPassword);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns the index of the first occurrence of the given account in this accountList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * or -1 if accountList does not contain the account."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account to be checked."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The index of the first occurrence of the account in the list, or -1 if"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * accountList does not contain the account."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public int indexOfAccount(Account account) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountList.indexOf(account);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns true if accountList contains the given account."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if the accountList contains the account, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return indexOfAccount(account) !\u003d -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Return true if the account list contains the username, and the password provided"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * is also correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param username The username of the account"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param plainTextPassword The plaintext password of the account"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return True if the username and password matches an existing account in the account list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasUsernameAndPassword(String username, String plainTextPassword) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (account.getUserName().equalsIgnoreCase(username)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                    \u0026\u0026 passwordAuthentication.authenticate(plainTextPassword.toCharArray(), account.getPassword())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Check if the accountList contains the username."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param username The username to be checked."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return true if accountList contains the username, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean hasUserName(String username) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (account.getUserName().equalsIgnoreCase(username)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                || (other instanceof AccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 accountList.equals(((AccountList) other).accountList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Role.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * A role refers to what privilege a user account has. A SUPER_USER is the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * with full capabilities. A READ_ONLY_USER cannot add, edit, and delete any entries"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * in the database."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    SUPER_USER, READ_ONLY_USER"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a client in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class Client extends Contact {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static int clientId \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d clientId++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Map\u003cString, Service\u003e services) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(name, phone, email, address, tags, services);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.id \u003d clientId++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Client(Name name, Phone phone, Email email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                  Address address, Set\u003cTag\u003e tags, Map\u003cString, Service\u003e services, int id) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(name, phone, email, address, tags, services);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static void resetClientId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        clientId \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ContactType getType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return ContactType.CLIENT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if both clients have the same identity and data fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Client otherContact \u003d (Client) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherContact.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherContact.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherContact.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 otherContact.getTags().equals(getTags())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 otherContact.getServices().equals(getServices());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 35,
      "eehooi": 12,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a Client\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Contact.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * An abstract class the client and the service provider inherits."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public abstract class Contact {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    protected final Map\u003cString, Service\u003e services \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Contact(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Contact(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Map\u003cString, Service\u003e services) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, services);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.services.putAll(services);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public abstract int getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public boolean hasService(Service service) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return services.containsKey(service.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Get the name of the contact"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Get the address of the contact"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Get the email of the contact"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // get the phone number of the contact"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Get the contact type of this contact"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public abstract ContactType getType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    // Get the services of the contact."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Map\u003cString, Service\u003e getServices() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return services;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    // Get the services of the contact in a stream."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Stream\u003cService\u003e getServicesStream() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return services.values().stream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public boolean isSameContact(Contact otherContact) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherContact \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherContact !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 ((otherContact.getPhone().equals(getPhone()) || otherContact.getEmail().equals(getEmail())));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 86,
      "eehooi": 28,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/ContactContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * Tests that a {@code Contact}\u0027s properties matches with the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "public class ContactContainsKeywordsPredicate implements Predicate\u003cContact\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private final ContactInformation keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.keywords \u003d new ContactInformation();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactContainsKeywordsPredicate(ContactInformation keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactContainsKeywordsPredicate(Contact contact) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.keywords \u003d new ContactInformation(contact);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public boolean test(Contact contact) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return keywords.getName().map(name -\u003e StringUtil.containsIgnoreCase(contact.getName().toString(), name))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                    .orElse(true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 keywords.getPhone().map(phone -\u003e StringUtil.containsIgnoreCase(contact.getPhone().toString(), phone))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                    .orElse(true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 keywords.getEmail().map(email -\u003e StringUtil.containsIgnoreCase(contact.getEmail().toString(), email))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                    .orElse(true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 keywords.getAddress().map(address -\u003e StringUtil.containsIgnoreCase(contact.getAddress().toString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                    address)).orElse(true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 (keywords.getTags().stream().allMatch(tag -\u003e StringUtil.containsIgnoreCase("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                        contact.getTags().toString(), tag))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                || keywords.getTags().isEmpty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                || (other instanceof ContactContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/ContactInformation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * Encapsulates information about a {@code Contact}, some of which may not be available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "public class ContactInformation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private Optional\u003cString\u003e name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private Optional\u003cString\u003e phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private Optional\u003cString\u003e email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private Optional\u003cString\u003e address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactInformation () {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        name \u003d Optional.empty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        phone \u003d Optional.empty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        email \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        address \u003d Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactInformation (Optional\u003cString\u003e name, Optional\u003cString\u003e phone, Optional\u003cString\u003e email,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                               Optional\u003cString\u003e address, List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public ContactInformation (Contact contact) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        name \u003d Optional.of(contact.getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        phone \u003d Optional.of(contact.getPhone().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        email \u003d Optional.of(contact.getEmail().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        address \u003d Optional.of(contact.getAddress().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags \u003d contact.getTags().stream().map(tag -\u003e tag.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public Optional\u003cString\u003e getPhone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public Optional\u003cString\u003e getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public Optional\u003cString\u003e getAddress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return !name.isPresent() \u0026\u0026 !phone.isPresent() \u0026\u0026 !email.isPresent() \u0026\u0026 !address.isPresent() \u0026\u0026 tags.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                || (other instanceof ContactInformation // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 name.equals(((ContactInformation) other).name)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 phone.equals(((ContactInformation) other).phone)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 email.equals(((ContactInformation) other).email)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 address.equals(((ContactInformation) other).address)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \u0026\u0026 tags.equals(((ContactInformation) other).tags)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a Client\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a Client\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a Client\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Service.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Defines the service types"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "enum ServiceType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    photographer, hotel, catering, dress, ring, transport, invitation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Represents a Contact\u0027s Service in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidServiceName(String)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class Service {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_SERVICE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            \"Valid Services: photographer, hotel, catering, dress, ring, transport, invitation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String MESSAGE_SERVICE_COST_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            \"Service cost must be more than $1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public final String serviceName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public final int serviceCost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    // Id list of clients / service providers for service providers / clients respectively."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private List\u003cInteger\u003e idList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Constructs a {@code Service}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param service A valid service name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param cost Cost of this service."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Service(String service, int cost) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        requireNonNull(service);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        checkArgument(isValidServiceName(service), MESSAGE_SERVICE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        checkArgument(isValidServiceCost(cost), MESSAGE_SERVICE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        serviceName \u003d service;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        serviceCost \u003d cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        idList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return serviceName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public int getCost() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return serviceCost;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public List\u003cInteger\u003e getIdList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return idList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Returns true if a given string is a valid service name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static boolean isValidServiceName(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        for (ServiceType s : ServiceType.values()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (s.name().equals(test)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Returns true if a given cost is above 0."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static boolean isValidServiceCost(int test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return (!(test \u003c\u003d 0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * Returns true if the service type is the same as the {@code other} service specified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @param other The Service type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     * @return True if is the same type."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public boolean isSameServiceTypeAs(Service other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        return serviceName.equals(other.serviceName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return serviceName + \" $\" + serviceCost;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                || (other instanceof Service // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 serviceName.equals(((Service) other).serviceName)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return serviceName.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 9,
      "eehooi": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/UniqueContactList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "//TODO: Confirm that this javadoc is accurate, especially the last sentence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A list of contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A contact is considered unique by comparing using {@code Contact#isSameContact(Contact)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * updating of contacts uses Contact#isSameContact(Contact) for equality so as to ensure that the contact being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * or updated is unique in terms of identity in the UniqueContactList. However, the removal of a contact uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Contact#equals(Object) so as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * @see Contact#isSameContact(Contact)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UniqueContactList\u003cT extends Contact\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if the list contains an equivalent contact as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameContact);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Adds a contact to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Replaces the contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing contact in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact(T target, T editedContact) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameContact(editedContact) \u0026\u0026 contains(editedContact)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedContact);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Removes the equivalent contact from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * The contact must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts(UniqueContactList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Replaces the contents of this list with {@code contacts}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts(List\u003cT\u003e contacts) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(contacts);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (!contactsAreUnique(contacts)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(contacts);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                || (other instanceof UniqueContactList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueContactList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if {@code contacts} contains only unique contacts."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private boolean contactsAreUnique(List\u003cT\u003e contacts) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c contacts.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                if (contacts.get(i).isSameContact(contacts.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 39,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/ContactNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ContactNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/DuplicateContactException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Signals that the operation will result in duplicate Contactss (Contacts are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class DuplicateContactException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public DuplicateContactException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        super(\"Operation would result in duplicate contacts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/serviceprovider/ServiceProvider.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.serviceprovider;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Represents a ServiceProvider in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ServiceProvider extends Contact {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static int serviceProviderId \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProvider(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d serviceProviderId++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public ServiceProvider(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                           Map\u003cString, Service\u003e service) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(name, phone, email, address, tags, service);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.id \u003d serviceProviderId++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public ServiceProvider(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                           Map\u003cString, Service\u003e services, int id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(name, phone, email, address, tags, services);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ContactType getType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return ContactType.SERVICE_PROVIDER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if both service providers have the same identity and data fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * This defines a stronger notion of equality between two service providers."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        if (!(other instanceof ServiceProvider)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ServiceProvider otherServiceProvider \u003d (ServiceProvider) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return otherServiceProvider.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 otherServiceProvider.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 otherServiceProvider.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \u0026\u0026 otherServiceProvider.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 otherServiceProvider.getTags().equals(getTags())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 otherServiceProvider.getServices().equals(getServices());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 63,
      "eehooi": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Contact[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Contact[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Contact sampleContact : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            sampleAb.addContact(sampleContact);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 12,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AccountStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * An interface used to manage storing of Account details. Currently, all Account"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * information will be stored locally."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public interface AccountStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Get the path for storing the Account file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The local Path that the Account file is stored in."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    Path getAccountStorageFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Easy way of getting AccountList. An AccountList stores all the Account information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Throw an exception if the file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The local AccountList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws DataConversionException if the data file cannot be converted correctly to username and password."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IOException if file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    AccountList getAccountList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Return the AccountList which is the file found in the {@code filePath}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Throw an exception if the file is not found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param filePath the path where the local file resides."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @return The local AccountList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws DataConversionException if the data file cannot be converted correctly to username and password."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IOException if the file is not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    AccountList getAccountList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Save the {@code account} into the local database. Easy way of calling."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The newly created account that is to be saved into database."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IOException if the file or directly cannot be created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void saveAccount(Account account) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Save the {@code account} into the local database specified by {@code filePath}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The newly created Account that is to be saved into database."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param filePath The Path to save the file in."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void saveAccount(Account account, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create a root (default) account such that the very first user can login"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * to the system with this root account."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The root account."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void populateRootAccountIfMissing(Account account);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    void updateAccountPassword(String username, String newPassword) throws FileNotFoundException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAccountStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * A class to access Account data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlAccountStorage implements AccountStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAccountStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Path accountListPath \u003d Paths.get(\"data\" , \"accountlist.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlAccountStorage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlAccountStorage(Path path) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountListPath \u003d path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Path getAccountStorageFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountListPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public AccountList getAccountList() throws DataConversionException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return getAccountList(accountListPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public AccountList getAccountList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            logger.info(\"Account file \" + filePath + \" not found.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlAccount \u003d XmlFileStorage.loadAccountDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return xmlAccount.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount(Account account) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        saveAccount(account, accountListPath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount(Account account, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (account.getUserName() \u003d\u003d null || account.getUserName().equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalArgumentException(Account.USERNAME_CONSTRAINT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            AccountList accountList \u003d getAccountList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            account.transformToHashedAccount();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList.getList().add(account);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            XmlFileStorage.saveAccountDataToFile(filePath, new XmlSerializableAccountList(accountList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void populateRootAccountIfMissing(Account account) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!FileUtil.isFileExists(accountListPath)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                FileUtil.createFile(accountListPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                account.transformToHashedAccount();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                accountList.addAccount(account);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                XmlFileStorage.saveAccountDataToFile(accountListPath, new XmlSerializableAccountList(accountList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                logger.info(\"Account: Unable to create file or directory: \" + accountListPath + e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                throw new AssertionError(\"File not found\" + e.getMessage(), e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updateAccountPassword(String username, String newPassword) throws FileNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            XmlUtil.updatePasswordInFile(accountListPath, username, newPassword);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (JAXBException | IllegalValueException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 116,
      "wailunlim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * JAXB-friendly version of the Client."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlAdaptedAccount {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Constructs an XmlAdaptedAccount."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlAdaptedAccount() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Constructs an {@code XmlAdaptedAccount} with the given account details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlAdaptedAccount(String username, String password, Role role) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Converts a given Client into this class for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        username \u003d source.getUserName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        role \u003d source.getRole();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Converts this jaxb-friendly adapted account object into the model\u0027s Account object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (username \u003d\u003d null || username.equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalValueException(Account.USERNAME_CONSTRAINT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (password \u003d\u003d null || password.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalValueException(Account.PASSWORD_CONSTRAINT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new IllegalValueException(Account.ROLE_CONSTRAINT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return new Account(username, password, role);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!(other instanceof XmlAdaptedAccount)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount otherAccount \u003d (XmlAdaptedAccount) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return Objects.equals(username, otherAccount.username)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherAccount.password)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \u0026\u0026 Objects.equals(role, otherAccount.role);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 80,
      "wailunlim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * JAXB-friendly version of the Client."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    private ContactType type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private List\u003cXmlAdaptedService\u003e services \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() { }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given client details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            List\u003cXmlAdaptedService\u003e services, ContactType type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (services !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            this.services \u003d new ArrayList\u003c\u003e(services);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given client details."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            ContactType type) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Converts a given Client into this class for JAXB use."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Contact source) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        services \u003d source.getServicesStream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                .map(XmlAdaptedService::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (source instanceof Client) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            type \u003d ContactType.CLIENT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        } else if (source instanceof ServiceProvider) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            type \u003d ContactType.SERVICE_PROVIDER;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            throw new RuntimeException(\"public XmlAdaptedPerson(Contact source)\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Converts this jaxb-friendly adapted client object into the model\u0027s Client object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contact toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        final List\u003cService\u003e personServices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        for (XmlAdaptedService service : services) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            personServices.add(service.toModelType());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        // Additional metadata to determine if contact is a Client or a ServiceProvider"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        final Map\u003cString, Service\u003e modelServices \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        for (Service service : personServices) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            modelServices.put(service.getName(), service);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            throw new IllegalValueException(\"Contact type must be non-null.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (type.equals(ContactType.CLIENT)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new Client(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelServices);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        if (type.equals(ContactType.SERVICE_PROVIDER)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return new ServiceProvider(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelServices);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        throw new IllegalValueException(\"Illegal contact type. It can only be a client or a service provider.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 type.equals(otherPerson.type)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u0026\u0026 services.equals(otherPerson.services);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 12,
      "liaujianjie": 27,
      "eehooi": 39,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedService.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * JAXB-friendly adapted version of the Service."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class XmlAdaptedService {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private String service;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Constructs an XmlAdaptedService."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public XmlAdaptedService() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Constructs a {@code XmlAdaptedService} with the given {@code service}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public XmlAdaptedService(String service) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Converts a given Service into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public XmlAdaptedService(Service source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        service \u003d source.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Converts this jaxb-friendly adapted service object into the model\u0027s Service object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public Service toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        String[] splitString \u003d service.split(\"\\\\$\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        String serviceName \u003d splitString[0].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        int serviceCost \u003d parseInt(splitString[1].trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!Service.isValidServiceName(serviceName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new IllegalValueException(Service.MESSAGE_SERVICE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!Service.isValidServiceCost(serviceCost)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            throw new IllegalValueException(Service.MESSAGE_SERVICE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return new Service(serviceName, serviceCost);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!(other instanceof XmlAdaptedService)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return service.equals(((XmlAdaptedService) other).service);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Saves the given account data to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static void saveAccountDataToFile(Path file, XmlSerializableAccountList account)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            XmlUtil.saveDataToFile(file, account);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns account list in the file or an empty account list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static XmlSerializableAccountList loadAccountDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 23,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * An Immutable Account that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "@XmlRootElement(name \u003d \"accountmanager\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlSerializableAccountList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Database contains duplicate account.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private List\u003cXmlAdaptedAccount\u003e accounts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlSerializableAccountList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public XmlSerializableAccountList(AccountList src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accounts.addAll(src.getList().stream().map(XmlAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public AccountList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (XmlAdaptedAccount acc : accounts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            Account account \u003d acc.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            if (accountList.hasAccount(account)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList.addAccount(account);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        if (!(other instanceof XmlSerializableAccountList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accounts.equals(((XmlSerializableAccountList) other).accounts);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        persons.addAll(src.getContactList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Contact contact \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            if (addressBook.hasContact(contact)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            addressBook.addContact(contact);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (CommandException | ParseException | LackOfPrivilegeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 2,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * The Login Window. Users have to login before they are redirected to the Main Window."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoginWindow.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Stage loginStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Label statusPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private TextField loginCli;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Text forgetPw;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Instantiates the Login Window"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param logic Logic parsed from UiManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public LoginWindow(Stage loginStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(FXML, loginStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.loginStage \u003d loginStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            loginStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            loginStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.show();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void handleLogin() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(loginCli.getText());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            loginCli.setText(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            statusPlaceholder.setText(commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            // If the login was successful, hide the login window"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (commandResult.feedbackToUser.equals(\"Successfully logged in.\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                hide();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        } catch (CommandException | ParseException | LackOfPrivilegeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            logger.info(\"Invalid command: \" + loginCli.getText());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            statusPlaceholder.setText(e.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginCli.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d loginCli.getStyleClass();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void hide() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.LogoutRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Stage loginStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel photoListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel hotelListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel cateringListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel dressListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel ringListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel transportListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ServiceListPanel invitationListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane photoListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane hotelListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane cateringListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane dressListPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane ringListPanelPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane transportListPanelPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private StackPane invitationListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        primaryStage.centerOnScreen();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates a new login stage and displays the login window"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    void displayLoginWindow() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Create new login stage for login window"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage \u003d new Stage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.initOwner(primaryStage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.initModality(Modality.WINDOW_MODAL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.centerOnScreen();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginWindow \u003d new LoginWindow(loginStage, config, prefs, logic);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        loginStage.showAndWait();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Fill up person list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // TODO Fill up each service panel"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // photoListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // photoListPanelPlaceholder.getChildren().add(photoListPanel.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // hotelListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // hotelListPanelPlaceholder.getChildren().add(hotelListPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // cateringListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // cateringListPanelPlaceholder.getChildren().add(cateringListPanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // dressListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // dressListPanelPlaceholder.getChildren().add(dressListPanel.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // ringListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // ringListPanelPlaceholder.getChildren().add(ringListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // transportListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // transportListPanelPlaceholder.getChildren().add(transportListPanel.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // invitationListPanel \u003d new ServiceListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // invitationListPanelPlaceholder.getChildren().add(invitationListPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Show display"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Show status bar"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Show command box"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Hides the inner parts of the UI"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    void hideInnerParts() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        browserPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        personListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        statusbarPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        commandBoxPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        commandBoxPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Shows the inner parts of the UI"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    void showInnerParts() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        browserPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        personListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        statusbarPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        commandBoxPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        commandBoxPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Handles logout event"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void handleLogout() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        hideInnerParts();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        displayLoginWindow();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        showInnerParts();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        logger.fine(\"Showing main window.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void handleLogoutEvent(LogoutRequestEvent event) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        handleLogout();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 109,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        id.setText(\"#\" + displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(contact.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(contact.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(contact.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(contact.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assignTags(contact);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Assigns all tags for the client with a label."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @param contact Current client to assign tags to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assignTags(Contact contact) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        contact.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            Label tagLabel \u003d createLabelforTag(tag.tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates a label for the tag. Label is set to grey if the tag indicates price."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Otherwise, it would be set to pink as default."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param tagName Name of the tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @return new Label for the tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Label createLabelforTag(String tagName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Label tagLabel \u003d new Label(tagName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        if (tagName.toLowerCase().contains(\"price\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            tagLabel.getStyleClass().add(\"grey\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            tagLabel.getStyleClass().add(\"pink\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return tagLabel;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 contact.equals(card.contact);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "eehooi": 27,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cContact\u003e personListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(contactList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(contactList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        logger.fine(\"Selection in client list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                setGraphic(new PersonCard(contact, contact.getId()).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 3,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ServiceListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "public class ServiceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final String FXML \u003d \"ServiceListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ServiceListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private ListView\u003cContact\u003e serviceListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public ServiceListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        setConnections(contactList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void setConnections(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        serviceListView.setItems(contactList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        serviceListView.setCellFactory(listView -\u003e new ServiceListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        serviceListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        logger.fine(\"Selection in client list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            serviceListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            serviceListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    class ServiceListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                setGraphic(new PersonCard(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /** Registers user as logged in. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    void commitUserLoggedInSuccessfully();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private boolean hasLoggedIn \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            if (!hasLoggedIn) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                mainWindow.displayLoginWindow();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Registers user as logged in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void commitUserLoggedInSuccessfully() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        hasLoggedIn \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/MainTheme.css\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 12,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         title\u003d\"Login\" minWidth\u003d\"600\" minHeight\u003d\"450\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            \u003cVBox prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003cStackPane prefHeight\u003d\"312.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #ffffff;\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"WHITE\" height\u003d\"112.0\" stroke\u003d\"#f7d2e0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                               strokeType\u003d\"INSIDE\" width\u003d\"587.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"WHITE\" height\u003d\"91.0\" stroke\u003d\"#f7d2e0\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                               strokeType\u003d\"INSIDE\" width\u003d\"562.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"84.0\" fitWidth\u003d\"186.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cImage url\u003d\"@../images/heart2_logo.png\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003ceffect\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cGlow /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/effect\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003cStackPane prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #f7d2e0;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cRegion prefHeight\u003d\"140.0\" prefWidth\u003d\"601.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cLabel fx:id\u003d\"statusPlaceholder\" alignment\u003d\"CENTER\" wrapText\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1000.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                   text\u003d\"Welcome! Enter a command below.\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTextField fx:id\u003d\"loginCli\" onAction\u003d\"#handleLogin\" prefHeight\u003d\"33.0\" minWidth\u003d\"100\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                       prefWidth\u003d\"468.0\" maxWidth\u003d\"600\" promptText\u003d\"Enter login command...\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                       style\u003d\"-fx-border-color: #F9F4F4; -fx-background-insets: 50;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                               -fx-border-radius: 20;\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cInsets left\u003d\"30.0\" right\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cRegion prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cSeparator opacity\u003d\"0.84\" prefHeight\u003d\"0.0\" prefWidth\u003d\"422.0\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                       style\u003d\"-fx-background-color: #F9F4F4;\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cInsets left\u003d\"30.0\" right\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cRegion prefHeight\u003d\"10.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "eehooi": 93
    }
  },
  {
    "path": "src/main/resources/view/MainTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eehooi"
        },
        "content": ".titled-pane \u003e .title {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-background-color: derive(#f7d2e0, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-alignment: top-center;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-border-color: #F7D2E0 #F7D2E0 #ffffff #F7D2E0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eehooi"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-background-color: #ffcfd4;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eehooi"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    -fx-background-color: #d0d0d0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eehooi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 17,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eehooi"
        },
        "content": "         minWidth\u003d\"1000\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003cURL value\u003d\"@MainTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4, 0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"ClientSummaryTable\" minWidth\u003d\"600\" prefWidth\u003d\"1000\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003cHBox fx:id\u003d\"serviceLists\" minWidth\u003d\"700\" prefWidth\u003d\"1420\" fillHeight\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Photographer\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"photoList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"photoListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_photographer.png\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Hotel\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"hotelList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"hotelListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_hotel.png\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Catering\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"cateringList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"cateringListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_catering.png\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Dress\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"dressList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"dressListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_dress.png\"/\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Ring\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"ringList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"ringListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_ring.png\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Transport\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"transportList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"transportListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_transport.png\"/\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003cTitledPane collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" prefWidth\u003d\"200.0\" minHeight\u003d\"1000\" text\u003d\"Invitation\"\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cVBox fx:id\u003d\"invitationList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"invitationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003cImageView opacity\u003d\"0.65\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                        \u003cImage url\u003d\"@/images/ic_invitation.png\"/\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 6,
      "eehooi": 99,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/ServiceListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003cListView fx:id\u003d\"serviceListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eehooi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eehooi": 7
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"MainTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "eehooi": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/Account/accountlist.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$OyajPtDdJmVgecdP6SQO6yrlSxQdxCuWssE5rdtHqQ8\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 17,
      "wailunlim": 1
    }
  },
  {
    "path": "src/test/data/LoginCommandTest/accountlist_withrootonly.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 8
    }
  },
  {
    "path": "src/test/data/LoginCommandTest/accountlist_withselfregisteredaccount.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 18
    }
  },
  {
    "path": "src/test/data/RegisterAccountCommandTest/accountlist_withrootonly.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$H27ntJ9fyFqCHnDHRErJYU-8qPP2SExhvwORf17oV78\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003eusername123\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$HCo4_21YCgh00m6Xdpfew8Gw_C49xNOsC5BI6xStaR0\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 11,
      "wailunlim": 2
    }
  },
  {
    "path": "src/test/data/RegisterAccountCommandTest/invalidaccountlist_wrongstructure.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Invalid account with wrong structure. No username in this case. --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 13
    }
  },
  {
    "path": "src/test/data/RegisterAccountCommandTest/notevenxmlstructure.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "This file is not even of xml structure."
      }
    ],
    "authorContributionMap": {
      "NightYeti": 1
    }
  },
  {
    "path": "src/test/data/SystemTest/rootaccount_accountlist.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 8
    }
  },
  {
    "path": "src/test/data/XmlAccountStorageTest/InvalidAndValidUsernameAccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c!-- This account is valid --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c!-- This account is invalid as username is empty --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccounts\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003cusername\u003e\u003c/username\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accounts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 15
    }
  },
  {
    "path": "src/test/data/XmlAccountStorageTest/InvalidUsernameAccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- This account is invalid as username is empty --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003e\u003c/username\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 9
    }
  },
  {
    "path": "src/test/data/XmlAccountStorageTest/NotXmlFormatAccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 1
    }
  },
  {
    "path": "src/test/data/XmlAccountStorageTest/accountlist.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$UDztvCtgsWrW-j03sWWTOI9-7Agmhuq34b6QA5r0gFk\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$-hopyVy1ZRAeWbUwGMCN27RgAxDIW7l1ZWqZTysWQE0\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$aK_G79PEEVENUG6KoX1B61XWKgugilDAx8VDhp72c1w\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 15,
      "wailunlim": 3
    }
  },
  {
    "path": "src/test/data/XmlAccountStorageTest/accountlistToChangePassword.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$S6CwrfsvbK1qQLzdW-uSi2xKsqRm-2nMXccSkC16sDE\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 17,
      "wailunlim": 1
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c!-- Valid Client --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c!-- Client with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 15
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c!-- Client with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableAccountListTest/duplicateAccount_AccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Duplicated account with same username --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 19
    }
  },
  {
    "path": "src/test/data/XmlSerializableAccountListTest/invalidAccount_AccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Invalid account with empty username --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003e\u003c/username\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "   \u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 14
    }
  },
  {
    "path": "src/test/data/XmlSerializableAccountListTest/typicalAccount_AccountList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 18
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c!-- Client with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "liaujianjie": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c!-- Client with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Client values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eDominic Dong\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e94311253\u003c/phone\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003edominicdong@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e123, Jurong East Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eNg Ee Hooi\u003c/name\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e98762432\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003eeehooid@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e313, Clementi Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eGan Chin Yao\u003c/name\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e18762432\u003c/phone\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003egan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e313, Pioneer Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eLiau Jian Jie\u003c/name\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e93762432\u003c/phone\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003ejj@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e444, River Valley Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eLim Wai Lun\u003c/name\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e98761432\u003c/phone\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003ewailunoob@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e313, Red Hill Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eDong SiJi\u003c/name\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e91232432\u003c/phone\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003edong.siji@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e313, Buona Vista Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cname\u003eChino\u003c/name\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cphone\u003e98711132\u003c/phone\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cemail\u003echinoyaobi@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003caddress\u003e313, Pasir Ris Ave 5, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003ctype\u003eSERVICE_PROVIDER\u003c/type\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 52,
      "liaujianjie": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/accountlist.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        \u003cpassword\u003e$31$16$PZ7ft4-bWLh5eBOUoWpvqlH0tDJM5z7hlcvO4RWPxAY\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 17,
      "wailunlim": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/accountlistEmptyPassword.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Illegal account: empty password --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e\u003c/password\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NightYeti": 20
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/accountlistEmptyRole.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Illegal account: no role --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003erootUser\u003c/username\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 18
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/accountlistEmptyUsername.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003caccountmanager\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c!-- Illegal account: empty username --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003e\u003c/username\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$nboNXKlrmU8_FEMLMWJ7g08DE2Pj0smRiR6rWxKjMqY\u003c/password\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003esimun\u003c/username\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eSUPER_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cusername\u003ewhiterose\u003c/username\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003cpassword\u003e$31$16$vWaAyBBNfZny3HMcqw3Sa-v36U4cgT8SeatiW-PvkSs\u003c/password\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        \u003crole\u003eREAD_ONLY_USER\u003c/role\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "\u003c/accountmanager\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NightYeti": 20
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c!-- Client with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "liaujianjie": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c!-- Client with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "liaujianjie": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        \u003ctype isPrivate\u003d\"false\"\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 9,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    \u003ctype\u003eCLIENT\u003c/type\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "liaujianjie": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Provides a handle to a client card in the client list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns true if this handle contains {@code client}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Contact contact) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(contact.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(contact.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(contact.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(contact.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(contact.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 85
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cContact\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cContact\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cContact\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e selectedContactList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedContactList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new AssertionError(\"Client list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedContactList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Navigates the listview to display {@code client}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Contact contact) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(contact)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            throw new IllegalArgumentException(\"Client does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(contact);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the client card handle of a client associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Contact getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // To test the app, we need the user to log in."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        model.commitUserLoggedInSuccessfully(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        ui.commitUserLoggedInSuccessfully();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredContactList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 9,
      "wailunlim": 1,
      "eehooi": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : HeartÂ²\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.compareListOfContacts;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.DOMINIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.HOON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.JON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.testutil.TypicalContacts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void compareListOfContactsTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e list \u003d TypicalContacts.getTypicalContacts();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cContact\u003e typicalContactList \u003d TypicalContacts.getTypicalContacts();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Remove a contact"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.remove(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertType(compareListOfContacts(list, typicalContactList), ContactType.CLIENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Remove a serviceprovider"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.remove(DOMINIC);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertType(compareListOfContacts(list, typicalContactList), ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Add a contact"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.add(DOMINIC);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.add(HOON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertType(compareListOfContacts(list, typicalContactList), ContactType.CLIENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Add a serviceprovider"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.remove(HOON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        list.add(JON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertType(compareListOfContacts(list, typicalContactList), ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private void assertType(ContactType type, ContactType expectedType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(type.equals(expectedType));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 38,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    //---------------- Tests for containsIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Invalid equivalence partitions for substring: null, empty"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * The three test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void containsIgnoreCase_nullSubstring_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertContainsIgnoreCaseExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void containsIgnoreCase_emptySubstring_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertContainsIgnoreCaseExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"Substring parameter cannot be empty\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void containsIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertContainsIgnoreCaseExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private void assertContainsIgnoreCaseExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                                                         String substring, Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        StringUtil.containsIgnoreCase(sentence, substring);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *   - order of matching is reversed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void containsIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"AAA bBb ccc  bbb\", \"Bbb ccc\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Order of matching is reversed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"AAA bBb ccc  bbb\", \"bbb AAA\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dongsiji": 84,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.PasswordUtil.assertPasswordCorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.storage.XmlAdaptedService;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlSerializableAccountList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final List\u003cXmlAdaptedService\u003e VALID_SERVICES \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            Collections.singletonList(new XmlAdaptedService(\"photographer $200\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static final ContactType VALID_CONTACT_TYPE \u003d ContactType.CLIENT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path VALID_ACCOUNTFILE \u003d TEST_DATA_FOLDER.resolve(\"accountlist.xml\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_ACCOUNTFILE \u003d TEST_DATA_FOLDER.resolve(\"randomInvalidPath.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path EMPTYUSERNAME_ACCOUNTFILE \u003d TEST_DATA_FOLDER.resolve(\"accountlistEmptyUsername.xml\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path EMPTYPASSWORD_ACCOUNTFILE \u003d TEST_DATA_FOLDER.resolve(\"accountlistEmptyPassword.xml\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path EMPTYROLE_ACCOUNTFILE \u003d TEST_DATA_FOLDER.resolve(\"accountlistEmptyRole.xml\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String USERNAME \u003d \"whiterose\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String OLD_PASSWORD \u003d \"@myPassword\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String OLD_HASHEDPASSWORD \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            PasswordAuthentication.getHashedPasswordFromPlainText(OLD_PASSWORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String NEW_PASSWORD \u003d \"someN3wP@ssw0rd\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String NEW_HASHEDPASSWORD \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            PasswordAuthentication.getHashedPasswordFromPlainText(NEW_PASSWORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(9, dataFromFile.getContactList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                builder.withPerson(new ClientBuilder().build()).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(null, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_nullUsername_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(VALID_ACCOUNTFILE, null, NEW_PASSWORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_nullPassword_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(VALID_ACCOUNTFILE, USERNAME, null);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_invalidFile_throwsFileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(INVALID_ACCOUNTFILE, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_emptyFile_throwsDataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(EMPTY_FILE, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_emptyUsername_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(EMPTYUSERNAME_ACCOUNTFILE, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_emptyPassword_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(EMPTYPASSWORD_ACCOUNTFILE, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_emptyRole_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(EMPTYROLE_ACCOUNTFILE, USERNAME, NEW_PASSWORD);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePasswordInFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        int accountIndex \u003d 2;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList oldXmlSerializableAccountList \u003d XmlUtil"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                .getDataFromFile(VALID_ACCOUNTFILE, XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // this is the old password before change"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String oldPassword \u003d oldXmlSerializableAccountList.toModelType().getList().get(accountIndex).getPassword();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertPasswordCorrect(OLD_PASSWORD, oldPassword);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // change password to NEW_PASSWORD"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(VALID_ACCOUNTFILE, USERNAME, NEW_HASHEDPASSWORD);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // this is the new password after changing password"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList newXmlSerializableAccountList \u003d XmlUtil"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                .getDataFromFile(VALID_ACCOUNTFILE, XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String newPassword \u003d newXmlSerializableAccountList.toModelType().getList().get(accountIndex).getPassword();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertPasswordCorrect(NEW_PASSWORD, newPassword);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // change new password back to old password"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account newAccount \u003d new Account(TypicalAccount.ROSE.getUserName(), newPassword, TypicalAccount.ROSE.getRole());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlUtil.updatePasswordInFile(VALID_ACCOUNTFILE, newAccount.getUserName(), OLD_HASHEDPASSWORD);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList \u003d XmlUtil"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                .getDataFromFile(VALID_ACCOUNTFILE, XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String newPassword2 \u003d xmlSerializableAccountList.toModelType().getList().get(accountIndex).getPassword();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertPasswordCorrect(OLD_PASSWORD, newPassword2);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // TODO: change test cases to fit context"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 98,
      "wailunlim": 6,
      "liaujianjie": 3,
      "eehooi": 5,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_ALL_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //TODO: update deleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String deleteCommand \u003d \"client#9 delete\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String findCommand \u003d \"client \" + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertCommandSuccess(findCommand, MESSAGE_LIST_ALL_PERSON, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertHistoryCorrect(findCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (CommandException | ParseException | LackOfPrivilegeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (ParseException | CommandException | LackOfPrivilegeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 5,
      "wailunlim": 2,
      "dongsiji": 4,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ServiceProviderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.addContact(validContact);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validContact), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validContact), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_newServiceProvider_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ServiceProviderBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.addContact(validContact);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(new AddCommand(validContact), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validContact), expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInList \u003d model.getAddressBook().getContactList().get(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(new AddCommand(contactInList), model, commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateServiceProvider_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInList \u003d model.getAddressBook().getContactList().get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(new AddCommand(contactInList), model, commandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Tries to add a duplicate client while only the service providers are shown. In heartsquare, a client cannot be"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * a serviceprovider and vice versa, so this should still throw a command exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateServiceProviderWhileClientListInFocus_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInList \u003d model.getAddressBook().getContactList().get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(contactInList), model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 3,
      "wailunlim": 44,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ServiceProviderBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void constructor_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelStubAcceptingContactAdded modelStub \u003d new ModelStubAcceptingContactAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validContact).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validContact), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(Arrays.asList(validContact), modelStub.contactsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_serviceProviderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelStubAcceptingContactAdded modelStub \u003d new ModelStubAcceptingContactAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ServiceProviderBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validContact).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validContact), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(Arrays.asList(validContact), modelStub.contactsAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validContact);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithContact(validContact);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateServiceProvider_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact validContact \u003d new ServiceProviderBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validContact);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithContact(validContact);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public void updateContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public void commitUserLoggedInSuccessfully(Account account) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public Account getUserAccount() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public boolean isUserLoggedIn() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public void commitUserLoggedOutSuccessfully() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public void commiteUserChangedPasswordSuccessfully(String newPassword) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * A Model stub that contains a single contact."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private class ModelStubWithContact extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Contact contact;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelStubWithContact(Contact contact) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            this.contact \u003d contact;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.contact.isSameContact(contact);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public Account getUserAccount() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return TypicalAccount.ROOTACCOUNT;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private class ModelStubAcceptingContactAdded extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final ArrayList\u003cContact\u003e contactsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            return contactsAdded.stream().anyMatch(contact::isSameContact);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            contactsAdded.add(contact);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        public Account getUserAccount() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            return TypicalAccount.ROOTACCOUNT;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 36,
      "wailunlim": 51,
      "-": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model model \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 5,
      "wailunlim": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final UpdateCommand.EditContactDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final UpdateCommand.EditContactDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DESC_AMY \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DESC_BOB \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (CommandException | LackOfPrivilegeException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * - the address book and the filtered client list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cContact\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (CommandException | LackOfPrivilegeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contact \u003d model.getFilteredContactList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        model.updateFilteredContactList(new ContactContainsKeywordsPredicate(contact));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(1, model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Deletes the first client in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.deleteContact(firstContact);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 3,
      "wailunlim": 15,
      "dongsiji": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_validIndexClientList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_validIndexServiceProviderList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_invalidIndexClientList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.CLIENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_invalidIndexServiceProviderList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * deleting a person from heartsquare shows the client/serviceprovider list depending on client#ID delete or"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * serviceprovider#ID delete. Heartsquare\u0027s deletion of contacts are not relative to the list shown on the UI but"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * instead specifically client/serviceprovider ID"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_clientShownInClientFilteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * deleting a person from heartsquare shows the client/serviceprovider list depending on client#ID delete or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * serviceprovider#ID delete. Heartsquare\u0027s deletion of contacts are not relative to the list shown on the UI but"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * instead specifically client/serviceprovider ID"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_serviceProviderShownInServiceProviderFilteredList_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_deleteClientNotShownInClientFilteredList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.CLIENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_deleteServiceProviderNotShownInServiceProviderFilteredList_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_deleteServiceProviderWhileShownClientFilteredList_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(!model.getFilteredContactList().contains(contactToDelete));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Index.fromOneBased(contactToDelete.getId()),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_deleteClientWhileShownServiceProviderFilteredList_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(!model.getFilteredContactList().contains(contactToDelete));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Index.fromOneBased(contactToDelete.getId()),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                ContactType.CLIENT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredClientList_success() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // delete -\u003e first client deleted"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered client list to show all persons"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // redo -\u003e same first client deleted again"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredServiceProviderList_success() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // delete -\u003e first client deleted"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered client list to show all persons"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // redo -\u003e same first client deleted again"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void executeUndoRedo_invalidIndexClientList_failure() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.CLIENT);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void executeUndoRedo_invalidIndexServiceProviderList_failure() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 1. Deletes a {@code Client} from a filtered list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted client in the"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the client object regardless of indexing."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // delete -\u003e deletes second client in unfiltered client list / first client in filtered client list"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered client list to show all persons"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertNotEquals(contactToDelete, model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // redo -\u003e deletes same second client in unfiltered client list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(p -\u003e false);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(model.getFilteredContactList().isEmpty());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 7,
      "wailunlim": 206,
      "dongsiji": 1,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new UpdateCommand.EditContactDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPasswordCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlSerializableAccountList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class EditPasswordCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            \"Account\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path VALID_ACCOUNTLIST \u003d TEST_DATA_FOLDER.resolve(\"accountlist.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_FILEPATH \u003d TEST_DATA_FOLDER.resolve(\"someinvalidpath.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String OLD_PASSWORD \u003d \"@myPassword\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String NEW_PASSWORD \u003d \"SomeNewP@Ssw0rd\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    // set up the model to contain the account with index 2 in the account list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                XmlUtil.getDataFromFile(VALID_ACCOUNTLIST, XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account \u003d xmlSerializableAccountList.toModelType().getList().get(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        model \u003d new ModelManager(account);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        expectedModel \u003d new ModelManager(account);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor_nullOldPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new EditPasswordCommand(null, NEW_PASSWORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor_nullNewPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new EditPasswordCommand(OLD_PASSWORD, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_wrongPassword() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String userTypedWrongPassword \u003d \"wrongPasswordTypedByUser\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand \u003d new EditPasswordCommand(userTypedWrongPassword,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                NEW_PASSWORD, VALID_ACCOUNTLIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(editPasswordCommand, model, commandHistory,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.MESSAGE_FAILURE_PASSWORDWRONG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_samePassword() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand \u003d new EditPasswordCommand(OLD_PASSWORD,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                OLD_PASSWORD, VALID_ACCOUNTLIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(editPasswordCommand, model, commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.MESSAGE_FAILURE_SAMEPASSWORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_fileNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand \u003d new EditPasswordCommand(OLD_PASSWORD,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                NEW_PASSWORD, INVALID_FILEPATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(editPasswordCommand, model, commandHistory,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.MESSAGE_FAILURE_FILENOTFOUND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_changeNewPassword_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // change old password to new password"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand \u003d new EditPasswordCommand(OLD_PASSWORD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                NEW_PASSWORD, VALID_ACCOUNTLIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(editPasswordCommand, model, commandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // change back new password to old password"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand2 \u003d new EditPasswordCommand(NEW_PASSWORD,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                OLD_PASSWORD, VALID_ACCOUNTLIST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(editPasswordCommand2, model, commandHistory,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                EditPasswordCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_ALL_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.DANIEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ELLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.GEORGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactInformation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dongsiji"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ListCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new ContactContainsKeywordsPredicate(new ClientBuilder().withName(\"first\").build());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new ContactContainsKeywordsPredicate(new ClientBuilder().withName(\"second\").build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ListCommand findFirstCommand \u003d new ListCommand(firstPredicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ListCommand findSecondCommand \u003d new ListCommand(secondPredicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ListCommand findFirstCommandCopy \u003d new ListCommand(firstPredicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void execute_zeroKeywords_everyPersonFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String expectedMessage \u003d MESSAGE_LIST_ALL_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ListCommand command \u003d new ListCommand(predicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate.and(ContactType.CLIENT.getFilter()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredContactList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void execute_multipleKeywords_zeroOrOnePersonFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: List with 3 person\u0027s name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ListCommand command \u003d new ListCommand(predicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredContactList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: List with 1 person\u0027s name -\u003e 1 persons found */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d preparePredicate(\"Benson Meier\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d new ListCommand(predicate, ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), model.getFilteredContactList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private ContactContainsKeywordsPredicate preparePredicate(String userName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(userName), Optional.empty(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private ContactContainsKeywordsPredicate preparePredicate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        return new ContactContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 22,
      "dongsiji": 31,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            \"LoginCommandTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path ACCOUNTLIST_WITHROOT \u003d TEST_DATA_FOLDER.resolve(\"accountlist_withrootonly.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path ACCOUNTLIST_WITSELFREGISTEREDACCOUNT \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            .resolve(\"accountlist_withselfregisteredaccount.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String USERNAME \u003d \"rootUser\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String PASSWORD \u003d \"rootPassword\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new LoginCommand(null, PASSWORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new LoginCommand(USERNAME, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor2_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new LoginCommand(null, PASSWORD, ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void constructor2_nullPasswrod_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new LoginCommand(USERNAME, null, ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_rootAccountSucceed() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand(USERNAME, PASSWORD, ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(loginCommand, model, commandHistory, LoginCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_userRegisteredAccountSucceed() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account simun \u003d new Account(\"simun\", \"@myPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginCommandSimun \u003d new LoginCommand(simun.getUserName(), simun.getPassword(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ACCOUNTLIST_WITSELFREGISTEREDACCOUNT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(loginCommandSimun, model, commandHistory, LoginCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account rose \u003d new Account(\"whiterose\", \"@myPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginCommandRose \u003d new LoginCommand(rose.getUserName(), rose.getPassword(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ACCOUNTLIST_WITSELFREGISTEREDACCOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(loginCommandRose, model, commandHistory, LoginCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_usernameOrPasswordWrong() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String usernameWrong \u003d \"wrongUserName\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginWrongUsername \u003d new LoginCommand(usernameWrong, PASSWORD, ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(loginWrongUsername, model, commandHistory, LoginCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String passwordWrong \u003d \"wrongPassword\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginWrongPassword \u003d new LoginCommand(USERNAME, passwordWrong, ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(loginWrongPassword, model, commandHistory, LoginCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LogoutCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LogoutCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(model.isUserLoggedIn());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LogoutCommand logoutCommand \u003d new LogoutCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(logoutCommand, model, commandHistory, LogoutCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(model.isUserLoggedIn());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "dongsiji": 2,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterAccountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.exceptions.LackOfPrivilegeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.storage.XmlAccountStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class RegisterAccountCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"RegisterAccountCommandTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path ACCOUNTLIST_WITHROOT \u003d TEST_DATA_FOLDER.resolve(\"accountlist_withrootonly.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_ACCOUNTLIST_WRONGXMLSTUCTURE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidaccountlist_wrongstructure.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_ACCOUNTLIST_NOTEVENXMLSTRUCTURE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"notevenxmlstructure.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Account ACCOUNT_TO_SAVE \u003d new Account(\"username123\", \"password456\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_registerNewAccount_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        createDefaultAccountListXmlIfMissing();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand registerAccountCommand \u003d new RegisterAccountCommand(ACCOUNT_TO_SAVE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandSuccess(registerAccountCommand, model, commandHistory, RegisterAccountCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test(expected \u003d LackOfPrivilegeException.class)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_noPrivilege_throwsLackOfPrivilegeException() throws LackOfPrivilegeException, CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model model \u003d new ModelManager(TypicalAccount.ROSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand registerAccountCommand \u003d new RegisterAccountCommand(ACCOUNT_TO_SAVE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        registerAccountCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_registerWithAnExistingUsername_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        createDefaultAccountListXmlIfMissing();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d RegisterAccountCommand.MESSAGE_FAILURE_DUPLICATE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand registerAccountCommand \u003d new RegisterAccountCommand(TypicalAccount.ROOTACCOUNT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(registerAccountCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_cannotFindFileToSaveTo_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Path invalidPath \u003d Paths.get(\"src\", \"test\", \"data\", \"invalidFile\", \"invalidfile.xml\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand invalidFilePathCommand \u003d new RegisterAccountCommand(ACCOUNT_TO_SAVE, invalidPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d RegisterAccountCommand.MESSAGE_FAILURE_FILENOTFOUND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(invalidFilePathCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_filePathWithInvalidXmlStructure_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand invalidAccountListCommand \u003d new RegisterAccountCommand(ACCOUNT_TO_SAVE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                INVALID_ACCOUNTLIST_WRONGXMLSTUCTURE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d RegisterAccountCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(invalidAccountListCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void execute_filePathNotEvenXmlStructure_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand invalidAccountListCommand \u003d new RegisterAccountCommand(ACCOUNT_TO_SAVE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                INVALID_ACCOUNTLIST_NOTEVENXMLSTRUCTURE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d RegisterAccountCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertCommandFailure(invalidAccountListCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Create a AccountList xml file with root account populated to the path {@code ACCOUNTLIST_WITHROOT}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private void createDefaultAccountListXmlIfMissing() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            Files.deleteIfExists(ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(FileUtil.isFileExists(ACCOUNTLIST_WITHROOT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(ACCOUNTLIST_WITHROOT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountStorage.populateRootAccountIfMissing(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(FileUtil.isFileExists(ACCOUNTLIST_WITHROOT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 5,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "dongsiji": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ServiceProviderBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * UpdateCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_allFieldsSpecifiedClientList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_allFieldsSpecifiedServiceProviderList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ServiceProviderBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_someFieldsSpecifiedClientList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact lastContact \u003d model.getFilteredContactList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ClientBuilder personInList \u003d new ClientBuilder(lastContact);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Contact editedContact \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastPerson, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(lastContact, editedContact);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_someFieldsSpecifiedServiceProviderList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact lastContact \u003d model.getFilteredContactList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        ServiceProviderBuilder personInList \u003d new ServiceProviderBuilder(lastContact);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastPerson, descriptor, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(lastContact, editedContact);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_noFieldSpecifiedClientList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, new EditContactDescriptor(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                ContactType.CLIENT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_noFieldSpecifiedServiceProviderList_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, new EditContactDescriptor(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_clientList_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInFilteredList \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder(contactInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build(), ContactType.CLIENT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_serviceProviderList_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInFilteredList \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ServiceProviderBuilder(contactInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build(), ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateContactClientList_failure() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(firstContact).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_PERSON, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateContactServiceProviderList_failure() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(firstContact).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_PERSON, descriptor, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Create a client that is a duplicate of a serviceprovider --\u003e command failure"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateClientAndServiceProviderList_failure() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(firstContact).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_PERSON, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // edit client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInList \u003d model.getAddressBook().getContactList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // TODO: how update works now is to filter the list by client/serviceprovider, then update. To change implmtion."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new EditContactDescriptorBuilder(contactInList).build(), ContactType.CLIENT);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_duplicateServiceProviderFilteredList_failure() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // edit client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactInList \u003d model.getAddressBook().getContactList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new EditContactDescriptorBuilder(contactInList).build(), ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_invalidClientIndexClientList_failure() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_invalidServiceProviderIndexServiceProviderList_failure() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.SERVICE_PROVIDER.getFilter());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor, ContactType.SERVICE_PROVIDER);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void execute_clientOutsideFilteredList_success() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactOutsideFilteredList \u003d model.getFilteredContactList().get(outOfBoundIndex.getZeroBased());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder(contactOutsideFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build(), ContactType.CLIENT);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(expectedModel.getFilteredContactList().get(outOfBoundIndex.getZeroBased()),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                editedContact);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToEdit \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // edit -\u003e first client edited"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered client list to show all persons"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // redo -\u003e same first client edited again"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 1. Edits a {@code Client} from a filtered list."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited client in the"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the client object regardless of indexing."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToEdit \u003d model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // edit -\u003e edits second client in unfiltered client list / first client in filtered client list"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered client list to show all persons"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertNotEquals(model.getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased()), contactToEdit);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // redo -\u003e edits same second client in unfiltered client list"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, DESC_AMY, ContactType.CLIENT);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor copyDescriptor \u003d new UpdateCommand.EditContactDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_PERSON, copyDescriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_PERSON, DESC_AMY, ContactType.CLIENT)));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_PERSON, DESC_BOB, ContactType.CLIENT)));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 14,
      "wailunlim": 250,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddClientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class AddClientCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser(ContactType.CLIENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact expectedContact \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact expectedContactMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedContactMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact expectedContact \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedContact));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 13,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.AddServiceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactInformation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.testutil.ServiceProviderBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String BLANK_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(contact));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(contact), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_registeraccount() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommand(RegisterAccountCommand.COMMAND_WORD + BLANK_SPACE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + RegisterAccountCommand.PREFIX_USERNNAME + \"user\" + BLANK_SPACE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + RegisterAccountCommand.PREFIX_PASSWORD + \"pass\" + BLANK_SPACE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + RegisterAccountCommand.PREFIX_ROLE + \"superuser\") instanceof RegisterAccountCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_logoutCommand() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_WORD) instanceof LogoutCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_editPasswordCommand() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommand(EditPasswordCommand.COMMAND_WORD + BLANK_SPACE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + EditPasswordCommand.PREFIX_OLDPASSWORD + \"k2\" + BLANK_SPACE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + EditPasswordCommand.PREFIX_NEWPASSWORD + \"new\" + BLANK_SPACE) instanceof EditPasswordCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_exitCommand_afterLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_exitCommand_beforeLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommandBeforeLoggedIn(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_loginCommand() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommandBeforeLoggedIn(LoginCommand.COMMAND_WORD + BLANK_SPACE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + LoginCommand.PREFIX_USERNNAME + \"rootUser\" + BLANK_SPACE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + LoginCommand.PREFIX_PASSWORD + \"rootPassword\" + BLANK_SPACE) instanceof LoginCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parseCommand_helpCommand_beforeLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(parser.parseCommandBeforeLoggedIn(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //TODO: update input"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(contact).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(\"client#\" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + \" \" + UpdateCommand.COMMAND_WORD + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, descriptor, ContactType.CLIENT), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // No arguments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate predicate \u003d new ContactContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ListCommand command \u003d (ListCommand) parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \"client \" + ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(new ListCommand(predicate, ContactType.CLIENT.getFilter()), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One Argument"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"Alice Bob\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d (ListCommand) parser.parseCommand("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                \"client \" + ListCommand.COMMAND_WORD + \" n/Alice Bob\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(new ListCommand(predicate, ContactType.CLIENT.getFilter()), command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void parseCommand_client_addservice() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Contact contact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Service service \u003d new Service(\"photographer\", 1000);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        AddServiceCommand command \u003d (AddServiceCommand)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                parser.parseCommand(PersonUtil.getClientAddServiceCommand(contact, service, INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        assertEquals(new AddServiceCommand(INDEX_FIRST_PERSON, service, ContactType.CLIENT), command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void parseCommand_serviceprovider_addservice() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Contact contact \u003d new ServiceProviderBuilder().build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        Service service \u003d new Service(\"photographer\", 1000);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        AddServiceCommand command \u003d (AddServiceCommand)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                parser.parseCommand(PersonUtil.getServiceProviderAddServiceCommand("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        contact, service, INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        assertEquals(new AddServiceCommand(INDEX_FIRST_PERSON, service, ContactType.SERVICE_PROVIDER), command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 48,
      "wailunlim": 15,
      "dongsiji": 16,
      "eehooi": 22,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser(ContactType.CLIENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON, ContactType.CLIENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditPasswordCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class EditPasswordCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String BLANK_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String OLD_PASSWORD \u003d \"@myPassword\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String NEW_PASSWORD \u003d \"s0meNewPassw0rd\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private EditPasswordCommandParser parser \u003d new EditPasswordCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPasswordCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing old password prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + EditPasswordCommand.PREFIX_NEWPASSWORD.getPrefix()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + NEW_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing new password prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + EditPasswordCommand.PREFIX_OLDPASSWORD.getPrefix()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + OLD_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        EditPasswordCommand editPasswordCommand \u003d new EditPasswordCommand(OLD_PASSWORD, NEW_PASSWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseSuccess(parser, BLANK_SPACE + EditPasswordCommand.PREFIX_OLDPASSWORD.getPrefix()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + OLD_PASSWORD + BLANK_SPACE + EditPasswordCommand.PREFIX_NEWPASSWORD.getPrefix()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + NEW_PASSWORD, editPasswordCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactInformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser(ContactType.CLIENT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void parse_emptyArg_returnsListCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(new ContactContainsKeywordsPredicate(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedListCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // multiple whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertParseSuccess(parser, \"     \", expectedListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // new lines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertParseSuccess(parser, \" \\n  \\n  \", expectedListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void parse_validArgs_returnsListCommand() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                new ListCommand(new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"Alice Bob\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                        Optional.empty(), Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e())),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob\", expectedListCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "dongsiji": 22,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String BLANK_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Account rootAccount \u003d TypicalAccount.ROOTACCOUNT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand(rootAccount.getUserName(), rootAccount.getPassword());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseSuccess(parser, BLANK_SPACE + LoginCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getUserName() + BLANK_SPACE + LoginCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getPassword(), loginCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + LoginCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + rootAccount.getPassword(), expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + LoginCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + rootAccount.getUserName(), expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 4,
      "-": 203
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterAccountCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class RegisterAccountCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String BLANK_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Account rootAccount \u003d TypicalAccount.ROOTACCOUNT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private RegisterAccountCommandParser parser \u003d new RegisterAccountCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_allFieldsPresent_successSuperUser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand registerAccountCommand \u003d new RegisterAccountCommand(new Account(\"username\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \"password\", Role.SUPER_USER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseSuccess(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + \"username\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + \"password\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_ROLE + \"superuser\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                registerAccountCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_allFieldsPresent_successReadOnlyUser() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        RegisterAccountCommand registerAccountCommand \u003d new RegisterAccountCommand(new Account(\"username\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                \"password\", Role.READ_ONLY_USER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseSuccess(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + \"username\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + \"password\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_ROLE + \"readonlyuser\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                registerAccountCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_invalidWrong_parseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d RegisterAccountCommand.MESSAGE_INVALIDROLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + \"username\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                        + \"password\" + BLANK_SPACE + RegisterAccountCommand.PREFIX_ROLE + \"invalidRole\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_PASSWORD.getPrefix()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getPassword() + BLANK_SPACE + RegisterAccountCommand.PREFIX_ROLE + \"superuser\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getUserName() + BLANK_SPACE + RegisterAccountCommand.PREFIX_ROLE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + \"superuser\", expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertParseFailure(parser, BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getUserName() + BLANK_SPACE + RegisterAccountCommand.PREFIX_USERNNAME.getPrefix()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                + rootAccount.getUserName(), expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser(ContactType.CLIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Client} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor, ContactType.CLIENT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 37,
      "-": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/security/PasswordAuthenticationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.logic.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class PasswordAuthenticationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String plainTextPassword \u003d \"plaintext\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hashIsWorking_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String hashed \u003d passwordAuthentication.hash(plainTextPassword.toCharArray());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // hashed and plaintext are different"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(hashed.equals(plainTextPassword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // plaintext is the correct password for the hash"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(passwordAuthentication.authenticate(plainTextPassword.toCharArray(), hashed));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String wrongPassword \u003d \"wrongPassword\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // wrongPassword is not the correct password for the hash"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(passwordAuthentication.authenticate(wrongPassword.toCharArray(), hashed));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void staticMethodWorking() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String hashed \u003d PasswordAuthentication.getHashedPasswordFromPlainText(plainTextPassword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(passwordAuthentication.authenticate(plainTextPassword.toCharArray(), hashed));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void iteration_tooHigh_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new PasswordAuthentication(31);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void iteration_negative_fail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        new PasswordAuthentication(-1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getContactList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void resetData_withDuplicateContacts_throwsDuplicateContactsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e newContacts \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newContacts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(DuplicateContactException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addressBook.hasContact(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(addressBook.hasContact(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addressBook.addContact(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(addressBook.hasContact(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addressBook.addContact(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(addressBook.hasContact(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addressBook.getContactList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cContact\u003e contacts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            this.contacts.setAll(contacts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return contacts;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 17,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.contact.ContactContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        modelManager.hasContact(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        modelManager.addContact(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        modelManager.getFilteredContactList().remove(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        modelManager.updateFilteredContactList(new ContactContainsKeywordsPredicate(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        modelManager.updateFilteredContactList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 8,
      "dongsiji": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 3,
      "-": 295
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/AccountListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class AccountListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.getList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.SIMUN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        List\u003cAccount\u003e list \u003d accountList.getList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.get(0).equals(TypicalAccount.ROOTACCOUNT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.get(1).equals(TypicalAccount.SIMUN));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void indexOfAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.indexOfAccount(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void indexOfAccount_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.SIMUN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROSE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.ROOTACCOUNT) \u003d\u003d 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.SIMUN) \u003d\u003d 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.ROSE) \u003d\u003d 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.LUNA) \u003d\u003d -1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void indexOfAccount_emptyAccountList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.ROOTACCOUNT) \u003d\u003d -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.SIMUN) \u003d\u003d -1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.indexOfAccount(TypicalAccount.ROSE) \u003d\u003d -1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.hasAccount(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasAccount_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasAccount(TypicalAccount.ROOTACCOUNT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(accountList.hasAccount(TypicalAccount.SIMUN));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(TypicalAccount.SIMUN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasAccount(TypicalAccount.SIMUN));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasUserName_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.hasAccount(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasUserName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account \u003d new Account(\"Simun\", \"P@ssw0rd\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasUserName(\"Simun\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasUserName(\"simun\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasUserName(\"SiMuN\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(accountList.hasUserName(\"Simun \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(accountList.hasUserName(\" simun\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(accountList.hasUserName(\"Tham\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(new Account(\"Tham\", \"P@ssw0rd\", Role.SUPER_USER));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.hasUserName(\"Tham\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(accountList.hasUserName(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updatePassword_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String oldPassword \u003d \"oldPassword123\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String newPassword \u003d \"newP@ssw0rd\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String newPassword2 \u003d \"newP@ssw0rdpkjgaok\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account \u003d new Account(\"Simun\", oldPassword, Role.SUPER_USER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        List\u003cAccount\u003e list \u003d accountList.getList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.get(0).getPassword().equals(oldPassword));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.updatePassword(account.getUserName(), newPassword);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(list.get(0).getPassword().equals(oldPassword));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.get(0).getPassword().equals(newPassword));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.updatePassword(account.getUserName(), newPassword2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(list.get(0).getPassword().equals(newPassword));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(list.get(0).getPassword().equals(newPassword2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList.addAccount(new Account(\"user\", \"password\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList2 \u003d new AccountList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountList2.addAccount(new Account(\"user\", \"password\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountList.equals(accountList2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/AccountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasWritePrivilege() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account hasWritePrivilegeAccount \u003d new Account(\"root\", \"p@ssw0rd\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelHasWritePrivilege \u003d new ModelManager(hasWritePrivilegeAccount);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(modelHasWritePrivilege.getUserAccount().hasWritePrivilege());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account noWritePrivilegeAccount \u003d new Account(\"rose\", \"p@ssw0rd\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelNoWritePrivilege \u003d new ModelManager(noWritePrivilegeAccount);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(modelNoWritePrivilege.getUserAccount().hasWritePrivilege());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasDeletePrivilege() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account hasDeletePrivilegeAccount \u003d new Account(\"root\", \"p@ssw0rd\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelHasDeletePrivilege \u003d new ModelManager(hasDeletePrivilegeAccount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(modelHasDeletePrivilege.getUserAccount().hasDeletePrivilege());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account noDeletePrivilegeAccount \u003d new Account(\"rose\", \"p@ssw0rd\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelNoDeletePrivilege \u003d new ModelManager(noDeletePrivilegeAccount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(modelNoDeletePrivilege.getUserAccount().hasDeletePrivilege());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void hasAccountCreationPrivilege() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account hasAccountCreationPrivilegeAccount \u003d new Account(\"root\", \"p@ssw0rd\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelHasAccountCreationPrivilege \u003d new ModelManager(hasAccountCreationPrivilegeAccount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(modelHasAccountCreationPrivilege.getUserAccount().hasAccountCreationPrivilege());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account noAccountCreationPrivilegeAccount \u003d new Account(\"rose\", \"p@ssw0rd\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model modelNoAccountCreationPrivilege \u003d new ModelManager(noAccountCreationPrivilegeAccount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(modelNoAccountCreationPrivilege.getUserAccount().hasAccountCreationPrivilege());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void transformToHashedAccountSuccess() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String plainTextPassword \u003d \"plainTextPassword\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account \u003d new Account(\"Username\", plainTextPassword, Role.SUPER_USER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(account.getPassword().equals(plainTextPassword));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        account.transformToHashedAccount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(account.getPassword().equals(plainTextPassword));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account1 \u003d new Account(\"testusername\", \"testP@ssw0rD\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account2 \u003d new Account(\"testusername\", \"testP@ssw0rD\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(account1, account2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account3 \u003d new Account(\"TESTUserNaMe\", \"testP@ssw0rD\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(account2, account3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account differentAccount \u003d new Account(\"username\", \"testP@ssw0rD\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertNotEquals(account2, differentAccount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account differentPassword \u003d new Account(\"testusername\", \"test123\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertNotEquals(account2, differentPassword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account roleDoesNotMatter \u003d new Account(\"testusername\", \"testP@ssw0rD\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(account2, roleDoesNotMatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        contact.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameContact() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSameContact(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSameContact(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 18,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueContactListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.UniqueContactList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UniqueContactListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private final UniqueContactList\u003cContact\u003e uniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void contains_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void contains_contactNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void contains_contactInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void contains_contactWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(uniqueContactList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void add_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void add_duplicateContact_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(DuplicateContactException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_nullTargetContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(null, ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_nullEditedContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_targetContactNotInList_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(ContactNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_editedContactIsSamePerson_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedUniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_editedContactHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedUniqueContactList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_editedContactHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContact_editedContactHasNonUniqueIdentity_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(DuplicateContactException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContact(ALICE, BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void remove_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void remove_contactDoesNotExist_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(ContactNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.remove(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void remove_existingContact_removesContact() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.remove(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts_nullUniqueContactList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContacts((UniqueContactList\u003cContact\u003e) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts_uniqueContactList_replacesOwnListWithProvidedUniqueContactList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContacts(expectedUniqueContactList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContacts((List\u003cContact\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e contactList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContacts(contactList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        UniqueContactList\u003cContact\u003e expectedUniqueContactList \u003d new UniqueContactList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public void setContacts_listWithDuplicateContacts_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cContact\u003e listWithDuplicateContacts \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        thrown.expect(DuplicateContactException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.setContacts(listWithDuplicateContacts);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        uniqueContactList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 87,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/ContactContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "public class ContactContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void test_contactContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Test name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate predicate \u003d new ContactContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"Alice\"), Optional.empty(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"Alice Bob\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"aLiCe\"), Optional.empty(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Substring"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"lice\"), Optional.empty(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Test phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.of(\"9999\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withPhone(\"9999\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Substring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.of(\"234\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withPhone(\"99992345\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Test email"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"abc@email.com\"), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withEmail(\"abc@email.com\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"aBc@EmAiL.com\"), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withEmail(\"abc@email.com\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Substring"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"email\"), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withEmail(\"abc@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Test address"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.of(\"Yung\"), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withAddress(\"175A Yung Kuang Road 611175\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.of(\"Yung Kuang Road\"), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withAddress(\"175A Yung Kuang Road 611175\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.of(\"yUnG\"), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withAddress(\"175A Yung Kuang Road 611175\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Substring"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.of(\"ung\"), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withAddress(\"175A Yung Kuang Road 611175\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Test tag"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"friends\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), tags));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withTags(\"friends\", \"oweMoney\").build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"oweMoney\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), tags));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withTags(\"friends\", \"oweMoney\").build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"fRiEnDs\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), tags));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withTags(\"friends\", \"oweMoney\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Substring"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"end\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), tags));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withTags(\"friends\", \"oweMoney\").build()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void test_contactDoesNotContainsKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"Carl\"), Optional.empty(), Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"Carl\"), Optional.of(\"12345\"), Optional.of(\"alice@email.com\"), Optional.of(\"Main Street\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.of(\"Alice\"), Optional.of(\"9999\"), Optional.of(\"alice@email.com\"), Optional.of(\"Pasir Ris\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                .withEmail(\"alice@gmail.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Not all keywords match"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.of(\"Alice WaiLun\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), Optional.empty(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // Not all tags match"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"friends\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        tags.add(\"oweMoney\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        predicate \u003d new ContactContainsKeywordsPredicate(new ContactInformation(Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "                Optional.empty(), Optional.empty(), tags));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withTags(\"friends\").build()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate firstPredicate \u003d new ContactContainsKeywordsPredicate(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate secondPredicate \u003d new ContactContainsKeywordsPredicate(BENSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ContactContainsKeywordsPredicate firstPredicateCopy \u003d new ContactContainsKeywordsPredicate(ALICE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 26,
      "dongsiji": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAccountStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.PasswordUtil.assertPasswordCorrect;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlAccountStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String INVALID_FILEPATH \u003d \"someInvalidPath.xml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAccountStorageTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_ACCOUNTLIST_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            \"XmlAccountStorageTest\", \"accountlist.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_ACCOUNTLIST_TOCHANGEPASSWORD \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            \"XmlAccountStorageTest\", \"accountlistToChangePassword.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_ACCOUNTDATA \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            \"XmlAccountStorageTest\", \"InvalidUsernameAccountList.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private AccountList getAccountList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return new XmlAccountStorage(Paths.get(filePath)).getAccountList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        getAccountList(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test(expected \u003d FileNotFoundException.class)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountList_missingFile_nullResult() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        getAccountList(INVALID_FILEPATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountList_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        getAccountList(\"NotXmlFormatAccountList.xml\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountList_invalidUsername_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        getAccountList(\"InvalidUsernameAccountList.xml\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountList_invalidAndValidUsername_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        getAccountList(\"InvalidAndValidUsernameAccountList.xml\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void populateRootAccountIfMissing_populateForFirstTime() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            Files.deleteIfExists(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(FileUtil.isFileExists(TEST_ACCOUNTLIST_PATH));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountStorage.populateRootAccountIfMissing(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(FileUtil.isFileExists(TEST_ACCOUNTLIST_PATH));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        // asserts that the file contains the default account."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            AccountList accountList \u003d accountStorage.getAccountList(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(0).equals(TypicalAccount.ROOTACCOUNT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount_catchDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(INVALID_ACCOUNTDATA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountStorage.saveAccount(TypicalAccount.ROSE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void getAccountStorageFilePath_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(accountStorage.getAccountStorageFilePath().equals(TEST_DATA_FOLDER));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        saveAccount(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Save an account to the specific file path."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param account The account to be saved."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param filePath The file path to save the account to."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private void saveAccount(Account account, String filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            new XmlAccountStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                    .saveAccount(account, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        saveAccount(TypicalAccount.SIMUN, null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount_invalidAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            new XmlAccountStorage(TEST_ACCOUNTLIST_PATH).saveAccount(TypicalAccount.EMPTYUSERNAME_ACCOUNT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", e);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void saveAccount_accountListOnlyContainsRootAccount() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        populateRootAccountIfMissing_populateForFirstTime();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            // save 1 time"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.saveAccount(TypicalAccount.SIMUN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            AccountList accountList \u003d accountStorage.getAccountList(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(0).equals(TypicalAccount.ROOTACCOUNT));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(1).equals(TypicalAccount.SIMUN));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            // save again"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.saveAccount(TypicalAccount.ROSE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList \u003d accountStorage.getAccountList(TEST_ACCOUNTLIST_PATH);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(0).equals(TypicalAccount.ROOTACCOUNT));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(1).equals(TypicalAccount.SIMUN));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountList.getList().get(2).equals(TypicalAccount.ROSE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"There should not be an error saving to the file.\", e);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updateAccountPassword_catchIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(INVALID_ACCOUNTDATA);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        accountStorage.updateAccountPassword(\"username\", \"password\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void updateAccountPassword_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountStorage accountStorage \u003d new XmlAccountStorage(TEST_ACCOUNTLIST_TOCHANGEPASSWORD);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String oldPassword \u003d \"@myPassword\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String newPassword \u003d \"Somerand0mNewP@ssword\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Account account \u003d new Account(\"whiterose\", oldPassword, Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        int indexOfRose \u003d 2;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            AccountList accountList \u003d accountStorage.getAccountList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            List\u003cAccount\u003e list \u003d accountList.getList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertPasswordCorrect(oldPassword, list.get(indexOfRose).getPassword());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            // change to new password"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.updateAccountPassword(account.getUserName(), passwordAuthentication.hash(newPassword));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList \u003d accountStorage.getAccountList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            list \u003d accountList.getList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertPasswordCorrect(newPassword, list.get(indexOfRose).getPassword());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            // change back to old password"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            Account newAccount \u003d new Account(\"whiterose\", newPassword, Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountStorage.updateAccountPassword(newAccount.getUserName(), passwordAuthentication.hash(oldPassword));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList \u003d accountStorage.getAccountList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            list \u003d accountList.getList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertPasswordCorrect(oldPassword, list.get(indexOfRose).getPassword());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            throw new AssertionError(\"File should exist and this line should not be called.\", e);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 213
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedAccountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.TypicalAccount.ROSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.TypicalAccount.SIMUN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlAdaptedAccountTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String EMPTY_USERNAME \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String EMPTY_PASSWORD \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Role NULL_ROLE \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String VALID_USERNAME \u003d \"Victoria95\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String VALID_USERNAME2 \u003d \"Samantha95\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String VALID_PASSWORD \u003d \"myP@ssw0rd\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final String VALID_PASSWORD2 \u003d \"myP@ssw1rd\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Role VALID_ROLE_SUPERUSER \u003d Role.SUPER_USER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Role VALID_ROLE_READONLYUSER \u003d Role.READ_ONLY_USER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_validSuperUserAccount_returnAccount() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account \u003d new XmlAdaptedAccount(SIMUN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(SIMUN, account.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_validReadOnlyUserAccount_returnAccount() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account \u003d new XmlAdaptedAccount(ROSE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(ROSE, account.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_emptyUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(EMPTY_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d Account.USERNAME_CONSTRAINT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_nullUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount person \u003d new XmlAdaptedAccount(null, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d Account.USERNAME_CONSTRAINT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_emptyPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, EMPTY_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d Account.PASSWORD_CONSTRAINT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_nullPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount person \u003d new XmlAdaptedAccount(VALID_USERNAME, null, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d Account.PASSWORD_CONSTRAINT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_nullRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, NULL_ROLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        String expectedMessage \u003d Account.ROLE_CONSTRAINT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account1 \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account2 \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(account1.equals(account2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals_differentUsername_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account1 \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account2 \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME2, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(account1.equals(account2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals_differentPassword_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account1 \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account2 \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD2, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(account1.equals(account2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals_differentRole_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account1 \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_SUPERUSER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlAdaptedAccount account2 \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                new XmlAdaptedAccount(VALID_USERNAME, VALID_PASSWORD, VALID_ROLE_READONLYUSER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertFalse(account1.equals(account2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedClientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class XmlAdaptedClientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final XmlAdaptedService INVALID_SERVICE \u003d new XmlAdaptedService(\"photoshoot $200\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final List\u003cXmlAdaptedService\u003e VALID_SERVICES \u003d BENSON.getServicesStream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            .map(XmlAdaptedService::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eehooi"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static final ContactType VALID_CONTACT_TYPE \u003d ContactType.CLIENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SERVICES,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                        VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                VALID_TAGS, VALID_SERVICES, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SERVICES,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                VALID_SERVICES, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SERVICES,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                        VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                VALID_SERVICES, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_SERVICES,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                        VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                VALID_SERVICES, VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_SERVICES,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "                        VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public void toModelType_invalidServices_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        List\u003cXmlAdaptedService\u003e invalidServices \u003d new ArrayList\u003c\u003e(VALID_SERVICES);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        invalidServices.add(INVALID_SERVICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, invalidServices,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        VALID_CONTACT_TYPE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SERVICES,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 8,
      "liaujianjie": 16,
      "eehooi": 24,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        original.addContact(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        original.removeContact(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        original.addContact(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 7,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAccountListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.TypicalAccount.ROOTACCOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.TypicalAccount.ROSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static seedu.address.testutil.TypicalAccount.SIMUN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class XmlSerializableAccountListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAccountListTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path TYPICAL_ACCOUNT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAccount_AccountList.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path INVALID_ACCOUNT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAccount_AccountList.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    private static final Path DUPLICATE_ACCOUNT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAccount_AccountList.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_typicalAccountFile_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ACCOUNT_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList typicalAccountAccountList \u003d new AccountList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        typicalAccountAccountList.addAccount(new Account(\"rootUser\", \"rootPassword\", Role.SUPER_USER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        typicalAccountAccountList.addAccount(new Account(\"simun\", \"@myPassword\", Role.SUPER_USER));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        typicalAccountAccountList.addAccount(new Account(\"whiterose\", \"@myPassword\", Role.SUPER_USER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : typicalAccountAccountList.getList()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            assertTrue(accountListFromFile.hasUsernameAndPassword(account.getUserName(), account.getPassword()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_invalidAccountFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ACCOUNT_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void toModelType_duplicateAccounts_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_ACCOUNT_FILE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                XmlSerializableAccountList.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        thrown.expectMessage(XmlSerializableAccountList.MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void equals_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList1 \u003d TypicalAccount.getTypicalAccountList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList2 \u003d TypicalAccount.getTypicalAccountList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList1 \u003d new XmlSerializableAccountList(accountList1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList2 \u003d new XmlSerializableAccountList(accountList2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertEquals(xmlSerializableAccountList1, xmlSerializableAccountList2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public void notEquals_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ArrayList\u003cAccount\u003e accountArrayList1 \u003d new ArrayList\u003c\u003e(Arrays.asList(ROOTACCOUNT, SIMUN, ROSE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        ArrayList\u003cAccount\u003e accountArrayList2 \u003d new ArrayList\u003c\u003e(Arrays.asList(ROOTACCOUNT, SIMUN));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList1 \u003d new AccountList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList2 \u003d new AccountList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountArrayList1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList1.addAccount(account);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : accountArrayList2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList2.addAccount(account);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList1 \u003d new XmlSerializableAccountList(accountList1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        XmlSerializableAccountList xmlSerializableAccountList2 \u003d new XmlSerializableAccountList(accountList2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertNotEquals(xmlSerializableAccountList1, xmlSerializableAccountList2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.TypicalContacts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalContacts.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Adds a new {@code Client} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Contact contact) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        addressBook.addContact(contact);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Map\u003cString, Service\u003e services;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        services \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        id \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder(Contact contactToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d contactToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d contactToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d contactToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d contactToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(contactToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        services \u003d new HashMap\u003c\u003e(contactToCopy.getServices());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        id \u003d contactToCopy.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     *  Sets the {@code id} of the {@code Client} that we are building"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ClientBuilder withId(int id) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contact build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return new Client(name, phone, email, address, tags, services, id);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 31,
      "eehooi": 7,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditContactDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A utility class to help with building EditContactDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class EditContactDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private UpdateCommand.EditContactDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new UpdateCommand.EditContactDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder(EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.descriptor \u003d new EditContactDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns an {@code EditContactDescriptor} with fields containing {@code client}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder(Contact contact) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        descriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(contact.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(contact.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(contact.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(contact.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(contact.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Name} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Email} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Address} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditContactDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public EditContactDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public UpdateCommand.EditContactDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 27,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PasswordUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.logic.security.PasswordAuthentication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * A utility class for password related methods"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class PasswordUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Assert that the given plainTextPassword corresponds to the hashedpassword supplied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param plainTextPassword The password in plaintext"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * @param hashedPassword A hashed string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static void assertPasswordCorrect(String plainTextPassword, String hashedPassword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        PasswordAuthentication passwordAuthentication \u003d new PasswordAuthentication();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        assertTrue(passwordAuthentication.authenticate(plainTextPassword.toCharArray(), hashedPassword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NightYeti": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.logic.commands.AddServiceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Contact contact) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update this input for the add command after finalising parser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return \"client \" + AddCommand.COMMAND_WORD + \" \" + getPersonDetails(contact);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Contact contact) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + contact.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + contact.getPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + contact.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + contact.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        contact.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the part of command string for the given {@code EditContactDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates a client addservice input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param contact Contact to add service to."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param service Service to be added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @return New string containing client addservice input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static String getClientAddServiceCommand(Contact contact, Service service, Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return \"client#\" + index.getOneBased() + \" \" + AddServiceCommand.COMMAND_WORD + \" s/\" + service.getName()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                + \" c/\" + service.getCost();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eehooi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * Creates a serviceprovider addservice input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param contact Contact to add service to."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @param service Service to be added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     * @return New string containing serviceprovider addservice input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eehooi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    public static String getServiceProviderAddServiceCommand(Contact contact, Service service, Index index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return \"serviceprovider#\" + index.getOneBased() + \" \" + AddServiceCommand.COMMAND_WORD + \" s/\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eehooi"
        },
        "content": "                + service.getName() + \" c/\" + service.getCost();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 8,
      "eehooi": 25,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ServiceProviderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eehooi"
        },
        "content": "import seedu.address.model.contact.Service;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.serviceprovider.ServiceProvider;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A utility class to help with building ServiceProvider objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ServiceProviderBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Dominic Dong\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"999\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"dong.siji@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong East Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private Map\u003cString, Service\u003e services;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        services \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        id \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Initializes the ServiceProviderBuilder with the data of {@code contactToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder(Contact contactToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        name \u003d contactToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        phone \u003d contactToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        email \u003d contactToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        address \u003d contactToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(contactToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        services \u003d new HashMap\u003c\u003e(contactToCopy.getServices());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        id \u003d contactToCopy.getId();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Name} of the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Address} of the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Phone} of the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code Email} of the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Sets the {@code id} of the {@code ServiceProvider} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public ServiceProviderBuilder withId(int id) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public Contact build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        return new ServiceProvider(name, phone, email, address, tags, services, id);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 103,
      "eehooi": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Contact getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return model.getFilteredContactList().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .filter(contact -\u003e contact.getId() \u003d\u003d index.getOneBased())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.AccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.model.account.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " * A utility class containing a list of {@code Account} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NightYeti"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "public class TypicalAccount {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Account SIMUN \u003d new Account(\"simun\", \"@myPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Account ROSE \u003d new Account(\"whiterose\", \"@myPassword\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Account LUNA \u003d new Account(\"alex95\", \"_MyPassword\", Role.READ_ONLY_USER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Account ROOTACCOUNT \u003d new Account(\"rootUser\", \"rootPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static final Account EMPTYUSERNAME_ACCOUNT \u003d new Account(\"\", \"rootPassword\", Role.SUPER_USER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     * Returns an {@code Account} with all the typical Accounts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static AccountList getTypicalAccountList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        for (Account account : getTypicalAccount()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            accountList.addAccount(account);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NightYeti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    public static List\u003cAccount\u003e getTypicalAccount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOTACCOUNT, SIMUN, ROSE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalContacts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": " * A utility class containing a list of {@code Contact} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class TypicalContacts {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // A keyword that matches MEIER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"n/Meier\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static int clientId \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private static int serviceProviderId \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(clientId++)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(clientId++)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"heinz@example.com\").withId(clientId++).withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withId(clientId++).withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"werner@example.com\").withId(clientId++).withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"lydia@example.com\").withId(clientId++).withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"anna@example.com\").withId(clientId++).withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    // ServiceProviders below"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact DOMINIC \u003d new ServiceProviderBuilder().withName(\"Dominic Dong\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"123, Jurong East Ave 6, #08-111\").withEmail(\"dominicdong@example.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withPhone(\"94311253\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact EEHOOI \u003d new ServiceProviderBuilder().withName(\"Ng Ee Hooi\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"313, Clementi Ave 5, #02-25\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"eehooid@example.com\").withPhone(\"98762432\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact GAN \u003d new ServiceProviderBuilder().withName(\"Gan Chin Yao\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"313, Pioneer Ave 5, #02-25\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"gan@example.com\").withPhone(\"18762432\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact JIANJIE \u003d new ServiceProviderBuilder().withName(\"Liau Jian Jie\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"444, River Valley Ave 5, #02-25\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"jj@example.com\").withPhone(\"93762432\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact WAILUN \u003d new ServiceProviderBuilder().withName(\"Lim Wai Lun\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"313, Red Hill Ave 5, #02-25\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"wailunoob@example.com\").withPhone(\"98761432\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact SIJI \u003d new ServiceProviderBuilder().withName(\"Dong SiJi\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"313, Buona Vista Ave 5, #02-25\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"dong.siji@example.com\").withPhone(\"91232432\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static final Contact CHINYAO \u003d new ServiceProviderBuilder().withName(\"Chino\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withAddress(\"313, Pasir Ris Ave 5, #02-25\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withEmail(\"chinoyaobi@example.com\").withPhone(\"98711132\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public static final Contact JON \u003d new ServiceProviderBuilder().withName(\"Jon\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            .withAddress(\"313, Clementi Ave 5, #02-25\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            .withEmail(\"jon@example.com\").withPhone(\"91352468\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            .withId(serviceProviderId++)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    private TypicalContacts() {} // prevents instantiation"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical contacts."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        for (Contact contact : getTypicalContacts()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            ab.addContact(contact);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    public static List\u003cContact\u003e getTypicalContacts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Client.resetClientId();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                DOMINIC, EEHOOI, GAN, JIANJIE, WAILUN, SIJI, CHINYAO));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 85,
      "dongsiji": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // associated web page of a client"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ClientCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ClientCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactWithNoTags \u003d new ClientBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(contactWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, contactWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactWithTags \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(contactWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, contactWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contact \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(contact, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // same client, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(contact, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // different client, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact differentContact \u003d new ClientBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentContact, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // same client, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(contact, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Contact expectedContact, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(\"#\" + Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // verify client details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedContact, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 11,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ClientListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalContacts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class ClientListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cContact\u003e TYPICAL_CONTACTS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "            FXCollections.observableList(getTypicalContacts());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_CONTACTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CONTACTS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_CONTACTS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Contact expectedContact \u003d TYPICAL_CONTACTS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedContact, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_CONTACTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cContact\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        }, \"Creation and deletion of client cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cContact\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getContactList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liaujianjie"
        },
        "content": "            builder.append(\"\u003ctype\u003eCLIENT\u003c/type\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cContact\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 7,
      "liaujianjie": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //TODO: update inputs to test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d \"client \" + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "        Model model \u003d new ModelManager(TypicalAccount.ROOTACCOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update thirdCommand input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String thirdCommand \u003d \"client list\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String thirdCommand \u003d \"client list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 2,
      "wailunlim": 2,
      "dongsiji": 3,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "import seedu.address.testutil.TypicalAccount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NightYeti"
        },
        "content": "                    new ModelManager(TypicalAccount.ROOTACCOUNT)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NightYeti": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eehooi"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/MainTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eehooi": 1,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a client without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Contact toAdd \u003d AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update string input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String command \u003d \"  \" + \"client \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.addContact(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a client with all fields same as another client in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        toAdd \u003d new ClientBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a client with all fields same as another client in the address book except phone and email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        toAdd \u003d new ClientBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a client with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a client, missing tags -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filters the client list before adding -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* ------------------------ Perform add operation while a client card is selected --------------------------- */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: selects first card in the client list, add a client -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a duplicate client -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a duplicate client except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        toAdd \u003d new ClientBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a duplicate client except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        toAdd \u003d new ClientBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a duplicate client except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        toAdd \u003d new ClientBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: add a duplicate client except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Contact toAdd) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Client)}. Executes {@code command}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Contact)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Contact toAdd) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.addContact(toAdd);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Client)} except asserts that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Contact)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 60,
      "dongsiji": 2,
      "-": 194
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.TypicalContacts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        return TypicalContacts.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    protected void showAllClients() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update the input to this"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        executeCommand(\"client \" + ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int currentSize \u003d getModel().getFilteredContactList().size();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        getModel().updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int expectedSize \u003d getModel().getFilteredContactList().size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(currentSize, expectedSize);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update and create tests to reflect client and serviceprovider"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        if (keyword.contains(\"n/\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            executeCommand(\"client \" + ListCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "            executeCommand(\"client \" + ListCommand.COMMAND_WORD + \" n/\" + keyword);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(getModel().getFilteredContactList().size() \u003c getModel().getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Selects the client at {@code index} of the displayed list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getContactList().size());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same client objects as {@code expectedModel}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * and the client list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredContactList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * of the previously selected client."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the client in the client list panel at"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the client list panel remain unchanged."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredContactList());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 21,
      "dongsiji": 6,
      "-": 275
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        defaultModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"     \" + ClearCommand.COMMAND_WORD + \" ab 1324151 \", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandSuccess(\" \" + ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: selects first card in client list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filters the client list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 7,
      "dongsiji": 2,
      "-": 97
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: delete the first client in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update command string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String command \u003d \"     \" + \"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + \"      \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Contact deletedContact \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedContact);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: delete the last client in the list -\u003e deleted */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        modelBeforeDeletingLast.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        List\u003cContact\u003e currentList \u003d modelBeforeDeletingLast.getFilteredContactList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(currentList.get(currentList.size() - 1).getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: undo deleting the last client in the list -\u003e last client restored */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: redo deleting the last client in the list -\u003e last client deleted again */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: delete the middle client in the list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, delete index within bounds of address book and client list -\u003e deleted */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // should delete relative to client list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Index index \u003d Index.fromOneBased(getModel().getFilteredContactList().get(0).getId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, delete index within bounds of address book but out of bounds of client list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getContactList().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + invalidIndex + \" \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* --------------------- Performing delete operation while a client card is selected ------------------------ */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: select command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: delete the selected client -\u003e client list panel selects the client before the deleted client */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showAllClients();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + selectedIndex.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedContact \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedContact);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#0 \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#-1 \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                getModel().getAddressBook().getContactList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + outOfBoundsIndex.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#abc \" + DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#1 abc \" + DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#1 DelETE\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Removes the {@code Client} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @return the removed client"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Contact removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Contact targetContact \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.deleteContact(targetContact);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetContact;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Deletes the client at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Contact deletedContact \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedContact);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: Update command input"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                \"client#\" + toDelete.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 45,
      "-": 161
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredContactList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: update string input passed to executeCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        executeCommand(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 5,
      "-": 105
    }
  },
  {
    "path": "src/test/java/systemtests/ListCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "public class ListCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "    //TODO: add cases for serviceproviders and update the input commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        String command \u003d \"   \" + \"client \" + ListCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: repeat previous find command where client list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find client where client list is not displaying the client we are finding -\u003e 1 client found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 0 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 0 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Daniel Daniel\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find Benson to delete */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Benson\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dongsiji"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 client found */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        executeCommand(\"client#\" + BENSON.getId() + \" \" + DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(getModel().getAddressBook().getContactList().contains(BENSON));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find client in address book, keyword is same as name but of different case -\u003e 1 client found */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/MeIeR\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find client in address book, keyword is substring of name -\u003e 1 persons found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Mei\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find client in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Meiers\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find client not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Mark\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find phone number of client in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" p/\" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find address of client in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" a/\" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find email of client in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" e/\" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        /* Case: find tags of client in address book -\u003e 2 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" t/\" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, DANIEL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find while a client is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showAllClients();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" n/Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: find client in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dongsiji"
        },
        "content": "        command \u003d \"client \" + ListCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredContactList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 19,
      "dongsiji": 37,
      "-": 139
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cContact\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cContact\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cContact\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Contact... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Client} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cContact\u003e getPredicateMatching(Contact other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eehooi"
        },
        "content": "// import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: select the first card in the client list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: select the last card in the client list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // TODO Resolve selection of middle card issue"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: select the middle card in the client list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eehooi"
        },
        "content": "        // assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, select index within bounds of address book but out of bounds of client list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getContactList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, select index within bounds of address book and client list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredContactList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredContactList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(MESSAGE_UNKNOWN_COMMAND, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected client.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 11,
      "eehooi": 6,
      "-": 138
    }
  },
  {
    "path": "src/test/java/systemtests/UpdateCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.ContactType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "public class UpdateCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        String command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact editedContact \u003d new ClientBuilder(BOB).withTags(VALID_TAG_HUSBAND).withId(1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedContact);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: undo editing the last client in the list -\u003e last client restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: redo editing the last client in the list -\u003e last client edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        model.updateContact("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                getModel().getFilteredContactList().get(INDEX_FIRST_PERSON.getZeroBased()), editedContact);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(getModel().getAddressBook().getContactList().contains(BOB));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertNotEquals(getModel().getFilteredContactList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedContact \u003d new ClientBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedContact);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedContact \u003d new ClientBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedContact);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        Contact contactToEdit \u003d getModel().getFilteredContactList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedContact \u003d new ClientBuilder(contactToEdit).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedContact);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, edit the client filtered (client#\u003cid of client shown\u003e _\u003e edited */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredContactList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + getModel().getFilteredContactList().get(0).getId() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        contactToEdit \u003d getModel().getFilteredContactList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        editedContact \u003d new ClientBuilder(contactToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedContact);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: filtered client list, edit index within bounds of address book but out of bounds of client list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getContactList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + invalidIndex + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* --------------------- Performing edit operation while a client card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: How is select going to work now?"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: selects first card in the client list, edit a client -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        showAllClients();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // browser\u0027s url is updated to reflect the new client\u0027s name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#0 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#-1 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredContactList().size() + 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + invalidIndex + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(Messages.MESSAGE_UNKNOWN_COMMAND, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(\"client#\" + INDEX_FIRST_PERSON.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                        + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wailunlim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertTrue(getModel().getAddressBook().getContactList().contains(BOB));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertFalse(getModel().getFilteredContactList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#\" + index.getOneBased() + \" \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#2 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        command \u003d \"client#2 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //TODO: Please help me take a look for the test cases below"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // command \u003d \"client#2 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //         + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // assertTrue(getModel().getAddressBook().getContactList().contains(BOB));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // System.out.println(BOB.toString());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        /* Case: edit a client with new values same as another client\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // command \u003d \"client#2 \" + UpdateCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        //         + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        // assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Client, Index)} except that"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Index, Contact, Index)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Contact editedContact) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedContact, null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code UpdateCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the client at index {@code toEdit} being"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Contact editedContact,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateContact(expectedModel.getFilteredContactList().get(toEdit.getZeroBased()), editedContact);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedContact), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "        expectedModel.updateFilteredContactList(ContactType.CLIENT.getFilter());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 118,
      "-": 196
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wailunlim"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wailunlim": 1,
      "-": 6
    }
  }
]
